{
	"swagger": "2.0",
	"info": {
		"title": "500px",
		"description": "500px API provides programmatic access to 500px functionality and content. Version 1 of the API is limited to the essentials of the website's functionality: viewing feature streams, photo information and comments, as well as user profiles.",
		"termsOfService": "https://github.com/500px/api-documentation/blob/master/basics/terms_of_use.md",
		"version": "v1"
	},
	"host": "api.500px.com",
	"basePath": "/v1/",
	"schemes": [
		"http"
	],
	"produces": [
		"application/json"
	],
	"consumes": [
		"application/json"
	],
	"paths": {
		"/blogs/": {
			"post": {
				"summary": "Creates a new Story.",
				"description": "Creates a new Story.",
				"operationId": "creates-a-new-story",
				"parameters": [
					{
						"name": "body (required)",
						"in": "query",
						"description": "Content of the blog post.",
						"type": "string"
					},
					{
						"name": "latitude",
						"in": "query",
						"description": "Latitude for the blog post.",
						"type": "string"
					},
					{
						"name": "longitude",
						"in": "query",
						"description": "Longitude for the blog post.",
						"type": "string"
					},
					{
						"name": "photo_ids",
						"in": "query",
						"description": "Comma separated list of Photo ID values to post with the blog.",
						"type": "string"
					},
					{
						"name": "tags",
						"in": "query",
						"description": "Comma separated list of tags.",
						"type": "string"
					},
					{
						"name": "title (required)",
						"in": "query",
						"description": "Title for the blog post.",
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [
					""
				]
			}
		},
		"/blogs/:id": {
			"put": {
				"summary": "Updates the Story.",
				"description": "Updates the Story.",
				"operationId": "updates-the-story",
				"parameters": [
					{
						"name": "body",
						"in": "query",
						"description": "Content of the blog post.",
						"type": "string"
					},
					{
						"name": "id (required)",
						"in": "query",
						"description": "The Blog Post ID to update.",
						"type": "string"
					},
					{
						"name": "latitude",
						"in": "query",
						"description": "Latitude for the blog post.",
						"type": "string"
					},
					{
						"name": "longitude",
						"in": "query",
						"description": "Longitude for the blog post.",
						"type": "string"
					},
					{
						"name": "photo_ids",
						"in": "query",
						"description": "Comma separated list of Photo IDs for photos that are in the blog post.",
						"type": "string"
					},
					{
						"name": "tags",
						"in": "query",
						"description": "Comma separated list of tags.",
						"type": "string"
					},
					{
						"name": "title",
						"in": "query",
						"description": "Title for the blog post.",
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [
					""
				]
			}
		},
		"/blogs/:id/comments": {
			"post": {
				"summary": "Creates a comment for the Story.",
				"description": "Creates a comment for the Story.",
				"operationId": "creates-a-comment-for-the-story",
				"parameters": [
					{
						"name": "body (required)",
						"in": "query",
						"description": "Content of the comment.",
						"type": "string"
					},
					{
						"name": "id (required)",
						"in": "query",
						"description": "The Story ID to create a comment for.",
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [
					""
				]
			}
		},
		"/collections": {
			"post": {
				"summary": "Creates new a collection.",
				"description": "Creates new a collection.",
				"operationId": "creates-new-a-collection",
				"parameters": [
					{
						"name": "kind",
						"in": "query",
						"description": "Kind of the Collection to be created Recognized values: 1 - Portfolio Set (default), 2 - Profile Set.",
						"type": "string"
					},
					{
						"name": "path (required)",
						"in": "query",
						"description": "Path where the collection will be accessible at 500px.com/user/sets/:path.",
						"type": "string"
					},
					{
						"name": "photo_ids",
						"in": "query",
						"description": "Comma separated list of Photo ID values to post with the blog.",
						"type": "string"
					},
					{
						"name": "position",
						"in": "query",
						"description": "Position of the collection in the list of collections.",
						"type": "string"
					},
					{
						"name": "title (required)",
						"in": "query",
						"description": "Title for the collection.",
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [
					""
				]
			}
		},
		"/collections/:id": {
			"put": {
				"summary": "Updates collection.",
				"description": "Updates collection.",
				"operationId": "updates-collection",
				"parameters": [
					{
						"name": "id (required)",
						"in": "query",
						"description": "Collection ID.",
						"type": "string"
					},
					{
						"name": "kind",
						"in": "query",
						"description": "Change kind of the Collection. Recognized values: 1 - Portfolio Set, 2 - Profile Set.",
						"type": "string"
					},
					{
						"name": "path",
						"in": "query",
						"description": "Path where the collection will be accessible at 500px.com/user/sets/:path.",
						"type": "string"
					},
					{
						"name": "photo_ids",
						"in": "query",
						"description": "Comma separated list of Photo ID values that are in this collection.",
						"type": "string"
					},
					{
						"name": "position",
						"in": "query",
						"description": "Position of the collection in the list of collections.",
						"type": "string"
					},
					{
						"name": "title",
						"in": "query",
						"description": "Title for the collection.",
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [
					""
				]
			}
		},
		"/comments/:id/comments": {
			"post": {
				"summary": "Creates a reply to an existing comment. Comments can only be nested one level deep, you cannot reply to a reply of a comment. If a comment has a non-null parent_id value then it cannot be replied to.",
				"description": "Creates a reply to an existing comment. Comments can only be nested one level deep, you cannot reply to a reply of a comment. If a comment has a non-null parent_id value then it cannot be replied to.",
				"operationId": "creates-a-reply-to-an-existing-comment-comments-can-only-be-nested-one-level-deep-you-cannot-reply-t",
				"parameters": [
					{
						"name": "body (required)",
						"in": "query",
						"description": "Content of the comment.",
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [
					""
				]
			}
		},
		"/photos": {
			"post": {
				"summary": "Create a new photo on behalf of the user, and receive an upload key in exchange.",
				"description": "Create a new photo on behalf of the user, and receive an upload key in exchange.",
				"operationId": "create-a-new-photo-on-behalf-of-the-user-and-receive-an-upload-key-in-exchange",
				"parameters": [
					{
						"name": "aperture",
						"in": "query",
						"description": "Aperture value",
						"type": "string"
					},
					{
						"name": "camera",
						"in": "query",
						"description": "Make and model of the camera. Note: Please make sure it contains sensible information (eg., does not contain cameras make or model twice)",
						"type": "string"
					},
					{
						"name": "category",
						"in": "query",
						"description": "A numerical ID for the Category of the photo",
						"type": "string"
					},
					{
						"name": "description",
						"in": "query",
						"description": "Description for the photo",
						"type": "string"
					},
					{
						"name": "focal_length",
						"in": "query",
						"description": "Focal length in millimetres, a string representing an integer value",
						"type": "string"
					},
					{
						"name": "iso",
						"in": "query",
						"description": "ISO value",
						"type": "string"
					},
					{
						"name": "latitude",
						"in": "query",
						"description": "Latitude, in decimal format",
						"type": "string"
					},
					{
						"name": "lens",
						"in": "query",
						"description": "Lens used to make this photo",
						"type": "string"
					},
					{
						"name": "longitude",
						"in": "query",
						"description": "Longitude, in decimal format",
						"type": "string"
					},
					{
						"name": "name",
						"in": "query",
						"description": "Title of the photo",
						"type": "string"
					},
					{
						"name": "privacy",
						"in": "query",
						"description": "Whether to hide the photo from the user profile on the website. Otherwise, the photo is only available for use in Collections/Portfolio. Recognized values: 1, 0.",
						"type": "string"
					},
					{
						"name": "shutter_speed",
						"in": "query",
						"description": "Shutter speed in seconds, represented by string containing a rational expression if the value is 1sec.",
						"type": "string"
					},
					{
						"name": "tags",
						"in": "query",
						"description": "Comma-separated list of tags to apply to the photo.",
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [
					""
				]
			}
		},
		"/photos/:id": {
			"put": {
				"summary": "Allows the client application to update user-editable information on a photo.nnnResource URLnnhttps://api.500px.com/v1/photos/:idnnnnAuthenticationnnRequired; OAuth. The client application must use the OAuth access token issued for the owner of the p",
				"description": "Allows the client application to update user-editable information on a photo.nnnResource URLnnhttps://api.500px.com/v1/photos/:idnnnnAuthenticationnnRequired; OAuth. The client application must use the OAuth access token issued for the owner of the photo to access this resouce.nnnParametersnnThe application must provide the ID of the photo to update in the URL of the request. The following parameters are recognized when included in the query string or POST body:nnnnname: Title of the photo, up to 255 characters in length.nndescription: Text description of the photo, up to 65535 characters in length.nncategory: Integer number of the category of the photo. See category mapping for exact values.nntags: Comma-separated list of tags applicable to this photo.nnadd_tags: Comma-separated list of tags to add to this photo's existing tags.nnremove_tags: Comma-separated list of tags to remove from this photo's existing tags.nnshutter_speed: Shutter speed value for the photo, internally stored as string.nnfocal_length: Focal length value for the photo, internally stored as string.nnaperture: Aperture value value for the photo, internally stored as string.nniso: Integer ISO value for the photo.nncamera: Make and model of the camera used to take this photo.nnlens: Information about the lens used to take this photo.nnlatitude: Latitude of the location this photo was taken at represented by a decimal number.nnlongitude: Longitude of the location this photo was taken at represented by a decimal number.nnnsfw: Boolean value indicating that the photo may contain not-safe-for-work content or content not suitable for minors.nnlicense_type: Integer number of the license type chosen for this photo. See license type mapping for exact values.nnprivacy: Integer value indicating that the photo should be shown (0) or hidden (1) on the user's profile.nncrop: A hash containing keys x, x2, y, y2 and representing coordinates within which the thumbnail must be cropped. The crop is made using the top left corner as the origin. The points must be given relative to image size 4, an image of at most 900px on the larger side. The client application may skip this if the user does not wish to change photo thumbnail.nnnnImplementation detailsnnA parameter missing from the request will not be updated.  A parameter set to an empty string or null value will be interpreted as the user wishing to reset the value of the field to its default value.nnYou can use the add_tags and remove_tags parameters to manupulate a photo's tags without having to send the complete list of tags in the request.nnnReturn formatnnA JSON object containing key photo, where photo is a Photo object in full format.nnnErrorsnnAll known errors cause the resource to return HTTP error code header together with a JSON array containing at least 'status' and 'error' keys describing the source of error.nnnn401: Invalid OAuth request: The request was refused because the OAuth signature is incorrect.nn404: Photo with ID not found: The photo ID provided is not known to the system.nn404: Photo with ID has been deleted: The photo has been deleted and can not be edited.nn404: Photo with ID belongs to a deactivated user: The photo belongs to a user that is no longer active and can not be edited.nn400: Bad photo category: An unrecognized photo category value has been provided.nn400: Bad license type: An unrecognized license type value has been provided.",
				"operationId": "allows-the-client-application-to-update-usereditable-information-on-a-photoresource-urlhttpsapi500px",
				"parameters": [
					{
						"name": "add_tags: Comma-separated list of tags to add to this photo's existing tags.",
						"in": "query",
						"description": "",
						"type": "string"
					},
					{
						"name": "aperture: Aperture value value for the photo, internally stored as string.",
						"in": "query",
						"description": "",
						"type": "string"
					},
					{
						"name": "camera: Make and model of the camera used to take this photo.",
						"in": "query",
						"description": "",
						"type": "string"
					},
					{
						"name": "category: Integer number of the category of the photo. See category mapping for exact values.",
						"in": "query",
						"description": "",
						"type": "string"
					},
					{
						"name": "crop: A hash containing keys x, x2, y, y2 and representing coordinates within which the thumbnail must be cropped. The crop is made using the top left corner as the origin. The points must be given relative to image size 4, an image of at most 900px ",
						"in": "query",
						"description": "",
						"type": "string"
					},
					{
						"name": "description: Text description of the photo, up to 65535 characters in length.",
						"in": "query",
						"description": "",
						"type": "string"
					},
					{
						"name": "focal_length: Focal length value for the photo, internally stored as string.",
						"in": "query",
						"description": "",
						"type": "string"
					},
					{
						"name": "iso: Integer ISO value for the photo.",
						"in": "query",
						"description": "",
						"type": "string"
					},
					{
						"name": "latitude: Latitude of the location this photo was taken at represented by a decimal number.",
						"in": "query",
						"description": "",
						"type": "string"
					},
					{
						"name": "lens: Information about the lens used to take this photo.",
						"in": "query",
						"description": "",
						"type": "string"
					},
					{
						"name": "license_type: Integer number of the license type chosen for this photo. See license type mapping for exact values.",
						"in": "query",
						"description": "",
						"type": "string"
					},
					{
						"name": "longitude: Longitude of the location this photo was taken at represented by a decimal number.",
						"in": "query",
						"description": "",
						"type": "string"
					},
					{
						"name": "name: Title of the photo, up to 255 characters in length.",
						"in": "query",
						"description": "",
						"type": "string"
					},
					{
						"name": "nsfw: Boolean value indicating that the photo may contain not-safe-for-work content or content not suitable for minors.",
						"in": "query",
						"description": "",
						"type": "string"
					},
					{
						"name": "privacy: Integer value indicating that the photo should be shown (0) or hidden (1) on the user's profile.",
						"in": "query",
						"description": "",
						"type": "string"
					},
					{
						"name": "remove_tags: Comma-separated list of tags to remove from this photo's existing tags.",
						"in": "query",
						"description": "",
						"type": "string"
					},
					{
						"name": "shutter_speed: Shutter speed value for the photo, internally stored as string.",
						"in": "query",
						"description": "",
						"type": "string"
					},
					{
						"name": "tags: Comma-separated list of tags applicable to this photo.",
						"in": "query",
						"description": "",
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [
					""
				]
			}
		},
		"/photos/:id/comments": {
			"post": {
				"summary": "Creates a new comment for the photo.",
				"description": "Creates a new comment for the photo.",
				"operationId": "creates-a-new-comment-for-the-photo",
				"parameters": [
					{
						"name": "body (required)",
						"in": "query",
						"description": "Content of the comment.",
						"type": "string"
					},
					{
						"name": "id (required)",
						"in": "query",
						"description": "The Photo ID to post comments for.",
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [
					""
				]
			}
		},
		"/photos/:id/favorite": {
			"post": {
				"summary": "Adds the photo to user's list of favorites.",
				"description": "Adds the photo to user's list of favorites.",
				"operationId": "adds-the-photo-to-users-list-of-favorites",
				"parameters": [
					{
						"name": "id (required)",
						"in": "query",
						"description": "ID of the photo the favorite is cast upon.",
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [
					""
				]
			}
		},
		"/photos/:id/favorites": {
			"get": {
				"summary": "Returns all users that had favorite that photo.",
				"description": "Returns all users that had favorite that photo.",
				"operationId": "returns-all-users-that-had-favorite-that-photo",
				"parameters": [
					{
						"name": "page",
						"in": "query",
						"description": "Return a specific page in the photo stream. Page numbering is 1-based.",
						"type": "string"
					},
					{
						"name": "rpp",
						"in": "query",
						"description": "The number of results to return. Can not be over 100, default 20.",
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [
					""
				]
			}
		},
		"/photos/:id/report": {
			"post": {
				"summary": "Allows to report a photo.",
				"description": "Allows to report a photo.",
				"operationId": "allows-to-report-a-photo",
				"parameters": [
					{
						"name": "id (required)",
						"in": "query",
						"description": "ID of the photo to report.",
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [
					""
				]
			}
		},
		"/photos/:id/tags": {
			"post": {
				"summary": "Adds tags to the photo. Accepts one or multiple coma separated tags.",
				"description": "Adds tags to the photo. Accepts one or multiple coma separated tags.",
				"operationId": "adds-tags-to-the-photo-accepts-one-or-multiple-coma-separated-tags",
				"parameters": [
					{
						"name": "id (required)",
						"in": "query",
						"description": "The Photo ID to add tags for.",
						"type": "string"
					},
					{
						"name": "tags (required)",
						"in": "query",
						"description": "Coma separated tags.",
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [
					""
				]
			}
		},
		"/photos/:id/vote": {
			"post": {
				"summary": "Allows the user to vote for a photo.",
				"description": "Allows the user to vote for a photo.",
				"operationId": "allows-the-user-to-vote-for-a-photo",
				"parameters": [
					{
						"name": "id (required)",
						"in": "query",
						"description": "ID of the photo the vote is cast upon.",
						"type": "string"
					},
					{
						"name": "vote (required)",
						"in": "query",
						"description": "vote, values: 0 for dislike or 1 for like.",
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [
					""
				]
			}
		},
		"/photos/:id/votes": {
			"get": {
				"summary": "Returns all users that had liked this photo.",
				"description": "Returns all users that had liked this photo.",
				"operationId": "returns-all-users-that-had-liked-this-photo",
				"parameters": [
					{
						"name": "page",
						"in": "query",
						"description": "Return a specific page in the photo stream. Page numbering is 1-based.",
						"type": "string"
					},
					{
						"name": "rpp",
						"in": "query",
						"description": "The number of results to return. Can not be over 100, default 20.",
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [
					""
				]
			}
		},
		"/photos/search": {
			"get": {
				"summary": "Returns a listing of twenty (up to one hundred) photos from search results for a specified tag, keyword, or location.",
				"description": "Returns a listing of twenty (up to one hundred) photos from search results for a specified tag, keyword, or location.",
				"operationId": "returns-a-listing-of-twenty-up-to-one-hundred-photos-from-search-results-for-a-specified-tag-keyword",
				"parameters": [
					{
						"name": "comments_count u2014u00a0Sort by the number of comments, most commented first.",
						"in": "query",
						"description": "",
						"type": "string"
					},
					{
						"name": "created_at",
						"in": "query",
						"description": "Default: sort by time of upload, most recent first.",
						"type": "string"
					},
					{
						"name": "exclude",
						"in": "query",
						"description": "String name of the category to exclude from the results. Note: Multiple categories may be given, separated by commas, e.g. People,Nude",
						"type": "string"
					},
					{
						"name": "favorites_count",
						"in": "query",
						"description": "Sort by the number of favorites, most favorited first.",
						"type": "string"
					},
					{
						"name": "geo",
						"in": "query",
						"description": "A geo-location point of the format latitude,longitude,radius&lt;units&gt;. Acceptable units are km or mi.",
						"type": "string"
					},
					{
						"name": "highest_rating",
						"in": "query",
						"description": "Sort by highest rating achieved, highest rated first.",
						"type": "string"
					},
					{
						"name": "image_size",
						"in": "query",
						"description": "The photo size to be returned. It has to be an integer: 1 to 4.",
						"type": "string"
					},
					{
						"name": "license_type -- Restrict the results to one or more license types.  Multiple types can be separated with a comma: license_type=1,4.",
						"in": "query",
						"description": "",
						"type": "string"
					},
					{
						"name": "only",
						"in": "query",
						"description": "String name of the category to return photos from. Note: Multiple categories may be given, separated by commas, e.g. Fashion,Black and White",
						"type": "string"
					},
					{
						"name": "page",
						"in": "query",
						"description": "Return a specific page. Page numbering is 1-based.",
						"type": "string"
					},
					{
						"name": "rating",
						"in": "query",
						"description": "Sort by current rating, highest rated first.",
						"type": "string"
					},
					{
						"name": "rpp",
						"in": "query",
						"description": "The number of results to return. Can not be over 100, default 20.",
						"type": "string"
					},
					{
						"name": "sort u2014u00a0Sort photos in the specified order. The following values are recognized:nnnn_score",
						"in": "query",
						"description": "Sort by query score, best match first.",
						"type": "string"
					},
					{
						"name": "tag",
						"in": "query",
						"description": "A complete tag string to search for.",
						"type": "string"
					},
					{
						"name": "tags",
						"in": "query",
						"description": "Returns an array of tags for each photo.",
						"type": "string"
					},
					{
						"name": "taken_at u2014u00a0Sort by the original date of the image extracted from metadata, most recent first (might not be available for all images).",
						"in": "query",
						"description": "",
						"type": "string"
					},
					{
						"name": "term",
						"in": "query",
						"description": "A keyword to search for.",
						"type": "string"
					},
					{
						"name": "times_viewed u2014u00a0Sort by the number of views, most viewed first.",
						"in": "query",
						"description": "",
						"type": "string"
					},
					{
						"name": "votes_count u2013 Sort by the number of votes, most voted on first.",
						"in": "query",
						"description": "",
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [
					""
				]
			}
		},
		"/photos/upload": {
			"post": {
				"summary": "This is a new photo upload endpoint. It is currently in beta.nCreate a new photo on behalf of the user and upload a file.nfile parameter is passed in multipart/form-data, other parameters are passed as query parametrs or multipart/form-data.",
				"description": "This is a new photo upload endpoint. It is currently in beta.nCreate a new photo on behalf of the user and upload a file.nfile parameter is passed in multipart/form-data, other parameters are passed as query parametrs or multipart/form-data.",
				"operationId": "this-is-a-new-photo-upload-endpoint-it-is-currently-in-betacreate-a-new-photo-on-behalf-of-the-user-",
				"parameters": [
					{
						"name": "aperture",
						"in": "query",
						"description": "Aperture value",
						"type": "string"
					},
					{
						"name": "camera",
						"in": "query",
						"description": "Make and model of the camera. Note: Please make sure it contains sensible information (eg., does not contain cameras make or model twice)",
						"type": "string"
					},
					{
						"name": "category",
						"in": "query",
						"description": "A numerical ID for the Category of the photo",
						"type": "string"
					},
					{
						"name": "description",
						"in": "query",
						"description": "Description for the photo",
						"type": "string"
					},
					{
						"name": "file (required)  - Photo filename in JPG/JPEG, passed along with multipart/form-data.",
						"in": "query",
						"description": "",
						"type": "string"
					},
					{
						"name": "focal_length",
						"in": "query",
						"description": "Focal length in millimetres, a string representing an integer value",
						"type": "string"
					},
					{
						"name": "iso",
						"in": "query",
						"description": "ISO value",
						"type": "string"
					},
					{
						"name": "latitude",
						"in": "query",
						"description": "Latitude, in decimal format",
						"type": "string"
					},
					{
						"name": "lens",
						"in": "query",
						"description": "Lens used to make this photo",
						"type": "string"
					},
					{
						"name": "longitude",
						"in": "query",
						"description": "Longitude, in decimal format",
						"type": "string"
					},
					{
						"name": "name",
						"in": "query",
						"description": "Title of the photo",
						"type": "string"
					},
					{
						"name": "privacy",
						"in": "query",
						"description": "Whether to hide the photo from the user profile on the website. Otherwise, the photo is only available for use in Collections/Portfolio. Recognized values: 1, 0.",
						"type": "string"
					},
					{
						"name": "shutter_speed",
						"in": "query",
						"description": "Shutter speed in seconds, represented by string containing a rational expression if the value is 1sec.",
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [
					""
				]
			}
		},
		"/upload": {
			"post": {
				"summary": "Allows an application to upload the photo file.nnNote that this endpoint is at the upload.500px.com domain, not the api.500px.com domain.",
				"description": "Allows an application to upload the photo file.nnNote that this endpoint is at the upload.500px.com domain, not the api.500px.com domain.",
				"operationId": "allows-an-application-to-upload-the-photo-filenote-that-this-endpoint-is-at-the-upload500pxcom-domai",
				"parameters": [
					{
						"name": "file",
						"in": "query",
						"description": "The multipart HTTP upload. This is expected to be of the same format as when a file is being sent from an HTML file form.",
						"type": "string"
					},
					{
						"name": "photo_id",
						"in": "query",
						"description": "The ID of the photo the file is being uploaded for. The ID should be known to the client from the POST photos request result.",
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [
					""
				]
			}
		},
		"/users": {
			"get": {
				"summary": "Returns the profile information for the current user.",
				"description": "Returns the profile information for the current user.",
				"operationId": "returns-the-profile-information-for-the-current-user",
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [
					""
				]
			}
		},
		"/users/:id/followers": {
			"get": {
				"summary": "Returns a list of users who follow the specified user.",
				"description": "Returns a list of users who follow the specified user.",
				"operationId": "returns-a-list-of-users-who-follow-the-specified-user",
				"parameters": [
					{
						"name": "id (required)",
						"in": "query",
						"description": "ID of the user.",
						"type": "string"
					},
					{
						"name": "page",
						"in": "query",
						"description": "Return the specified page of the resource. Page numbering is 1-based.",
						"type": "string"
					},
					{
						"name": "rpp",
						"in": "query",
						"description": "Results Per Page, default 20, max 100.",
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [
					""
				]
			}
		},
		"/users/:id/friends": {
			"post": {
				"summary": "Add the user to the list of followers.",
				"description": "Add the user to the list of followers.",
				"operationId": "add-the-user-to-the-list-of-followers",
				"parameters": [
					{
						"name": "id (required)",
						"in": "query",
						"description": "ID of the User to add to the followers list.",
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [
					""
				]
			}
		},
		"/users/search": {
			"get": {
				"summary": "Return listing of ten (up to one hundred) users from search results for a specified search term.",
				"description": "Return listing of ten (up to one hundred) users from search results for a specified search term.",
				"operationId": "return-listing-of-ten-up-to-one-hundred-users-from-search-results-for-a-specified-search-term",
				"parameters": [
					{
						"name": "term (required)",
						"in": "query",
						"description": "A keyword to search for.",
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [
					""
				]
			}
		},
		"/users/show": {
			"get": {
				"summary": "Returns the profile information for a specified user.",
				"description": "Returns the profile information for a specified user.",
				"operationId": "returns-the-profile-information-for-a-specified-user",
				"parameters": [
					{
						"name": "email",
						"in": "query",
						"description": "Return information for the user with the specified email address.",
						"type": "string"
					},
					{
						"name": "id",
						"in": "query",
						"description": "Return information for the specified user ID.",
						"type": "string"
					},
					{
						"name": "username",
						"in": "query",
						"description": "Return information for the user with the specified username.",
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [
					""
				]
			}
		}
	}
}