{
	"swagger": "2.0",
	"info": {
		"title": "FilePicker",
		"description": "A simple, file storage API.",
		"termsOfService": "https://www.filepicker.io/termsofservice/",
		"version": "v1"
	},
	"host": "www.filepicker.io/api/",
	"basePath": "/api",
	"schemes": [
		"http"
	],
	"produces": [
		"application/json"
	],
	"consumes": [
		"application/json"
	],
	"paths": {
		"/file/{file}": {
			"post": {
				"summary": "Writing back to a file",
				"description": "If the user edits an uploaded file in your application, you can save directly back and overwrite the original file via a POST request on the url provided. ",
				"operationId": "",
				"parameters": [
					{
						"name": "file",
						"in": "path",
						"description": "The unique file id.",
						"type": "string",
						"format": "string"
					},
					{
						"name": "filename",
						"in": "query",
						"description": "The name of the file",
						"type": "string",
						"format": "string"
					},
					{
						"name": "key",
						"in": "query",
						"description": "The API Key.",
						"type": "string",
						"format": "string"
					},
					{
						"name": "url",
						"in": "query",
						"description": "Update url of the file.",
						"type": "string",
						"format": "string"
					}
				],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [
					"Writing"
				]
			}
		},
		"/file/{file}/metadata": {
			"get": {
				"summary": "Get File Metadata",
				"description": "Get the meta data of a file.",
				"operationId": "",
				"parameters": [
					{
						"name": "container",
						"in": "query",
						"description": "Specify that you want to know the storage container of a stored file, if available, as a string",
						"type": "string",
						"format": "string"
					},
					{
						"name": "file",
						"in": "path",
						"description": "unique id of the file",
						"type": "string",
						"format": "string"
					},
					{
						"name": "Filename",
						"in": "query",
						"description": "Specify that you want the name of the file returned, as a string.",
						"type": "string",
						"format": "string"
					},
					{
						"name": "height",
						"in": "query",
						"description": "Specify that you want the height of the image returned, as a number in pixels. If the file is not an image, height is set to null.",
						"type": "string",
						"format": "string"
					},
					{
						"name": "key",
						"in": "query",
						"description": "The API Key.",
						"type": "string",
						"format": "string"
					},
					{
						"name": "location",
						"in": "query",
						"description": "Specify that you want to know the storage location (S3, etc.) of a stored file, if available, as a string",
						"type": "string",
						"format": "string"
					},
					{
						"name": "md5",
						"in": "query",
						"description": "Specify that you want to know the md5 hash of the file returned, as a string",
						"type": "string",
						"format": "string"
					},
					{
						"name": "path",
						"in": "query",
						"description": "Specify that you want to know the storage path of a stored file, if available, as a string",
						"type": "string",
						"format": "string"
					},
					{
						"name": "size",
						"in": "query",
						"description": "Specify that you want the size of the file returned, as a number in bytes.",
						"type": "string",
						"format": "string"
					},
					{
						"name": "uploaded",
						"in": "query",
						"description": "Specify that you want the timestamp of when the file was uploaded to Filepicker, as a javascript Date object",
						"type": "string",
						"format": "string"
					},
					{
						"name": "Width",
						"in": "query",
						"description": "Specify that you want the width of the image returned, as a number in pixels. If the file is not an image, width is set to null.",
						"type": "string",
						"format": "string"
					},
					{
						"name": "writeable",
						"in": "query",
						"description": "Specify that you want whether the file is writeable, as a boolean",
						"type": "string",
						"format": "string"
					}
				],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [
					"File"
				]
			}
		},
		"/store/S3": {
			"post": {
				"summary": "Storing a file",
				"description": "Similar to the filepicker.store call in javascript, you can use the Filepicker.io files library to send files directly to your S3 bucket and get back a Blob for further operations. ",
				"operationId": "",
				"parameters": [
					{
						"name": "access",
						"in": "query",
						"description": "Indicates that the file should be stored in a way that allows public access going directly to the underlying file store. For instance, if the file is stored on S3, this will allow the S3 url to be used directly. This has no impact on the ability of users to read from the Filepicker.io file URL. Defaults to private.",
						"type": "string",
						"format": "string"
					},
					{
						"name": "base64decode",
						"in": "query",
						"description": "Specify that you want the data to be first decoded from base64 before being written to the file. For example, if you have base64 encoded image data, you can use this flag to first decode the data before writing the image file.",
						"type": "string",
						"format": "string"
					},
					{
						"name": "Container",
						"in": "query",
						"description": "The bucket or container in the specified file store where the file should end up. This is especially useful if you have different containers for testing and production and you want to use them both on the same filepicker.io app. If this parameter is omitted, the file is stored in the default container specified in your developer portal.",
						"type": "string",
						"format": "string"
					},
					{
						"name": "Filename",
						"in": "query",
						"description": "The name of the file as it will be stored. If this isnt provided, we do the best we can to come up with one.",
						"type": "string",
						"format": "string"
					},
					{
						"name": "key",
						"in": "query",
						"description": "The API Key.",
						"type": "string",
						"format": "string"
					},
					{
						"name": "Mimetype",
						"in": "query",
						"description": "The type of the file as it will be stored. If this isnt provided, we do the best we can, defaulting to text/plain if you give us raw data.",
						"type": "string",
						"format": "string"
					},
					{
						"name": "Path",
						"in": "query",
						"description": "The path to store the file at within the specified file store. For S3, this is the key where the file will be stored at. By default, Filepicker.io stores the file at the root at a unique id, followed by an underscore, followed by the filename, for example 3AB239102DB_myphoto.png.",
						"type": "string",
						"format": "string"
					},
					{
						"name": "policy",
						"in": "query",
						"description": "If you have security enabled, youll need to have a valid Filepicker.io policy and signature in order to perform the requested call. This allows you to select who can and cannot perform certain actions on your site. Read more about security and how to generate policies and signatures",
						"type": "string",
						"format": "string"
					}
				],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [
					"Store"
				]
			}
		},
		"file/{file}": {
			"delete": {
				"summary": "Remove File",
				"description": "For developers who deal with sensitive data, we offer the ability to remove access to file, which wipes all trace of the file from our servers and deletes it out of temporary storage.",
				"operationId": "",
				"parameters": [
					{
						"name": "file",
						"in": "path",
						"description": "The unique file id.",
						"type": "string",
						"format": "string"
					},
					{
						"name": "key",
						"in": "query",
						"description": "The API Key.",
						"type": "string",
						"format": "string"
					}
				],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [
					"File"
				]
			}
		},
		"file/{file}/convert": {
			"get": {
				"summary": "File Conversion",
				"description": "To convert an image, take the Filepicker.io file url and append /convert, along with query parameters specifying what you want to change.",
				"operationId": "",
				"parameters": [
					{
						"name": "align",
						"in": "query",
						"description": "Using align, you can choose how to crop. By default, it crops from the center. You can also specify pairs e.g. top,left.  top bottom left right faces",
						"type": "string",
						"format": "string"
					},
					{
						"name": "compress",
						"in": "query",
						"description": "For jpeg or png files, specifies whether image should be compressed. Possible values: true or false.",
						"type": "string",
						"format": "string"
					},
					{
						"name": "crop",
						"in": "query",
						"description": "Crops the image to a specified rectangle. The input to this parameter should be 4 numbers for x,y,width,height - for example, crop=10,20,200,250 would select the 200x250 pixel rectangle starting from 10 pixels from the left edge and 20 pixels from the top edge of the image.",
						"type": "string",
						"format": "string"
					},
					{
						"name": "file",
						"in": "path",
						"description": "The unique file id.",
						"type": "string",
						"format": "string"
					},
					{
						"name": "filter",
						"in": "query",
						"description": "Specifies which filter to use. Available filters are:  blur Blurs the image. You can additionally specify a blurAmount parameter. As you increase blurAmount, the image becomes more blurry. Defautl value is 2. sharpen Sharpens the image. You can additionally specify a sharpenAmount parameter. As you increase the sharpenAmount, sharpening becomes more obvious. Defautl value is 2.",
						"type": "string",
						"format": "string"
					},
					{
						"name": "fit",
						"in": "query",
						"description": "Specifies how to resize the image. Possible values are:  clip Resizes the image to fit within the specified parameters without distorting, cropping, or changing the aspect ratio crop Resizes the image to fit the specified parameters exactly by removing any parts of the image that dont fit within the boundaries scale Resizes the image to fit the specified parameters exactly by scaling the image to the desired size max Resizes the image to fit within the parameters, but as opposed to clip will ",
						"type": "string",
						"format": "string"
					},
					{
						"name": "format",
						"in": "query",
						"description": "Specifies what format the image should be converted to, if any. Possible values are jpg and png. For jpg conversions, you can additionally specify a quality parameter.",
						"type": "string",
						"format": "string"
					},
					{
						"name": "h",
						"in": "query",
						"description": "Resize the image to this height.",
						"type": "string",
						"format": "string"
					},
					{
						"name": "key",
						"in": "query",
						"description": "The API Key.",
						"type": "string",
						"format": "string"
					},
					{
						"name": "quality",
						"in": "query",
						"description": "For jpeg conversion, specifies the quality of the resultant image. Quality should be an integer between 1 and 100",
						"type": "string",
						"format": "string"
					},
					{
						"name": "rotate",
						"in": "query",
						"description": "Rotate the image. Default is no rotation. rotate=exif will rotate the image automatically based on the exif data in the image. Other valid values are integers between 0 and 359, for degrees of rotation.",
						"type": "string",
						"format": "string"
					},
					{
						"name": "w",
						"in": "query",
						"description": "Resize the image to this width.",
						"type": "string",
						"format": "string"
					},
					{
						"name": "watermark",
						"in": "query",
						"description": "Adds the specified absolute url as a watermark on the image.",
						"type": "string",
						"format": "string"
					},
					{
						"name": "waterposition",
						"in": "query",
						"description": "Where to put the watermark relative to the base image. Possible values for vertical position are top,middle,bottom and left,center,right, for horizontal position. The two can be combined by separating vertical and horizontal with a comma. The default behavior is bottom,right",
						"type": "string",
						"format": "string"
					},
					{
						"name": "watersize",
						"in": "query",
						"description": "This size of the watermark, as a percentage of the base image (not the original watermark).",
						"type": "string",
						"format": "string"
					}
				],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [
					"File"
				]
			}
		}
	}
}