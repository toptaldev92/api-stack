{
	"swagger": "2.0",
	"info": {
		"title": "Dropbox for Business API",
		"description": "The business version of the Dropbox API.",
		"termsOfService": null,
		"version": "1"
	},
	"host": "api.dropbox.com",
	"basePath": "/1/team",
	"schemes": [
		"http"
	],
	"produces": [
		"application/json"
	],
	"consumes": [
		"application/json"
	],
	"paths": {
		"/chunked_upload": {
			"put": {
				"summary": "/chunked_upload",
				"description": "/chunked_upload",
				"operationId": "chunked-upload",
				"parameters": [
					{
						"name": "offset",
						"in": "query",
						"description": "The byte offset of this chunk, relative to the beginning of the full file. The server will verify that this matches the offset it expects. If it does not, the server will return an error with the expected offset.",
						"type": "string"
					},
					{
						"name": "upload_id",
						"in": "query",
						"description": "The unique ID of the in-progress upload on the server. If left blank, the server will create a new upload session.",
						"type": "string"
					}
				],
				"responses": {
					"": {
						"description": ""
					},
					"400": {
						"description": "Bad input parameter. Error message should indicate which one and why."
					},
					"401": {
						"description": "Bad or expired token. This can happen if the user or Dropbox revoked or expired an access token. To fix, you should re-authenticate the user."
					},
					"403": {
						"description": "Bad OAuth request (wrong consumer key, bad nonce, expired timestamp...). Unfortunately, re-authenticating the user won't help here."
					},
					"404": {
						"description": "File or folder not found at the specified path."
					},
					"405": {
						"description": "Request method not expected (generally should be GET or POST)."
					},
					"429": {
						"description": "Your app is making too many requests and is being rate limited. 429s can trigger on a per-app or per-user basis."
					},
					"503": {
						"description": "If the response includes the Retry-After header, this means your OAuth 1.0 app is being rate limited. Otherwise, this indicates a transient server error, and your app should retry its request."
					},
					"507": {
						"description": "User is over Dropbox storage quota."
					},
					"5xx": {
						"description": "Server error. Check DropboxOps."
					}
				},
				"tags": [
					""
				]
			}
		},
		"/delta/latest_cursor": {
			"post": {
				"summary": "/delta/latest_cursor",
				"description": "/delta/latest_cursor",
				"operationId": "deltalatest-cursor",
				"parameters": [
					{
						"name": "include_media_info",
						"in": "query",
						"description": "If true, the returned cursor will be encoded with include_media_info set to true for use with /delta.",
						"type": "string"
					},
					{
						"name": "path_prefix",
						"in": "query",
						"description": "If present, the returned cursor will be encoded with a path_prefix for the specified path for use with /delta.",
						"type": "string"
					}
				],
				"responses": {
					"": {
						"description": ""
					},
					"400": {
						"description": "Bad input parameter. Error message should indicate which one and why."
					},
					"401": {
						"description": "Bad or expired token. This can happen if the user or Dropbox revoked or expired an access token. To fix, you should re-authenticate the user."
					},
					"403": {
						"description": "Bad OAuth request (wrong consumer key, bad nonce, expired timestamp...). Unfortunately, re-authenticating the user won't help here."
					},
					"404": {
						"description": "File or folder not found at the specified path."
					},
					"405": {
						"description": "Request method not expected (generally should be GET or POST)."
					},
					"429": {
						"description": "Your app is making too many requests and is being rate limited. 429s can trigger on a per-app or per-user basis."
					},
					"503": {
						"description": "If the response includes the Retry-After header, this means your OAuth 1.0 app is being rate limited. Otherwise, this indicates a transient server error, and your app should retry its request."
					},
					"507": {
						"description": "User is over Dropbox storage quota."
					},
					"5xx": {
						"description": "Server error. Check DropboxOps."
					}
				},
				"tags": [
					""
				]
			}
		},
		"/disable_access_token": {
			"post": {
				"summary": "/disable_access_token",
				"description": "/disable_access_token",
				"operationId": "disable-access-token",
				"responses": {
					"": {
						"description": ""
					},
					"400": {
						"description": "Bad input parameter. Error message should indicate which one and why."
					},
					"401": {
						"description": "Bad or expired token. This can happen if the user or Dropbox revoked or expired an access token. To fix, you should re-authenticate the user."
					},
					"403": {
						"description": "Bad OAuth request (wrong consumer key, bad nonce, expired timestamp...). Unfortunately, re-authenticating the user won't help here."
					},
					"404": {
						"description": "File or folder not found at the specified path."
					},
					"405": {
						"description": "Request method not expected (generally should be GET or POST)."
					},
					"429": {
						"description": "Your app is making too many requests and is being rate limited. 429s can trigger on a per-app or per-user basis."
					},
					"503": {
						"description": "If the response includes the Retry-After header, this means your OAuth 1.0 app is being rate limited. Otherwise, this indicates a transient server error, and your app should retry its request."
					},
					"507": {
						"description": "User is over Dropbox storage quota."
					},
					"5xx": {
						"description": "Server error. Check DropboxOps."
					}
				},
				"tags": [
					""
				]
			}
		},
		"/fileops/create_folder": {
			"post": {
				"summary": "/fileops/create_folder",
				"description": "/fileops/create_folder",
				"operationId": "fileopscreate-folder",
				"parameters": [
					{
						"name": "locale",
						"in": "query",
						"description": "The metadata returned will have its size field translated based on the given locale. For more information see above.",
						"type": "string"
					},
					{
						"name": "path",
						"in": "query",
						"description": "The path to the new folder to create relative to root.",
						"type": "string"
					},
					{
						"name": "root",
						"in": "query",
						"description": "The root relative to which path is specified. Valid values are auto (recommended), sandbox, and dropbox.",
						"type": "string"
					}
				],
				"responses": {
					"": {
						"description": ""
					},
					"400": {
						"description": "Bad input parameter. Error message should indicate which one and why."
					},
					"401": {
						"description": "Bad or expired token. This can happen if the user or Dropbox revoked or expired an access token. To fix, you should re-authenticate the user."
					},
					"403": {
						"description": "Bad OAuth request (wrong consumer key, bad nonce, expired timestamp...). Unfortunately, re-authenticating the user won't help here."
					},
					"404": {
						"description": "File or folder not found at the specified path."
					},
					"405": {
						"description": "Request method not expected (generally should be GET or POST)."
					},
					"429": {
						"description": "Your app is making too many requests and is being rate limited. 429s can trigger on a per-app or per-user basis."
					},
					"503": {
						"description": "If the response includes the Retry-After header, this means your OAuth 1.0 app is being rate limited. Otherwise, this indicates a transient server error, and your app should retry its request."
					},
					"507": {
						"description": "User is over Dropbox storage quota."
					},
					"5xx": {
						"description": "Server error. Check DropboxOps."
					}
				},
				"tags": [
					""
				]
			}
		},
		"/files (GET)": {
			"get": {
				"summary": "/files (GET)",
				"description": "/files (GET)",
				"operationId": "files-get",
				"parameters": [
					{
						"name": "path",
						"in": "query",
						"description": "The path to the file you want to retrieve.",
						"type": "string"
					},
					{
						"name": "rev",
						"in": "query",
						"description": "The revision of the file to retrieve. This defaults to the most recent revision.",
						"type": "string"
					}
				],
				"responses": {
					"": {
						"description": ""
					},
					"400": {
						"description": "Bad input parameter. Error message should indicate which one and why."
					},
					"401": {
						"description": "Bad or expired token. This can happen if the user or Dropbox revoked or expired an access token. To fix, you should re-authenticate the user."
					},
					"403": {
						"description": "Bad OAuth request (wrong consumer key, bad nonce, expired timestamp...). Unfortunately, re-authenticating the user won't help here."
					},
					"404": {
						"description": "File or folder not found at the specified path."
					},
					"405": {
						"description": "Request method not expected (generally should be GET or POST)."
					},
					"429": {
						"description": "Your app is making too many requests and is being rate limited. 429s can trigger on a per-app or per-user basis."
					},
					"503": {
						"description": "If the response includes the Retry-After header, this means your OAuth 1.0 app is being rate limited. Otherwise, this indicates a transient server error, and your app should retry its request."
					},
					"507": {
						"description": "User is over Dropbox storage quota."
					},
					"5xx": {
						"description": "Server error. Check DropboxOps."
					}
				},
				"tags": [
					""
				]
			}
		},
		"/media": {
			"post": {
				"summary": "/media",
				"description": "/media",
				"operationId": "media",
				"parameters": [
					{
						"name": "locale",
						"in": "query",
						"description": "Use to specify language settings for user error messages and other language specific text. See the notes above for more information about supported locales.",
						"type": "string"
					}
				],
				"responses": {
					"": {
						"description": ""
					},
					"400": {
						"description": "Bad input parameter. Error message should indicate which one and why."
					},
					"401": {
						"description": "Bad or expired token. This can happen if the user or Dropbox revoked or expired an access token. To fix, you should re-authenticate the user."
					},
					"403": {
						"description": "Bad OAuth request (wrong consumer key, bad nonce, expired timestamp...). Unfortunately, re-authenticating the user won't help here."
					},
					"404": {
						"description": "File or folder not found at the specified path."
					},
					"405": {
						"description": "Request method not expected (generally should be GET or POST)."
					},
					"429": {
						"description": "Your app is making too many requests and is being rate limited. 429s can trigger on a per-app or per-user basis."
					},
					"503": {
						"description": "If the response includes the Retry-After header, this means your OAuth 1.0 app is being rate limited. Otherwise, this indicates a transient server error, and your app should retry its request."
					},
					"507": {
						"description": "User is over Dropbox storage quota."
					},
					"5xx": {
						"description": "Server error. Check DropboxOps."
					}
				},
				"tags": [
					""
				]
			}
		},
		"/metadata": {
			"get": {
				"summary": "/metadata",
				"description": "/metadata",
				"operationId": "metadata",
				"parameters": [
					{
						"name": "file_limit",
						"in": "query",
						"description": "Default is 10,000 (max is 25,000). When listing a folder, the service wont report listings containing more than the specified amount of files and will instead respond with a 406 (Not Acceptable) status response.",
						"type": "string"
					},
					{
						"name": "hash",
						"in": "query",
						"description": "Each call to /metadata on a folder will return a hash field, generated by hashing all of the metadata contained in that response. On later calls to /metadata, you should provide that value via this parameter so that if nothing has changed, the response will be a 304 (Not Modified) status code instead of the full, potentially very large, folder listing. This parameter is ignored if the specified path is associated with a file or if list=false.",
						"type": "string"
					},
					{
						"name": "include_deleted",
						"in": "query",
						"description": "Only applicable when list is set. If this parameter is set to true, then contents will include the metadata of deleted children. Note that the target of the metadata call is always returned even when it has been deleted (with is_deleted set to true) regardless of this flag.",
						"type": "string"
					},
					{
						"name": "include_media_info",
						"in": "query",
						"description": "If true, each file will include a photo_info dictionary for photos and a video_info dictionary for videos with additional media info. If the data isnt available yet, the string pending will be returned instead of a dictionary.",
						"type": "string"
					},
					{
						"name": "include_membership",
						"in": "query",
						"description": "If true, metadata for a shared folder will include a list of the members of the shared folder.Heads up: The include_membership parameter is part of the Shared Folder extensions in production beta. Please complete this form for access.",
						"type": "string"
					},
					{
						"name": "list",
						"in": "query",
						"description": "The strings true and false are valid values. true is the default. If true, the folders metadata will include a contents field with a list of metadata entries for the contents of the folder. If false, the contents field will be omitted.",
						"type": "string"
					},
					{
						"name": "locale",
						"in": "query",
						"description": "The metadata returned will have its size field translated based on the given locale. For more information see above.",
						"type": "string"
					},
					{
						"name": "rev",
						"in": "query",
						"description": "If you include a particular revision number, then only the metadata for that revision will be returned.",
						"type": "string"
					}
				],
				"responses": {
					"": {
						"description": ""
					},
					"400": {
						"description": "Bad input parameter. Error message should indicate which one and why."
					},
					"401": {
						"description": "Bad or expired token. This can happen if the user or Dropbox revoked or expired an access token. To fix, you should re-authenticate the user."
					},
					"403": {
						"description": "Bad OAuth request (wrong consumer key, bad nonce, expired timestamp...). Unfortunately, re-authenticating the user won't help here."
					},
					"404": {
						"description": "File or folder not found at the specified path."
					},
					"405": {
						"description": "Request method not expected (generally should be GET or POST)."
					},
					"429": {
						"description": "Your app is making too many requests and is being rate limited. 429s can trigger on a per-app or per-user basis."
					},
					"503": {
						"description": "If the response includes the Retry-After header, this means your OAuth 1.0 app is being rate limited. Otherwise, this indicates a transient server error, and your app should retry its request."
					},
					"507": {
						"description": "User is over Dropbox storage quota."
					},
					"5xx": {
						"description": "Server error. Check DropboxOps."
					}
				},
				"tags": [
					""
				]
			}
		},
		"/oauth/access_token": {
			"post": {
				"summary": "/oauth/access_token",
				"description": "/oauth/access_token",
				"operationId": "oauthaccess-token",
				"responses": {
					"": {
						"description": ""
					},
					"400": {
						"description": "Bad input parameter. Error message should indicate which one and why."
					},
					"401": {
						"description": "Bad or expired token. This can happen if the user or Dropbox revoked or expired an access token. To fix, you should re-authenticate the user."
					},
					"403": {
						"description": "Bad OAuth request (wrong consumer key, bad nonce, expired timestamp...). Unfortunately, re-authenticating the user won't help here."
					},
					"404": {
						"description": "File or folder not found at the specified path."
					},
					"405": {
						"description": "Request method not expected (generally should be GET or POST)."
					},
					"429": {
						"description": "Your app is making too many requests and is being rate limited. 429s can trigger on a per-app or per-user basis."
					},
					"503": {
						"description": "If the response includes the Retry-After header, this means your OAuth 1.0 app is being rate limited. Otherwise, this indicates a transient server error, and your app should retry its request."
					},
					"507": {
						"description": "User is over Dropbox storage quota."
					},
					"5xx": {
						"description": "Server error. Check DropboxOps."
					}
				},
				"tags": [
					""
				]
			}
		},
		"/oauth/request_token": {
			"post": {
				"summary": "/oauth/request_token",
				"description": "/oauth/request_token",
				"operationId": "oauthrequest-token",
				"responses": {
					"": {
						"description": ""
					},
					"400": {
						"description": "Bad input parameter. Error message should indicate which one and why."
					},
					"401": {
						"description": "Bad or expired token. This can happen if the user or Dropbox revoked or expired an access token. To fix, you should re-authenticate the user."
					},
					"403": {
						"description": "Bad OAuth request (wrong consumer key, bad nonce, expired timestamp...). Unfortunately, re-authenticating the user won't help here."
					},
					"404": {
						"description": "File or folder not found at the specified path."
					},
					"405": {
						"description": "Request method not expected (generally should be GET or POST)."
					},
					"429": {
						"description": "Your app is making too many requests and is being rate limited. 429s can trigger on a per-app or per-user basis."
					},
					"503": {
						"description": "If the response includes the Retry-After header, this means your OAuth 1.0 app is being rate limited. Otherwise, this indicates a transient server error, and your app should retry its request."
					},
					"507": {
						"description": "User is over Dropbox storage quota."
					},
					"5xx": {
						"description": "Server error. Check DropboxOps."
					}
				},
				"tags": [
					""
				]
			}
		},
		"/oauth2/token": {
			"post": {
				"summary": "/oauth2/token",
				"description": "/oauth2/token",
				"operationId": "oauth2token",
				"parameters": [
					{
						"name": "client_id",
						"in": "query",
						"description": "If credentials are passed in POST parameters, this parameter should be present and should be the apps key (found in the App Console).",
						"type": "string"
					},
					{
						"name": "client_secret",
						"in": "query",
						"description": "If credentials are passed in POST parameters, this parameter should be present and should be the apps secret.",
						"type": "string"
					},
					{
						"name": "code",
						"in": "query",
						"description": "The code acquired by directing users to /oauth2/authorize?response_type=code.",
						"type": "string"
					},
					{
						"name": "grant_type",
						"in": "query",
						"description": "The grant type, which must be authorization_code.",
						"type": "string"
					},
					{
						"name": "redirect_uri",
						"in": "query",
						"description": "Only used to validate that it matches the original /oauth2/authorize, not used to redirect again.",
						"type": "string"
					}
				],
				"responses": {
					"": {
						"description": ""
					},
					"400": {
						"description": "Bad input parameter. Error message should indicate which one and why."
					},
					"401": {
						"description": "Bad or expired token. This can happen if the user or Dropbox revoked or expired an access token. To fix, you should re-authenticate the user."
					},
					"403": {
						"description": "Bad OAuth request (wrong consumer key, bad nonce, expired timestamp...). Unfortunately, re-authenticating the user won't help here."
					},
					"404": {
						"description": "File or folder not found at the specified path."
					},
					"405": {
						"description": "Request method not expected (generally should be GET or POST)."
					},
					"429": {
						"description": "Your app is making too many requests and is being rate limited. 429s can trigger on a per-app or per-user basis."
					},
					"503": {
						"description": "If the response includes the Retry-After header, this means your OAuth 1.0 app is being rate limited. Otherwise, this indicates a transient server error, and your app should retry its request."
					},
					"507": {
						"description": "User is over Dropbox storage quota."
					},
					"5xx": {
						"description": "Server error. Check DropboxOps."
					}
				},
				"tags": [
					""
				]
			}
		},
		"/revisions": {
			"get": {
				"summary": "/revisions",
				"description": "/revisions",
				"operationId": "revisions",
				"parameters": [
					{
						"name": "locale",
						"in": "query",
						"description": "The metadata returned will have its size field translated based on the given locale. For more information see above.",
						"type": "string"
					},
					{
						"name": "rev_limit",
						"in": "query",
						"description": "Default is 10. Max is 1,000. Up to this number of recent revisions will be returned.",
						"type": "string"
					}
				],
				"responses": {
					"": {
						"description": ""
					},
					"400": {
						"description": "Bad input parameter. Error message should indicate which one and why."
					},
					"401": {
						"description": "Bad or expired token. This can happen if the user or Dropbox revoked or expired an access token. To fix, you should re-authenticate the user."
					},
					"403": {
						"description": "Bad OAuth request (wrong consumer key, bad nonce, expired timestamp...). Unfortunately, re-authenticating the user won't help here."
					},
					"404": {
						"description": "File or folder not found at the specified path."
					},
					"405": {
						"description": "Request method not expected (generally should be GET or POST)."
					},
					"429": {
						"description": "Your app is making too many requests and is being rate limited. 429s can trigger on a per-app or per-user basis."
					},
					"503": {
						"description": "If the response includes the Retry-After header, this means your OAuth 1.0 app is being rate limited. Otherwise, this indicates a transient server error, and your app should retry its request."
					},
					"507": {
						"description": "User is over Dropbox storage quota."
					},
					"5xx": {
						"description": "Server error. Check DropboxOps."
					}
				},
				"tags": [
					""
				]
			}
		},
		"/search": {
			"/searchpythonjavarubyphpdescriptionreturns me": {
				"summary": "/search",
				"description": "/search",
				"operationId": "search",
				"parameters": [
					{
						"name": "file_limit",
						"in": "query",
						"description": "The maximum and default value is 1,000. No more than file_limit search results will be returned.",
						"type": "string"
					},
					{
						"name": "include_deleted",
						"in": "query",
						"description": "If this parameter is set to true, then files and folders that have been deleted will also be included in the search.",
						"type": "string"
					},
					{
						"name": "include_membership",
						"in": "query",
						"description": "If true, metadata for a shared folder will include a list of the members of the shared folder.Heads up: The include_membership is in production beta. Please complete this form for access.",
						"type": "string"
					},
					{
						"name": "locale",
						"in": "query",
						"description": "The metadata returned will have its size field translated based on the given locale. For more information see above.",
						"type": "string"
					},
					{
						"name": "query",
						"in": "query",
						"description": "The search string. This string is split (on spaces) into individual words. Files and folders will be returned if they contain all words in the search string.",
						"type": "string"
					}
				],
				"responses": {
					"": {
						"description": ""
					},
					"400": {
						"description": "Bad input parameter. Error message should indicate which one and why."
					},
					"401": {
						"description": "Bad or expired token. This can happen if the user or Dropbox revoked or expired an access token. To fix, you should re-authenticate the user."
					},
					"403": {
						"description": "Bad OAuth request (wrong consumer key, bad nonce, expired timestamp...). Unfortunately, re-authenticating the user won't help here."
					},
					"404": {
						"description": "File or folder not found at the specified path."
					},
					"405": {
						"description": "Request method not expected (generally should be GET or POST)."
					},
					"429": {
						"description": "Your app is making too many requests and is being rate limited. 429s can trigger on a per-app or per-user basis."
					},
					"503": {
						"description": "If the response includes the Retry-After header, this means your OAuth 1.0 app is being rate limited. Otherwise, this indicates a transient server error, and your app should retry its request."
					},
					"507": {
						"description": "User is over Dropbox storage quota."
					},
					"5xx": {
						"description": "Server error. Check DropboxOps."
					}
				},
				"tags": [
					""
				]
			}
		},
		"/shared_folders": {
			"get": {
				"summary": "/shared_folders",
				"description": "/shared_folders",
				"operationId": "shared-folders",
				"parameters": [
					{
						"name": "id",
						"in": "query",
						"description": "The ID of a specific shared folder.",
						"type": "string"
					}
				],
				"responses": {
					"": {
						"description": ""
					},
					"400": {
						"description": "Bad input parameter. Error message should indicate which one and why."
					},
					"401": {
						"description": "Bad or expired token. This can happen if the user or Dropbox revoked or expired an access token. To fix, you should re-authenticate the user."
					},
					"403": {
						"description": "Bad OAuth request (wrong consumer key, bad nonce, expired timestamp...). Unfortunately, re-authenticating the user won't help here."
					},
					"404": {
						"description": "File or folder not found at the specified path."
					},
					"405": {
						"description": "Request method not expected (generally should be GET or POST)."
					},
					"429": {
						"description": "Your app is making too many requests and is being rate limited. 429s can trigger on a per-app or per-user basis."
					},
					"503": {
						"description": "If the response includes the Retry-After header, this means your OAuth 1.0 app is being rate limited. Otherwise, this indicates a transient server error, and your app should retry its request."
					},
					"507": {
						"description": "User is over Dropbox storage quota."
					},
					"5xx": {
						"description": "Server error. Check DropboxOps."
					}
				},
				"tags": [
					""
				]
			}
		},
		"/thumbnails": {
			"get": {
				"summary": "/thumbnails",
				"description": "/thumbnails",
				"operationId": "thumbnails",
				"parameters": [
					{
						"name": "format",
						"in": "query",
						"description": "jpeg (default) or png. For images that are photos, jpeg should be preferred, while png is better for screenshots and digital art.",
						"type": "string"
					},
					{
						"name": "size",
						"in": "query",
						"description": "One of the following values (default: s):valuedimensions (px)xs32x32s64x64m128x128l640x480xl1024x768",
						"type": "string"
					}
				],
				"responses": {
					"": {
						"description": ""
					},
					"400": {
						"description": "Bad input parameter. Error message should indicate which one and why."
					},
					"401": {
						"description": "Bad or expired token. This can happen if the user or Dropbox revoked or expired an access token. To fix, you should re-authenticate the user."
					},
					"403": {
						"description": "Bad OAuth request (wrong consumer key, bad nonce, expired timestamp...). Unfortunately, re-authenticating the user won't help here."
					},
					"404": {
						"description": "File or folder not found at the specified path."
					},
					"405": {
						"description": "Request method not expected (generally should be GET or POST)."
					},
					"429": {
						"description": "Your app is making too many requests and is being rate limited. 429s can trigger on a per-app or per-user basis."
					},
					"503": {
						"description": "If the response includes the Retry-After header, this means your OAuth 1.0 app is being rate limited. Otherwise, this indicates a transient server error, and your app should retry its request."
					},
					"507": {
						"description": "User is over Dropbox storage quota."
					},
					"5xx": {
						"description": "Server error. Check DropboxOps."
					}
				},
				"tags": [
					""
				]
			}
		},
		"/datastores/await": {
			"get": {
				"summary": "Await",
				"description": "This is a long poll request that blocks up to a minute or until a change is detected.",
				"operationId": "",
				"parameters": [
					{
						"name": "get_deltas",
						"in": "query",
						"description": "optional  ",
						"type": "string",
						"format": "string"
					},
					{
						"name": "list_datastores",
						"in": "query",
						"description": "optional ",
						"type": "string",
						"format": "string"
					}
				],
				"responses": {
					"": {
						"description": ""
					},
					"400": {
						"description": "Bad input parameter. Error message should indicate which one and why."
					},
					"401": {
						"description": "Bad or expired token. This can happen if the user or Dropbox revoked or expired an access token. To fix, you should re-authenticate the user."
					},
					"403": {
						"description": "Bad OAuth request (wrong consumer key, bad nonce, expired timestamp...). Unfortunately, re-authenticating the user won't help here."
					},
					"404": {
						"description": "File or folder not found at the specified path."
					},
					"405": {
						"description": "Request method not expected (generally should be GET or POST)."
					},
					"429": {
						"description": "Your app is making too many requests and is being rate limited. 429s can trigger on a per-app or per-user basis."
					},
					"503": {
						"description": "If the response includes the Retry-After header, this means your OAuth 1.0 app is being rate limited. Otherwise, this indicates a transient server error, and your app should retry its request."
					},
					"507": {
						"description": "User is over Dropbox storage quota."
					},
					"5xx": {
						"description": "Server error. Check DropboxOps."
					},
					"200": {
						"description": "OK"
					}
				},
				"tags": [
					"Datastores"
				]
			}
		},
		"/datastores/create_datastore": {
			"get": {
				"summary": "Create Datastore",
				"description": "Creates a new datastore with a shareable ID and returns its revision and handle. If the datastore already exists and is owned by the same user, this call returns its revision and handle. If the datastore already exists and is owned by another user, this call returns an error. To open an existing shared datastore, use get_datastore with the shareable ID. To create a datastore with a private ID, use get_or_create_datastore.",
				"operationId": "",
				"parameters": [
					{
						"name": "dsid",
						"in": "query",
						"description": "string giving a new shareable datastore ID",
						"type": "string",
						"format": "string"
					},
					{
						"name": "key",
						"in": "query",
						"description": "dbase64 string to be used as a seed for the datastore ID",
						"type": "string",
						"format": "string"
					}
				],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [
					"Datastores"
				]
			}
		},
		"/datastores/delete_datastore": {
			"post": {
				"summary": "Delete Datastore",
				"description": "Remove a datastore. Once this operation is executed successfully all future references to the given handle will return a <notfound_result> error.",
				"operationId": "datastoresdelete-datastore",
				"parameters": [
					{
						"name": "handle",
						"in": "query",
						"description": "the handle of an existing datastore",
						"type": "string"
					}
				],
				"responses": {
					"Maximum record size": {
						"description": "100 KiB"
					},
					"Maximum number of records per datastore": {
						"description": "100,000"
					},
					"Maximum datastore size": {
						"description": "10 MiB"
					},
					"Maximum size of a delta": {
						"description": "2 MiB"
					}
				},
				"tags": [
					"Datastores"
				]
			}
		},
		"/datastores/get_datastore": {
			"get": {
				"summary": "Get Datastore",
				"description": "Checks the validity of a datastore ID and returns its revision and handle. The ID must refer to an existing datastore. This works for both private and shareable datastore IDs.",
				"operationId": "",
				"parameters": [
					{
						"name": "dsid",
						"in": "query",
						"description": "the datastore ID to check",
						"type": "string",
						"format": "string"
					}
				],
				"responses": {
					"Maximum record size": {
						"description": "100 KiB"
					},
					"Maximum number of records per datastore": {
						"description": "100,000"
					},
					"Maximum datastore size": {
						"description": "10 MiB"
					},
					"Maximum size of a delta": {
						"description": "2 MiB"
					},
					"200": {
						"description": "OK"
					}
				},
				"tags": [
					"Datastores"
				]
			}
		},
		"/datastores/get_deltas": {
			"get": {
				"summary": "Get Deltas",
				"description": "Return deltas for a datastore since a given revision.",
				"operationId": "",
				"parameters": [
					{
						"name": "handle",
						"in": "query",
						"description": "the handle of an existing datastore",
						"type": "string",
						"format": "string"
					},
					{
						"name": "rev",
						"in": "query",
						"description": "the revision from which to start",
						"type": "string",
						"format": "string"
					}
				],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [
					"Datastores"
				]
			}
		},
		"/datastores/get_or_create_datastore": {
			"post": {
				"summary": "Get or Create Datastore",
				"description": "Checks the validity of a private datastore ID or creates a new datastore with the given ID, and returns its revision and handle. This only works for private datastore IDs. To create a datastore with a shareable ID, use create_datastore.",
				"operationId": "",
				"parameters": [
					{
						"name": "dsid",
						"in": "query",
						"description": "string giving the datastore ID",
						"type": "string"
					}
				],
				"responses": {
					"Maximum record size": {
						"description": "100 KiB"
					},
					"Maximum number of records per datastore": {
						"description": "100,000"
					},
					"Maximum datastore size": {
						"description": "10 MiB"
					},
					"Maximum size of a delta": {
						"description": "2 MiB"
					}
				},
				"tags": [
					"DataStores"
				]
			}
		},
		"/datastores/get_snapshot": {
			"get": {
				"summary": "Get Snapshot",
				"description": "Return a full snapshot of a datastore.",
				"operationId": "",
				"parameters": [
					{
						"name": "handle",
						"in": "query",
						"description": "the handle of an existing datastore",
						"type": "string",
						"format": "string"
					}
				],
				"responses": {
					"Maximum record size": {
						"description": "100 KiB"
					},
					"Maximum number of records per datastore": {
						"description": "100,000"
					},
					"Maximum datastore size": {
						"description": "10 MiB"
					},
					"Maximum size of a delta": {
						"description": "2 MiB"
					},
					"200": {
						"description": "OK"
					}
				},
				"tags": [
					"Datastores"
				]
			}
		},
		"/datastores/list_datastores": {
			"get (or post)": {
				"summary": "List Datastores",
				"description": "Retrieves a list of all datastores for the current user.",
				"operationId": "datastoreslist-datastores",
				"responses": {
					"Maximum record size": {
						"description": "100 KiB"
					},
					"Maximum number of records per datastore": {
						"description": "100,000"
					},
					"Maximum datastore size": {
						"description": "10 MiB"
					},
					"Maximum size of a delta": {
						"description": "2 MiB"
					}
				},
				"tags": [
					"DataStores"
				]
			}
		},
		"/datastores/put_delta": {
			"post": {
				"summary": "/datastores/put_delta",
				"description": "/datastores/put_delta",
				"operationId": "datastoresput-delta",
				"parameters": [
					{
						"name": "handle",
						"in": "query",
						"description": "the handle of an existing datastore",
						"type": "string"
					}
				],
				"responses": {
					"Maximum record size": {
						"description": "100 KiB"
					},
					"Maximum number of records per datastore": {
						"description": "100,000"
					},
					"Maximum datastore size": {
						"description": "10 MiB"
					},
					"Maximum size of a delta": {
						"description": "2 MiB"
					}
				},
				"tags": [
					""
				]
			}
		},
		"/get_info": {
			"post": {
				"summary": "/get_info",
				"description": "/get_info",
				"operationId": "get-info",
				"responses": {
					"Maximum record size": {
						"description": "100 KiB"
					},
					"Maximum number of records per datastore": {
						"description": "100,000"
					},
					"Maximum datastore size": {
						"description": "10 MiB"
					},
					"Maximum size of a delta": {
						"description": "2 MiB"
					},
					"400: for badly-formed requests, e.g. missing or invalid parameters": {
						"description": ""
					},
					"403: for authentication issues": {
						"description": ""
					},
					"409: for issues where the request is well-formed but cannot be completed": {
						"description": ""
					}
				},
				"tags": [
					""
				]
			}
		},
		"/log/get_events": {
			"post": {
				"summary": "Get Events",
				"description": "Accesses the Dropbox for Business audit log for a team.",
				"operationId": "",
				"parameters": [
					{
						"name": "category",
						"in": "query",
						"description": "optional filter the returned events to a single category (see Event types below)",
						"type": "string",
						"format": "string"
					},
					{
						"name": "cursor",
						"in": "query",
						"description": "optional encoded value indicating from what point to get the next limit logs",
						"type": "string",
						"format": "string"
					},
					{
						"name": "end_ts",
						"in": "query",
						"description": "optional end time (UTC timestamp in milliseconds since the Unix epoch)",
						"type": "string",
						"format": "string"
					},
					{
						"name": "limit",
						"in": "query",
						"description": "optional number of results to return per call (default 1000, maximum 1000)",
						"type": "string",
						"format": "string"
					},
					{
						"name": "start_ts",
						"in": "query",
						"description": "optional start time (UTC timestamp in milliseconds since the Unix epoch)",
						"type": "string",
						"format": "string"
					},
					{
						"name": "user",
						"in": "query",
						"description": "optional member ID, user ID, or email of a user for filtering events",
						"type": "string",
						"format": "string"
					}
				],
				"responses": {
					"Maximum record size": {
						"description": "100 KiB"
					},
					"Maximum number of records per datastore": {
						"description": "100,000"
					},
					"Maximum datastore size": {
						"description": "10 MiB"
					},
					"Maximum size of a delta": {
						"description": "2 MiB"
					},
					"400: for badly-formed requests, e.g. missing or invalid parameters": {
						"description": ""
					},
					"403: for authentication issues": {
						"description": ""
					},
					"409: for issues where the request is well-formed but cannot be completed": {
						"description": ""
					},
					"200": {
						"description": "OK"
					}
				},
				"tags": [
					"Logs"
				]
			}
		},
		"/members/add": {
			"post": {
				"summary": "/members/add",
				"description": "/members/add",
				"operationId": "membersadd",
				"parameters": [
					{
						"name": "member_email",
						"in": "query",
						"description": "member email",
						"type": "string"
					},
					{
						"name": "member_external_id",
						"in": "query",
						"description": "optional external ID for member",
						"type": "string"
					},
					{
						"name": "member_given_name",
						"in": "query",
						"description": "member first name",
						"type": "string"
					},
					{
						"name": "member_surname",
						"in": "query",
						"description": "member last name",
						"type": "string"
					},
					{
						"name": "send_welcome_email",
						"in": "query",
						"description": "optional boolean to send a welcome email to the member. Default is true.",
						"type": "string"
					}
				],
				"responses": {
					"400: for badly-formed requests, e.g. missing or invalid parameters": {
						"description": ""
					},
					"403: for authentication issues": {
						"description": ""
					},
					"409: for issues where the request is well-formed but cannot be completed": {
						"description": ""
					}
				},
				"tags": [
					""
				]
			}
		},
		"/members/get_info": {
			"post": {
				"summary": "/members/get_info",
				"description": "/members/get_info",
				"operationId": "membersget-info",
				"parameters": [
					{
						"name": "email",
						"in": "query",
						"description": "optional email of member",
						"type": "string"
					},
					{
						"name": "external_id",
						"in": "query",
						"description": "optional external ID of member",
						"type": "string"
					},
					{
						"name": "member_id",
						"in": "query",
						"description": "optional ID of member",
						"type": "string"
					}
				],
				"responses": {
					"400: for badly-formed requests, e.g. missing or invalid parameters": {
						"description": ""
					},
					"403: for authentication issues": {
						"description": ""
					},
					"409: for issues where the request is well-formed but cannot be completed": {
						"description": ""
					}
				},
				"tags": [
					""
				]
			}
		},
		"/members/get_info_batch": {
			"post": {
				"summary": "Get Info Batch",
				"description": "Retrieves information about multiple team members.",
				"operationId": "",
				"parameters": [
					{
						"name": "emails",
						"in": "query",
						"description": "optional list of member emails",
						"type": "string",
						"format": "string"
					},
					{
						"name": "external_ids",
						"in": "query",
						"description": "optional list of external member IDs",
						"type": "string",
						"format": "string"
					},
					{
						"name": "member_ids",
						"in": "query",
						"description": "optional list of member IDs",
						"type": "string",
						"format": "string"
					}
				],
				"responses": {
					"400: for badly-formed requests, e.g. missing or invalid parameters": {
						"description": ""
					},
					"403: for authentication issues": {
						"description": ""
					},
					"409: for issues where the request is well-formed but cannot be completed": {
						"description": ""
					},
					"200": {
						"description": "OK"
					}
				},
				"tags": [
					"Members"
				]
			}
		},
		"/members/list": {
			"post": {
				"summary": "List Members",
				"description": "Lists members of a team.",
				"operationId": "",
				"parameters": [
					{
						"name": "cursor",
						"in": "query",
						"description": "optional encoded value indicating from what point to get the next limit members",
						"type": "string",
						"format": "string"
					},
					{
						"name": "limit",
						"in": "query",
						"description": "optional number of results to return per call (default 1000, maximum 1000)",
						"type": "string",
						"format": "string"
					}
				],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [
					"Members"
				]
			}
		},
		"/members/remove": {
			"post": {
				"summary": "Remove",
				"description": "Removes a member from a team.",
				"operationId": "",
				"parameters": [
					{
						"name": "delete_data",
						"in": "query",
						"description": "optional controls if the users data will be deleted on their linked devices. Default is true.",
						"type": "string",
						"format": "string"
					},
					{
						"name": "external_id",
						"in": "query",
						"description": "optional external ID. Must specify either a member_id or external_id.",
						"type": "string",
						"format": "string"
					},
					{
						"name": "member_id",
						"in": "query",
						"description": "optional member ID. Must specify either a member_id or external_id.",
						"type": "string",
						"format": "string"
					},
					{
						"name": "transfer_admin_member_id",
						"in": "query",
						"description": "optional errors during the transfer process will be sent via email to the transfer_admin_member_id.",
						"type": "string",
						"format": "string"
					},
					{
						"name": "transfer_dest_member_id",
						"in": "query",
						"description": "optional files from the deleted member account will be transferred to this member.",
						"type": "string",
						"format": "string"
					}
				],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [
					"Members"
				]
			}
		},
		"/members/set_permissions": {
			"post": {
				"summary": "/members/set_permissions",
				"description": "/members/set_permissions",
				"operationId": "membersset-permissions",
				"parameters": [
					{
						"name": "external_id",
						"in": "query",
						"description": "optional external ID. Must specify either a member_id or external_id.",
						"type": "string"
					},
					{
						"name": "member_id",
						"in": "query",
						"description": "optional member ID. Must specify either a member_id or external_id.",
						"type": "string"
					},
					{
						"name": "new_is_admin",
						"in": "query",
						"description": "optional change the admin status of the member.",
						"type": "string"
					}
				],
				"responses": {
					"400: for badly-formed requests, e.g. missing or invalid parameters": {
						"description": ""
					},
					"403: for authentication issues": {
						"description": ""
					},
					"409: for issues where the request is well-formed but cannot be completed": {
						"description": ""
					}
				},
				"tags": [
					""
				]
			}
		},
		"/members/set_profile": {
			"get": {
				"summary": "Set Profile",
				"description": "Updates a team member's profile.",
				"operationId": "",
				"parameters": [
					{
						"name": "external_id",
						"in": "query",
						"description": "optional external ID. Must specify either a member_id or external_id.",
						"type": "string",
						"format": "string"
					},
					{
						"name": "member_id",
						"in": "query",
						"description": "optional member ID. Must specify either a member_id or external_id.",
						"type": "string",
						"format": "string"
					},
					{
						"name": "new_email",
						"in": "query",
						"description": "optional new email for member.",
						"type": "string",
						"format": "string"
					},
					{
						"name": "new_external_id",
						"in": "query",
						"description": "optional new external ID for member",
						"type": "string",
						"format": "string"
					},
					{
						"name": "new_given_name",
						"in": "query",
						"description": "optional new given name for member.",
						"type": "string",
						"format": "string"
					},
					{
						"name": "new_surname",
						"in": "query",
						"description": "optional new surname for member.",
						"type": "string",
						"format": "string"
					}
				],
				"responses": {
					"400: for badly-formed requests, e.g. missing or invalid parameters": {
						"description": ""
					},
					"403: for authentication issues": {
						"description": ""
					},
					"409: for issues where the request is well-formed but cannot be completed": {
						"description": ""
					},
					"200": {
						"description": "OK"
					}
				},
				"tags": [
					"Members"
				]
			}
		},
		"/reports/get_activity": {
			"post": {
				"summary": "Get Activity",
				"description": "Retrieves reporting data about a team's user activity.",
				"operationId": "",
				"parameters": [
					{
						"name": "end_date",
						"in": "query",
						"description": "optional ending date (exclusive)",
						"type": "string",
						"format": "string"
					},
					{
						"name": "start_date",
						"in": "query",
						"description": "optional starting date (inclusive)",
						"type": "string",
						"format": "string"
					}
				],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [
					"Reports"
				]
			}
		},
		"/reports/get_devices": {
			"post": {
				"summary": "Get Devices",
				"description": "Retrieves reporting data about a team's linked devices.",
				"operationId": "",
				"parameters": [
					{
						"name": "end_date",
						"in": "query",
						"description": "optional ending date (exclusive)",
						"type": "string",
						"format": "string"
					},
					{
						"name": "start_date",
						"in": "query",
						"description": "optional starting date (inclusive)",
						"type": "string",
						"format": "string"
					}
				],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [
					"Reports"
				]
			}
		},
		"/reports/get_membership": {
			"post": {
				"summary": "/reports/get_membership",
				"description": "/reports/get_membership",
				"operationId": "reportsget-membership",
				"parameters": [
					{
						"name": "end_date",
						"in": "query",
						"description": "optional ending date (exclusive)",
						"type": "string"
					},
					{
						"name": "start_date",
						"in": "query",
						"description": "optional starting date (inclusive)",
						"type": "string"
					}
				],
				"responses": {
					"400: for badly-formed requests, e.g. missing or invalid parameters": {
						"description": ""
					},
					"403: for authentication issues": {
						"description": ""
					},
					"409: for issues where the request is well-formed but cannot be completed": {
						"description": ""
					}
				},
				"tags": [
					""
				]
			}
		},
		"/reports/get_storage": {
			"post": {
				"summary": "/reports/get_storage",
				"description": "/reports/get_storage",
				"operationId": "reportsget-storage",
				"parameters": [
					{
						"name": "end_date",
						"in": "query",
						"description": "optional ending date (exclusive)",
						"type": "string"
					},
					{
						"name": "start_date",
						"in": "query",
						"description": "optional starting date (inclusive)",
						"type": "string"
					}
				],
				"responses": {
					"400: for badly-formed requests, e.g. missing or invalid parameters": {
						"description": ""
					},
					"403: for authentication issues": {
						"description": ""
					},
					"409: for issues where the request is well-formed but cannot be completed": {
						"description": ""
					}
				},
				"tags": [
					""
				]
			}
		}
	}
}