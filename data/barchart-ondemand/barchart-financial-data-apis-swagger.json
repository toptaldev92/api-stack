{
	"swagger": "2.0",
	"info": {
		"title": "Barchart Financial Data APIs",
		"description": "Barchart OnDemand features a diverse set of market data and information APIs. With Barchart OnDemand you can access Price Data (real-time, delayed, historical or end-of-day), Profiles, Financial Data, Corporate Actions, Leaderboards, Charts, Analytics, ETFs, News, Filings, Weather and more. Explore our APIs below.",
		"termsOfService": null,
		"version": "1"
	},
	"host": "ondemand.websol.barchart.com",
	"basePath": "/",
	"schemes": [
		"http"
	],
	"produces": [
		"application/json"
	],
	"consumes": [
		"application/json"
	],
	"paths": {
		"getBalanceSheets.{format}": {
			"get": {
				"summary": "Balance Sheets",
				"description": "The getBalanceSheets API provides access to public company financial balance sheets based on symbol.",
				"operationId": "",
				"parameters": [
					{
						"name": "count",
						"in": "query",
						"description": "The number of Quarterly or Annual periods of financial statements to return.",
						"type": "integer",
						"format": "string"
					},
					{
						"name": "format",
						"in": "query",
						"description": "Return results in XML, JSON, or CSV",
						"type": "string",
						"format": "string"
					},
					{
						"name": "frequency",
						"in": "query",
						"description": "The frequency of financial statement reporting, either Quarterly (Quarter) or Annually (Annual)",
						"type": "string",
						"format": "string"
					},
					{
						"name": "rawData",
						"in": "query",
						"description": "Return raw data, otherwise sales, costs, expenses, tax, and income data is displayed in thousands.",
						"type": "string",
						"format": "string"
					},
					{
						"name": "symbols",
						"in": "query",
						"description": "A symbol or code that identifies a financial instrument. Multiple symbols separated by a comma may be used.",
						"type": "string",
						"format": "string"
					}
				],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [
					"financial"
				]
			}
		},
		"getCompetitors.{format}": {
			"get": {
				"summary": "Competitors",
				"description": "The getCompetitors API provides a list of related stock symbols and associated comparative market data to the underlying stock input.",
				"operationId": "",
				"parameters": [
					{
						"name": "fields",
						"in": "query",
						"description": "The fields requested.",
						"type": "string",
						"format": "string"
					},
					{
						"name": "format",
						"in": "query",
						"description": "Return results in XML, JSON, or CSV",
						"type": "string",
						"format": "string"
					},
					{
						"name": "maxRecords",
						"in": "query",
						"description": "The maximum number of records to show in the return. ",
						"type": "string",
						"format": "string"
					},
					{
						"name": "symbol",
						"in": "query",
						"description": "A symbol or code that identifies a financial instrument. Multiple symbols separated by a comma may be used. For futures, notation such as  for the active contract or  for the first nearby is supported, as is  for all futures contracts for a given root symbol, as is  for all options contracts for a given underlying futures symbol",
						"type": "string",
						"format": "string"
					}
				],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [
					"financial"
				]
			}
		},
		"getCorporateActions.{format}": {
			"get": {
				"summary": "Corporate Actions",
				"description": "The getCorporateActions API provides corporate actions data on equities including Splits, Dividends and Earnings, based on a symbol.",
				"operationId": "",
				"parameters": [
					{
						"name": "endDate",
						"in": "query",
						"description": "The end date for the query.",
						"type": "string",
						"format": "string"
					},
					{
						"name": "eventType",
						"in": "query",
						"description": "The type of event: split, dividend, earnings",
						"type": "string",
						"format": "string"
					},
					{
						"name": "format",
						"in": "query",
						"description": "Return results in XML, JSON, or CSV",
						"type": "string",
						"format": "string"
					},
					{
						"name": "maxRecords",
						"in": "query",
						"description": "The maximum number of records to return.",
						"type": "string",
						"format": "string"
					},
					{
						"name": "startDate",
						"in": "query",
						"description": "The beginning date for the query.",
						"type": "string",
						"format": "string"
					},
					{
						"name": "symbols",
						"in": "query",
						"description": "A symbol or code that identifies a financial instrument.",
						"type": "string",
						"format": "string"
					}
				],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [
					"financial"
				]
			}
		},
		"getEarningsEstimates.{format}": {
			"get": {
				"summary": "Earnings Estimates",
				"description": "The getEarningsEstimates API provides per share earnings estimates on public companies for quarterly and annual periods based on symbol. Multiple symbols can be used to return estimated earnings data, including average estimate, number of analysts, high estimate, low estimate and estimated growth rate.",
				"operationId": "",
				"parameters": [
					{
						"name": "fields",
						"in": "query",
						"description": "Additional fields requested. ",
						"type": "string",
						"format": "string"
					},
					{
						"name": "format",
						"in": "query",
						"description": "Return results in XML, JSON, or CSV",
						"type": "string",
						"format": "string"
					},
					{
						"name": "symbols",
						"in": "query",
						"description": "A symbol or code that identifies a financial instrument. Multiple symbols separated by a comma may be used.",
						"type": "string",
						"format": "string"
					}
				],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [
					"financial"
				]
			}
		},
		"getEquityOptions.{format}": {
			"get": {
				"summary": "The getEquityOptions API provides price and volatility data for options on Equities.",
				"description": "",
				"operationId": "",
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [
					"financial"
				]
			}
		},
		"getETFDetails.{format}": {
			"get": {
				"summary": "ETF Details",
				"description": "The getETFDetails API provides ETF profile information including descriptions, fund family, underlying index, inception date, alpha, beta, shares outstanding, management fee, assets under management, top 10 holdings and more.",
				"operationId": "",
				"parameters": [
					{
						"name": "format",
						"in": "query",
						"description": "Return results in XML, JSON, or CSV",
						"type": "string",
						"format": "string"
					},
					{
						"name": "symbol(s)",
						"in": "query",
						"description": "A symbol or code that identifies a financial instrument.  Multiple symbols separated by a comma may be used.n                            (list)A comma or semi-colon delimited string used for multiple inputs. (example: AMZN,GOOG,YHOO)nttttttttExample: AAPL, GOOG",
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [
					"financial"
				]
			}
		},
		"getFinancialHighlights.{format}": {
			"get": {
				"summary": "Financial Highlights",
				"description": "The getFinancialHighlights API provides key financial highlights, ratios and statistics for equities based on symbol. Fields include market capitalization, revenue, net income, revenue growth and earnings per share.",
				"operationId": "",
				"parameters": [
					{
						"name": "fields",
						"in": "query",
						"description": "The fields requested.",
						"type": "string",
						"format": "string"
					},
					{
						"name": "format",
						"in": "query",
						"description": "Return results in XML, JSON, or CSV",
						"type": "string",
						"format": "string"
					},
					{
						"name": "symbols",
						"in": "query",
						"description": "A symbol or code that identifies a financial instrument.",
						"type": "string",
						"format": "string"
					}
				],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [
					"financial"
				]
			}
		},
		"getFinancialRatios.{format}": {
			"get": {
				"summary": "Financial Ratios",
				"description": "The getFinancialRatios API provides key financial ratios for equities based on symbol. Up to 8 years of financial ratios are available and fields include earnings per share, return on equity and price to earnings.",
				"operationId": "",
				"parameters": [
					{
						"name": "fields",
						"in": "query",
						"description": "The fields requested.",
						"type": "string",
						"format": "string"
					},
					{
						"name": "symbols",
						"in": "query",
						"description": "A symbol or code that identifies a financial instrument.",
						"type": "string",
						"format": "string"
					}
				],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [
					"financial"
				]
			}
		},
		"getFuturesExpirations.{format}": {
			"get": {
				"summary": "Futures Expirations",
				"description": "The getFuturesExpiration API provides first notice and last trade dates for futures contracts.",
				"operationId": "",
				"parameters": [
					{
						"name": "contracts",
						"in": "query",
						"description": "A symbol or code that identifies a futures contract. n                            (list)A comma or semi-colon delimited string.n                                n                                n                                nttttttttExample: ZCN14,ZCU14",
						"type": "string"
					},
					{
						"name": "format",
						"in": "query",
						"description": "Return results in XML, JSON, or CSV",
						"type": "string",
						"format": "string"
					},
					{
						"name": "roots",
						"in": "query",
						"description": "A symbol or code that identifies a futures root. n                            (list)A comma or semi-colon delimited string.n                                n                                n                                nttttttttExample: ZC,ZS",
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [
					"financial"
				]
			}
		},
		"getFuturesOptions.{format}": {
			"get": {
				"summary": "Futures Options",
				"description": "The getFuturesOptions API provides price and volatility data for options on Futures contracts.",
				"operationId": "",
				"parameters": [
					{
						"name": "contract",
						"in": "query",
						"description": "A symbol or code that identifies an options contract.",
						"type": "string",
						"format": "string"
					},
					{
						"name": "exchange",
						"in": "query",
						"description": "Exchange code for the marketplace where the financial instruments are listed.",
						"type": "string",
						"format": "string"
					},
					{
						"name": "expirationDay",
						"in": "query",
						"description": "The numeric date for of the expiration day.",
						"type": "string",
						"format": "string"
					},
					{
						"name": "expirationMonth",
						"in": "query",
						"description": "The numeric representation of the expiration month.",
						"type": "string",
						"format": "string"
					},
					{
						"name": "fields",
						"in": "query",
						"description": "Additional fields requested.",
						"type": "string",
						"format": "string"
					},
					{
						"name": "format",
						"in": "query",
						"description": "Return results in XML, JSON, or CSV",
						"type": "string",
						"format": "string"
					},
					{
						"name": "root",
						"in": "query",
						"description": "A symbol or code that identifies a option root",
						"type": "string",
						"format": "string"
					},
					{
						"name": "symbols",
						"in": "query",
						"description": "A symbol or code that identifies an option. Multiple symbols separated by a comma may be used.",
						"type": "string",
						"format": "string"
					},
					{
						"name": "type",
						"in": "query",
						"description": "The type of option desired, Call or Put.",
						"type": "string",
						"format": "string"
					}
				],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [
					"financial",
					" futures"
				]
			}
		},
		"getFuturesSpecifications.{format}": {
			"get": {
				"summary": "Futures Specifications",
				"description": "The getFuturesSpecifications API provides contract information such as trading hours, contract size and tick size for futures contracts.",
				"operationId": "",
				"parameters": [
					{
						"name": "exchanges",
						"in": "query",
						"description": "The code for the exchange a group of financial instruments are listed on. n                            (list)A comma or semi-colon delimited string.n                                n                                n                                nttttttttExample: COMEX,NYMEX",
						"type": "string"
					},
					{
						"name": "format",
						"in": "query",
						"description": "Return results in XML, JSON, or CSV",
						"type": "string",
						"format": "string"
					},
					{
						"name": "futuresCategory",
						"in": "query",
						"description": "Futures categories include: Energies, Financials, Grains, Indices, Meats, Metals, Softs and Currencies. n                            (list)A comma or semi-colon delimited string.n                                n                                n                                nttttttttExample: energies,metals",
						"type": "string"
					},
					{
						"name": "symbols",
						"in": "query",
						"description": "A symbol or code that identifies a financial instrument.  Multiple symbols separated by a comma may be used. n                            (list)A comma or semi-colon delimited string.n                                n                                n                                nttttttttExample: GC,CL",
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [
					"financial"
				]
			}
		},
		"getHighsLows.{format}": {
			"get": {
				"summary": "Highs Lows",
				"description": "The getHighsLows API provides lists for new 52-week highs or 52-week lows based on exchange and asset type.",
				"operationId": "",
				"parameters": [
					{
						"name": "assetType",
						"in": "query",
						"description": "The type of asset. Includes: equities (STK), mutual funds (FUNDS), ETFs (ETF), futures (FUT), forex (FOREX)",
						"type": "string",
						"format": "string"
					},
					{
						"name": "exchanges",
						"in": "query",
						"description": "Exchange code for the marketplace where the financial instruments are listed. ",
						"type": "string",
						"format": "string"
					},
					{
						"name": "format",
						"in": "query",
						"description": "Return results in XML, JSON, or CSV",
						"type": "string",
						"format": "string"
					},
					{
						"name": "maxRecords",
						"in": "query",
						"description": "The maximum number of records to show in the return",
						"type": "string",
						"format": "string"
					},
					{
						"name": "offset",
						"in": "query",
						"description": "A value denoting where to start results from.",
						"type": "string",
						"format": "string"
					},
					{
						"name": "period",
						"in": "query",
						"description": "A value representing the time period. ",
						"type": "string",
						"format": "string"
					},
					{
						"name": "type",
						"in": "query",
						"description": "The type of high/low list to return.",
						"type": "string",
						"format": "string"
					}
				],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [
					"financial"
				]
			}
		},
		"getHistory.{format}": {
			"get": {
				"summary": "Get History",
				"description": "The getHistory API is used to request historical time series data on stocks, indices, mutual funds, ETFs, futures, indices or forex pairs. Historical data is available as tick, minute or end-of-day data.",
				"operationId": "",
				"parameters": [
					{
						"name": "dividends",
						"in": "query",
						"description": "A distribution of a portion of a companys earnings. This parameter only applies to stocks and specifies whether the data returned should be adjusted for dividends or not. Set to true to query for adjusted the data, or to false for non-adjusted data. If not specified, the default is true. In order to guarantee the same adjustment settings in the future, this parameter should be specified.",
						"type": "string",
						"format": "string"
					},
					{
						"name": "endDate",
						"in": "query",
						"description": "The end data of the historical data query. This parameter should be set to the desired end date/time for the query (the result set will include records up to, but not including, this value). If not set, the value will default to the end of the day specified in the start parameter, if specified, or to the end of the current day, if start is not specified. The value should conform to the format yyyymmdd[hhmm[ss]], where fields in brackets are optional (Do not include the brackets themselves). Any ",
						"type": "string",
						"format": "string"
					},
					{
						"name": "format",
						"in": "query",
						"description": "Return results in XML, JSON, or CSV",
						"type": "string",
						"format": "string"
					},
					{
						"name": "interval",
						"in": "query",
						"description": "The number of minutes for a minute query.",
						"type": "string",
						"format": "string"
					},
					{
						"name": "maxRecords",
						"in": "query",
						"description": "The maximum amount of records returned. This parameter should be set to the maximum number of records desired. If not specified, there number of records returned will be determined by the date/time parameters specified as well as any defaults that apply to the query.",
						"type": "string",
						"format": "string"
					},
					{
						"name": "nearby",
						"in": "query",
						"description": "This parameter specifies the offset from the front month for nearest queries (data parameter set to dailynearest, weeklynearest, monthlynearest, quarterlynearest and yearlynearest). The default value for this parameter is 1, which sets nearest queries to the most current front month. If set to a value greater than 1, then the nth front month is used (for example, in August of 2010, ESU10 would be the current front month, so nearby=2 would use ESZ10, nearby=3 would use ESH11, etc.) This paramet",
						"type": "string",
						"format": "string"
					},
					{
						"name": "order",
						"in": "query",
						"description": "An arrangement of fields within a particular record (ascending or descending). This parameter can be set to one of two values (asc and desc) in order to specify the chronological order of the result set returned. If this parameter is not specified, the order results is not guaranteed.",
						"type": "string",
						"format": "string"
					},
					{
						"name": "sessionFilter",
						"in": "query",
						"description": "This parameter modifies the default session codes/sale conditions used to return ticks for each exchange. ",
						"type": "string",
						"format": "string"
					},
					{
						"name": "splits",
						"in": "query",
						"description": "An adjustment of stock value due to corporate action. This parameter only applies to stocks and specifies whether the data returned should be adjusted for splits or not. Set to true to query for adjusted the data, or to false for non-adjusted data. If not specified, the default is true. In order to guarantee the same adjustment settings in the future, this parameter should be specified.",
						"type": "string",
						"format": "string"
					},
					{
						"name": "startDate",
						"in": "query",
						"description": "The start date of the historical data query. This parameter should be set to the desired start date/time for the query (the result set will include records back to, and including, this value). If not set, the value will default to the beginning of the day specified in the end parameter, if end is specified, or to the beginning of the current day, if end is not specified. The value should conform to the format yyyymmdd[hhmm[ss]], where fields in brackets are optional (Do not include the brackets ",
						"type": "string",
						"format": "string"
					},
					{
						"name": "symbol",
						"in": "query",
						"description": "A symbol or code that identifies a financial instrument.",
						"type": "string",
						"format": "string"
					},
					{
						"name": "type",
						"in": "query",
						"description": "The type of historical data to return, including tick data, minute data, and end-of-day data.",
						"type": "string",
						"format": "string"
					},
					{
						"name": "volume",
						"in": "query",
						"description": "The quantity of shares or contracts traded. For futures, this parameter can be set to one of two values (contract and total) in order to specify whether the volume returned should be the contract volume or the total volume. For aggregates (such as weekly, monthly or yearly), this returns the average volume for the period specified. If the value is preceded by sum (sumcontract and sumtotal), then it returns the sum of the volumes in each daily bar during the period specified. If not specified, ",
						"type": "string",
						"format": "string"
					}
				],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [
					"financial"
				]
			}
		},
		"getIncomeStatements.{Format}": {
			"get": {
				"summary": "Income Statements",
				"description": "The getIncomeStatements API provides access to public company financial Income statements based on symbol.",
				"operationId": "",
				"parameters": [
					{
						"name": "count",
						"in": "query",
						"description": "The number of Quarterly or Annual periods of financial statements to return.",
						"type": "integer",
						"format": "string"
					},
					{
						"name": "frequency",
						"in": "query",
						"description": "The frequency of financial statement reporting, either Quarterly (Quarter) or Annually (Annual).",
						"type": "string",
						"format": "string"
					},
					{
						"name": "rawData",
						"in": "query",
						"description": "Return raw data, otherwise sales, costs, expenses, tax, and income data is displayed in thousands.",
						"type": "integer",
						"format": "string"
					},
					{
						"name": "symbols",
						"in": "query",
						"description": "A symbol or code that identifies a financial instrument. Multiple symbols separated by a comma may be used.",
						"type": "string",
						"format": "string"
					}
				],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [
					"financial",
					" income"
				]
			}
		},
		"getIndexMembers.{format}": {
			"get": {
				"summary": "Index Members",
				"description": "The getIndexMembers API provides the stocks compromising common indices.",
				"operationId": "",
				"parameters": [
					{
						"name": "format",
						"in": "query",
						"description": "Return results in XML, JSON, or CSV",
						"type": "string",
						"format": "string"
					},
					{
						"name": "symbol",
						"in": "query",
						"description": "A symbol or code that identifies a financial instrument.",
						"type": "string",
						"format": "string"
					}
				],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [
					"financial"
				]
			}
		},
		"getInsiders.{format}": {
			"get": {
				"summary": "Insiders",
				"description": "The getInsiders API provides insider transaction records for publically traded companies based on symbol. Data reported includes the date of the transaction, transaction type, number of shares and the transaction value.",
				"operationId": "",
				"parameters": [
					{
						"name": "format",
						"in": "query",
						"description": "Return results in XML, JSON, or CSV",
						"type": "string",
						"format": "string"
					},
					{
						"name": "symbol",
						"in": "query",
						"description": "A symbol or code that identifies a financial instrument. Multiple symbols separated by a comma may be used.",
						"type": "string",
						"format": "string"
					},
					{
						"name": "type",
						"in": "query",
						"description": "The type of insider data, either Transactions (T) or Holdings (H).",
						"type": "string",
						"format": "string"
					}
				],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [
					"financial"
				]
			}
		},
		"getInstrumentDefinition.{format}": {
			"get": {
				"summary": "Instrument Definition",
				"description": "The getInstrumentDefinition API is available to request meta data on financial instruments by symbol or exchange. Meta data includes instrument names, exchange codes, tick increments, base codes, expiration dates and more.",
				"operationId": "",
				"parameters": [
					{
						"name": "exchangeMics",
						"in": "query",
						"description": "Market Indicator Code for the marketplace where the financial instruments are listed. n                            (list)A comma or semi-colon delimited string.n                                n                                n                                nttttttttExample: XCME",
						"type": "string"
					},
					{
						"name": "exchanges",
						"in": "query",
						"description": "Exchange code for the marketplace where the financial instruments are listed. n                            (list-enum)A comma or semi-colon delimited string that must match a list of valid possible values.n                                n                                                                Valid values: AMEX, ASX, BATS, BMF, CBOT, CBOTM, CFE, CME, CNSX, COMEX, CXMI, DME, EUIDX, EUREX, FOREX, FUND, GBLX, ICE, ICEFI, ICEUS, IMM, INDEX, INDEX-CBOE, INDEX-DOW, INDEX-NQ, INDEX-NY, INDEX-R",
						"type": "string"
					},
					{
						"name": "format",
						"in": "query",
						"description": "Return results in XML, JSON, or CSV",
						"type": "string",
						"format": "string"
					},
					{
						"name": "maxRecords",
						"in": "query",
						"description": "The maximum number of records requested. n                            (int)A numeric type defining a whole number. (example: 2)n                                n                                n                                                                Default: 100n                                nttttttttExample: 20",
						"type": "string"
					},
					{
						"name": "offset",
						"in": "query",
						"description": "A value denoting where to start results from. n                            (int)A numeric type defining a whole number. (example: 2)n                                n                                n                                                                Default: 0n                                nttttttttExample: 10",
						"type": "string"
					},
					{
						"name": "symbols",
						"in": "query",
						"description": "A symbol or code that identifies a financial instrument. n                            (list)A comma or semi-colon delimited string.n                                n                                n                                nttttttttExample:",
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [
					"financial"
				]
			}
		},
		"getLeaders.{format}": {
			"get": {
				"summary": "Leaders",
				"description": "The getLeaders API provides leaderboard lists for equities, futures, forex, mutual funds and ETFs, including most active, gainers, losers, whats hot and whats not hot.",
				"operationId": "",
				"parameters": [
					{
						"name": "assetType",
						"in": "query",
						"description": "The type of asset. Includes: equities (STK), mutual funds (FUNDS), ETFs (ETF), futures (FUT), forex (FOREX)",
						"type": "string",
						"format": "string"
					},
					{
						"name": "exchanges",
						"in": "query",
						"description": "Exchange code for the marketplace where the financial instruments are listed. ",
						"type": "string",
						"format": "string"
					},
					{
						"name": "format",
						"in": "query",
						"description": "Return results in XML, JSON, or CSV",
						"type": "string",
						"format": "string"
					},
					{
						"name": "maxRecords",
						"in": "query",
						"description": "The maximum number of records to show in the return.",
						"type": "integer",
						"format": "string"
					},
					{
						"name": "type",
						"in": "query",
						"description": "The type of leaderboard to display.",
						"type": "string",
						"format": "string"
					}
				],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [
					"financial"
				]
			}
		},
		"getMomentum.{format}": {
			"get": {
				"summary": "Momentum",
				"description": "The getMomentum API provides a daily summary on the number of advancing, declining and unchanged stocks, as well as the percentage of stocks above moving averages of different lengths.",
				"operationId": "",
				"parameters": [
					{
						"name": "country",
						"in": "query",
						"description": "A country code identifying a group of stocks listed in a country. n                            (string)A sequence of characters. (example: GOOG)n                                n                                n                                nttttttttExample: US",
						"type": "string"
					},
					{
						"name": "exchanges",
						"in": "query",
						"description": "The code for the exchange a group of financial instruments are listed on. n                            (list)A comma or semi-colon delimited string.n                                n                                n                                nttttttttExample: NASDAQ",
						"type": "string"
					},
					{
						"name": "format",
						"in": "query",
						"description": "",
						"type": "string",
						"format": "string"
					}
				],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [
					"financial"
				]
			}
		},
		"getNews.{format}": {
			"get": {
				"summary": "News",
				"description": "The getNews API returns news headlines, articles and related photos based upon news sources, category, sub-category and/or keyword.",
				"operationId": "",
				"parameters": [
					{
						"name": "category",
						"in": "query",
						"description": "A grouping of related news content. n                            (enum)A type which includes a list of valid possible values.n                                n                                                                Valid values: stocks, futures, forexn                                n                                nttttttttExample: stocks",
						"type": "string"
					},
					{
						"name": "displayType",
						"in": "query",
						"description": "The type of new displayed: headlines only, headline and preview, or full. n                            (enum)A type which includes a list of valid possible values.n                                n                                                                Valid values: headline, preview, fulln                                n                                nttttttttExample: preview",
						"type": "string"
					},
					{
						"name": "keyword",
						"in": "query",
						"description": "A term used to create searches. n                            (string)A sequence of characters. (example: GOOG)n                                n                                n                                nttttttttExample: tablet",
						"type": "string"
					},
					{
						"name": "maxRecords",
						"in": "query",
						"description": "The maximum number of records to show in the return. n                            (int)A numeric type defining a whole number. (example: 2)n                                n                                n                                                                Default: 30n                                nttttttttExample: 10",
						"type": "string"
					},
					{
						"name": "series",
						"in": "query",
						"description": "A grouping of stories under a recurring news topic. e.g. Morning Call (MORNCALL). n                            (enum)A type which includes a list of valid possible values.n                                n                                                                Valid values: MORNCALLn                                n                                nttttttttExample: MORNCALL",
						"type": "string"
					},
					{
						"name": "sources",
						"in": "query",
						"description": "The news feed code. n                            (list-enum)A comma or semi-colon delimited string that must match a list of valid possible values.n                                n                                                                Valid values: AP, BC, CP, CPF, CNW, CRB, DJ, CMTX, CMTX:PCS, CMTX:PCC, CMTX:WALLST, CMTX:SEC, IF, USDA, PRNW, ZACKS, BRUG, NASSn                                n                                nttttttttExample: AP,IF",
						"type": "string"
					},
					{
						"name": "startDate",
						"in": "query",
						"description": "The beginning date for the query. n                            (dateTime)A date and time in the format of YYYY-MM-DD HH:MI:SS&lt;TIMEZONE_OFFSET&gt;.n                                n                                n                                nttttttttExample: 2014-11-03T22:11:42",
						"type": "string"
					},
					{
						"name": "subCategory",
						"in": "query",
						"description": "A more specific category of related news content. n                            (enum)A type which includes a list of valid possible values.n                                n                                                                Valid values: n                                n                                nttttttttExample: tech",
						"type": "string"
					},
					{
						"name": "symbols",
						"in": "query",
						"description": "A symbol or code that identifies a financial instrument. n                            (list)A comma or semi-colon delimited string.n                                n                                n                                nttttttttExample: AMZN,GOOG,AAPL",
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [
					"financial"
				]
			}
		},
		"getNewsCategories.{format}": {
			"get": {
				"summary": "News Categories",
				"description": "The getNewsCategories API provides access to news source category and sub-category data.",
				"operationId": "",
				"parameters": [
					{
						"name": "depth",
						"in": "query",
						"description": "An integer that will limit how many levels of the category tree to show. By default all levels are returned. n                            (int)A numeric type defining a whole number. (example: 2)n                                n                                n                                                                Default: 0n                                nttttttttExample: 2",
						"type": "string"
					},
					{
						"name": "format",
						"in": "query",
						"description": "Return results in XML, JSON, or CSV",
						"type": "string",
						"format": "string"
					},
					{
						"name": "sources",
						"in": "query",
						"description": "An id or code that identifies a news source. Multiple sources separated by a comma may be used. n                            (list)A comma or semi-colon delimited string.n                                n                                n                                                                Default: n                                nttttttttExample: AP,CMTX,USDA",
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [
					"financial"
				]
			}
		},
		"getNewsSources.{format}": {
			"get": {
				"summary": "News Sources",
				"description": "The getNewsSources API provides access to public news sources and your permissions per source.",
				"operationId": "",
				"parameters": [
					{
						"name": "format",
						"in": "query",
						"description": "Return results in XML, JSON, or CSV",
						"type": "string",
						"format": "string"
					},
					{
						"name": "strict",
						"in": "query",
						"description": "Return only the authorized news sources. n                            (string)A sequence of characters. (example: GOOG)n                                n                                n                                                                Default: falsen                                nttttttttExample: true",
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [
					"financial"
				]
			}
		},
		"getProfile.{format}": {
			"get": {
				"summary": "Profile",
				"description": "The getProfile API is used to request information about a company, such as sector, industry, company description, CEO, recent earnings, P/E ratio, and address, based on a symbol.",
				"operationId": "",
				"parameters": [
					{
						"name": "fields",
						"in": "query",
						"description": "The fields requested. ",
						"type": "string",
						"format": "string"
					},
					{
						"name": "format",
						"in": "query",
						"description": "Return results in XML, JSON, or CSV",
						"type": "string",
						"format": "string"
					},
					{
						"name": "symbols",
						"in": "query",
						"description": "A symbol or code that identifies a financial instrument. Multiple symbols separated by a comma may be used. ",
						"type": "string",
						"format": "string"
					}
				],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [
					"financial"
				]
			}
		},
		"getQuote.{format}": {
			"get": {
				"summary": "Get Quote",
				"description": "The getQuote API is used to request price data, either real-time, delayed or end-of-day, by symbol. In addition to Last Price or Settlement, other fields such as Open, High, Low, Close, Bid, Ask, 52-week high and low, and more are available.",
				"operationId": "",
				"parameters": [
					{
						"name": "fields",
						"in": "query",
						"description": "The fields requested",
						"type": "string",
						"format": "string"
					},
					{
						"name": "format",
						"in": "query",
						"description": "Return results in XML, JSON, or CSV",
						"type": "string",
						"format": "string"
					},
					{
						"name": "mode",
						"in": "query",
						"description": "Parameter to change quote type to real-time (R), delayed (I) or end-of-day (D) if available.",
						"type": "string",
						"format": "string"
					},
					{
						"name": "symbols",
						"in": "query",
						"description": "A symbol or code that identifies a financial instrument. Multiple symbols separated by a comma may be used. For futures, notation such as  for the active contract or  for the first nearby is supported, as is  for all futures contracts for a given root symbol, as is  for all options contracts for a given underlying futures symbol. ",
						"type": "string",
						"format": "string"
					}
				],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [
					"financial"
				]
			}
		},
		"getQuoteEod.{format}": {
			"get": {
				"summary": "End of Day Pricing",
				"description": "The getQuoteEod API is used to request end-of-day price data, by combined exchange & symbol, for every equity, future, and fund in the world.",
				"operationId": "",
				"parameters": [
					{
						"name": "fields",
						"in": "query",
						"description": "The fields requested.",
						"type": "string",
						"format": "string"
					},
					{
						"name": "format",
						"in": "query",
						"description": "Return results in XML, JSON, or CSV",
						"type": "string",
						"format": "string"
					},
					{
						"name": "symbols",
						"in": "query",
						"description": "An MIC code or a Country code plus the symbol or code that identifies a financial instrument. Multiple symbols separated by a comma may be used. For futures, notation such as  for the active contract or  for the first nearby is supported, as is  for all futures contracts for a given root symbol, as is  for all options contracts for a given underlying futures symbol. If no country code or MIC is passed then the API will behave the same a",
						"type": "string",
						"format": "string"
					}
				],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [
					"financial",
					" pricing"
				]
			}
		},
		"getRatings.{format}": {
			"get": {
				"summary": "Ratings",
				"description": "The getRatings API provides analysts ratings on stocks (strong buy, moderate buy, hold, moderate sell or strong sell) based on a symbol.",
				"operationId": "",
				"parameters": [
					{
						"name": "fields",
						"in": "query",
						"description": "The fields requested. ",
						"type": "string",
						"format": "string"
					},
					{
						"name": "format",
						"in": "query",
						"description": "Return results in XML, JSON, or CSV",
						"type": "string",
						"format": "string"
					},
					{
						"name": "symbols",
						"in": "query",
						"description": "A symbol or code that identifies a financial instrument. Multiple symbols separated by a comma may be used. For futures, notation such as  for the active contract or  for the first nearby is supported, as is  for all futures contracts for a given root symbol, as is  for all options contracts for a given underlying futures symbol.",
						"type": "string",
						"format": "string"
					}
				],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [
					"financial"
				]
			}
		},
		"getScreener.{format}": {
			"get": {
				"summary": "Screener",
				"description": "The getScreener API provides the ability to screen for stocks, index, mutual fund, ETF or futures instruments that meet a custom set of criteria.",
				"operationId": "",
				"parameters": [
					{
						"name": "compareToType",
						"in": "query",
						"description": "The type of comparison for the screen, either Compare to Value or Compare to Field.",
						"type": "string"
					},
					{
						"name": "format",
						"in": "query",
						"description": "Return results in XML, JSON, or CSV",
						"type": "string",
						"format": "string"
					},
					{
						"name": "fundamentalsType",
						"in": "query",
						"description": "The type of fundamentals the screen is based on, includes: Valuation, Growth, Dividends, Key Ratios, Income Statement and Balance Sheet.",
						"type": "string"
					},
					{
						"name": "indexGroupType",
						"in": "query",
						"description": "Major market indices a stock is part of.",
						"type": "string"
					},
					{
						"name": "opinionType",
						"in": "query",
						"description": "The opinion type the screen is based on, includes: Overall Strength, Overall Direction, Overall Averages and Indicators.",
						"type": "string"
					},
					{
						"name": "profileType",
						"in": "query",
						"description": "The profile type the screen is based on, includes: Sector, Name and Exchanges.",
						"type": "string"
					},
					{
						"name": "quoteType",
						"in": "query",
						"description": "The type of quote the screen is based on, includes: Price, Change, Liquidity and Highs/Lows.",
						"type": "string"
					},
					{
						"name": "screenType",
						"in": "query",
						"description": "The criteria the screen is based on, includes: Quote, Fundamentals, Technicals, Profile, Opinion or Index Groups.",
						"type": "string"
					},
					{
						"name": "technicalsType",
						"in": "query",
						"description": "The type of technicals the screen is based on, includes: Moving Average, Average Volume, Raw Stochastic, Stochastic %K, Stochastic %D, True Range, Relative Strength, Percent R, Historic Volatility, MACD Oscillator, Weighted Alpha and Standard Deviation.",
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [
					"financial"
				]
			}
		},
		"getSECFilings.{format}": {
			"get": {
				"summary": "SEC Filings",
				"description": "The getSECFilings API provides access to quarterly, annual and other required regulatory/SEC filings for U.S. publically traded companies based on symbol.",
				"operationId": "",
				"parameters": [
					{
						"name": "filingType",
						"in": "query",
						"description": "The type of SEC filing. Includes: All Filings, except stock transaction reports (AllEx), All, including stock transaction reports (All), Annual 10-K Reports (10k) and Quarterly 10-Q Reports (10q). n                            (enum)A type which includes a list of valid possible values.n                                n                                                                Valid values: AllEx, All, 10k, 10qn                                n                                nttttttt",
						"type": "string"
					},
					{
						"name": "format",
						"in": "query",
						"description": "Return results in XML, JSON, or CSV",
						"type": "string",
						"format": "string"
					},
					{
						"name": "maxRecords",
						"in": "query",
						"description": "The maximum number of records to show in the return. n                            (int)A numeric type defining a whole number. (example: 2)n                                n                                n                                                                Default: 20n                                nttttttttExample: 10",
						"type": "string"
					},
					{
						"name": "startDate",
						"in": "query",
						"description": "The beginning date for the query. n                            (date)A date in the format of YYYY-MM-DD.n                                n                                n                                nttttttttExample: 2014-11-03",
						"type": "string"
					},
					{
						"name": "symbols",
						"in": "query",
						"description": "A symbol or code that identifies an financial instrument.  Multiple symbols separated by a comma may be used. n                            (list)A comma or semi-colon delimited string.n                                n                                n                                nttttttttExample: AAPL,IBM",
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [
					"financial"
				]
			}
		},
		"getSectors.{format}": {
			"get": {
				"summary": "Sectors",
				"description": "The getChart API is used to request a custom chart image with variables such as chart type, size, period and technical indicators, based on a symbol.",
				"operationId": "",
				"parameters": [
					{
						"name": "format",
						"in": "query",
						"description": "Return results in XML, JSON, or CSV",
						"type": "string",
						"format": "string"
					},
					{
						"name": "height",
						"in": "query",
						"description": "The height of the chart, in pixels, with no indicators in pixels.",
						"type": "integer",
						"format": "string"
					},
					{
						"name": "indicators",
						"in": "query",
						"description": "A semi-colon delimited list of indicators. ",
						"type": "string",
						"format": "string"
					},
					{
						"name": "period",
						"in": "query",
						"description": "The period to display the chart.",
						"type": "string",
						"format": "string"
					},
					{
						"name": "symbols",
						"in": "query",
						"description": "A symbol or code that identifies a financial instrument.",
						"type": "string",
						"format": "string"
					},
					{
						"name": "type",
						"in": "query",
						"description": "The type of chart, includes: bar chart (BAR), candlestick (CANDLE), area (AREA) or line (LINE) chart.",
						"type": "string",
						"format": "string"
					},
					{
						"name": "volume",
						"in": "query",
						"description": "An option to display the volume indicator on the chart.",
						"type": "boolean",
						"format": "string"
					},
					{
						"name": "width",
						"in": "query",
						"description": "The width of chart in pixels.",
						"type": "string",
						"format": "string"
					}
				],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [
					"financial"
				]
			}
		},
		"getSignal.{format}": {
			"get": {
				"summary": "Signal",
				"description": "The getSignal API provides the Barchart Technical Opinion / Signal (buy, sell or hold) based on a variety of short, medium and long-term technical indicators based on a symbol.",
				"operationId": "",
				"parameters": [
					{
						"name": "fields",
						"in": "query",
						"description": "The fields requested. n                            (list)A comma or semi-colon delimited string.n                                n                                n                                nttttttttExample: trendspotterOpinion,adi7DayOpinion,parabolic50DaySignal",
						"type": "string"
					},
					{
						"name": "format",
						"in": "query",
						"description": "Return results in XML, JSON, or CSV",
						"type": "string",
						"format": "string"
					},
					{
						"name": "maxRecords",
						"in": "query",
						"description": "The maximum number of records to show in the return. n                            (int)A numeric type defining a whole number. (example: 2)n                                n                                n                                                                Default: 30n                                nttttttttExample: 10",
						"type": "string"
					},
					{
						"name": "symbols",
						"in": "query",
						"description": "A symbol or code that identifies a financial instrument.  Multiple symbols separated by a comma may be used.  For futures, notation such as &lt;root_symbol*0&gt; for the active contract or &lt;root_symbol*1&gt; for the first nearby is supported, as is &lt;root_symbol^F&gt; for all futures contracts for a given root symbol, as is &lt;root_symbol^O&gt; for all options contracts for a given underlying futures symbol. n                            (list)A comma or semi-colon delimited string.n       ",
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [
					"financial"
				]
			}
		},
		"getSpecialOptions.{format}": {
			"get": {
				"summary": "Special Options",
				"description": "The getSpecialOptions API provides Intraday data for short-dated, and weekly futures options.",
				"operationId": "",
				"parameters": [
					{
						"name": "contract",
						"in": "query",
						"description": "A symbol or code that identifies an options contract.",
						"type": "string",
						"format": "string"
					},
					{
						"name": "format",
						"in": "query",
						"description": "Return results in XML, JSON, or CSV",
						"type": "string",
						"format": "string"
					},
					{
						"name": "mode",
						"in": "query",
						"description": "Delayed (I) or end-of-day (D).",
						"type": "string",
						"format": "string"
					},
					{
						"name": "premiumRange",
						"in": "query",
						"description": "Optionally filter the results by premium with a price range.",
						"type": "string",
						"format": "string"
					},
					{
						"name": "root",
						"in": "query",
						"description": "A symbol or code that identifies a option root.",
						"type": "string",
						"format": "string"
					},
					{
						"name": "type",
						"in": "query",
						"description": "The type of option desired, Call or Put.",
						"type": "string",
						"format": "string"
					}
				],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [
					"financial"
				]
			}
		},
		"getTechnicals.{format}": {
			"get": {
				"summary": "Technicals",
				"description": "The getTechnicals API provides technical data and statistics for equities, indices, futures, forex and funds based on symbol. Fields include moving averages, percent changes over different time periods and stochastics.",
				"operationId": "",
				"parameters": [
					{
						"name": "fields",
						"in": "query",
						"description": "The fields requested.",
						"type": "string",
						"format": "string"
					},
					{
						"name": "format",
						"in": "query",
						"description": "Return results in XML, JSON, or CSV",
						"type": "string",
						"format": "string"
					},
					{
						"name": "symbols",
						"in": "query",
						"description": "A symbol or code that identifies a financial instrument.",
						"type": "string",
						"format": "string"
					}
				],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [
					"financial"
				]
			}
		},
		"getUSDAGrainPrices.{format}": {
			"get": {
				"summary": "USDA Grain Prices",
				"description": "The getUSDAGrainPrices API provides daily cash grain bids and prices for locations throughout the United States covering corn, wheat, oats and soybean markets.",
				"operationId": "",
				"parameters": [
					{
						"name": "bidTypes",
						"in": "query",
						"description": "The type of bid. Includes: Export (E), Processor (P), River (R) and Terminal (T). n                            (list-enum)A comma or semi-colon delimited string that must match a list of valid possible values.n                                n                                                                Valid values: E, P, R, Tn                                n                                nttttttttExample: E",
						"type": "string"
					},
					{
						"name": "commodityTypes",
						"in": "query",
						"description": "The type of commodity. Includes: Corn (C), Corn Crude Oil (CCO), Crude Soybean Oil (CSO), DNS/NS Wheat 14% (WDN), HRW Wheat (HRW), HRW Wheat 11.5% (HRW11), Oats (O), Ord HRW Wheat (HRWORD), Soybean Meal 48% (SM), Soybeans (S), SRW Wheat (SRW), SWW Wheat (SWW). n                            (list-enum)A comma or semi-colon delimited string that must match a list of valid possible values.n                                n                                                      ",
						"type": "string"
					},
					{
						"name": "format",
						"in": "query",
						"description": "Return results in XML, JSON, or CSV",
						"type": "string",
						"format": "string"
					},
					{
						"name": "locations",
						"in": "query",
						"description": "The location of the handling facility. Includes: Atlantic (A), Central Illinois (CIL), Chicago (CHGO), Cincinnati Ohio River (CIN), Gulf (GULF), Kansas City (KC), Memphis Mississippi River (MEM), Minneapolis (MIN), Mt. Vernon Ohio River (MTV), N. Peoria Illinois River (NPEO), Omaha (OMA), Portland (PORT), S. Iowa Mississippi River (SIOWA), S. Peoria Illinois River (SPEO), St. Louis Mississippi River (SLOU), Toledo Non-River (TLNON), Toldeo On-River (TLON). n    ",
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [
					"financial"
				]
			}
		},
		"getWeather.{format}": {
			"get": {
				"summary": "Weather",
				"description": "The getWeather API provides current conditions, forecasts, and maps based on zip code.",
				"operationId": "",
				"parameters": [
					{
						"name": "fields",
						"in": "query",
						"description": "The fields requested. n                            (list)A comma or semi-colon delimited string.n                                n                                n                                nttttttttExample: windDirection,windSpeed,humidity,dewpoint,forcastedDay,forcastedPrecipitation",
						"type": "string"
					},
					{
						"name": "format",
						"in": "query",
						"description": "Return results in XML, JSON, or CSV",
						"type": "string",
						"format": "string"
					},
					{
						"name": "mapHeight",
						"in": "query",
						"description": "The height of the map. n                            (int)A numeric type defining a whole number. (example: 2)n                                n                                n                                                                Default: 440n                                nttttttttExample: 220",
						"type": "string"
					},
					{
						"name": "mapRegion",
						"in": "query",
						"description": "The region of map required. n                            (enum)A type which includes a list of valid possible values.n                                n                                                                Valid values: centralPlains, dakotas, californiaArizona, colorado, deepSouth, delta, farWest, florida, greatBasin, greatLakes, midAtlantic, montana, northEast, ohioValley, pacificNorthwest, rockyMountains, southAtlantic, southPlains, southTexas, southWestn                             ",
						"type": "string"
					},
					{
						"name": "mapType",
						"in": "query",
						"description": "The type of map required. n                            (enum)A type which includes a list of valid possible values.n                                n                                                                Valid values: localRadarAnimation, usRadarSatellite, usRadarSatelliteAnimation, todaysWeatherMap, currentWindConditions, todaysPrecipitationAccumulation, dailyPrecipitation, usSoilMoisture, usCurrentTemperaturesn                                n                                nttttttttE",
						"type": "string"
					},
					{
						"name": "mapWidth",
						"in": "query",
						"description": "The width of the map. n                            (int)A numeric type defining a whole number. (example: 2)n                                n                                n                                                                Default: 560n                                nttttttttExample: 255",
						"type": "string"
					},
					{
						"name": "weatherType",
						"in": "query",
						"description": "The type of weather requested. Includes: Current Conditions (CC) and Forecast (F). n                            (enum)A type which includes a list of valid possible values.n                                n                                                                Valid values: CC, F, MAPn                                n                                                                Default: CCn                                nttttttttExample: CC",
						"type": "string"
					},
					{
						"name": "zipCode",
						"in": "query",
						"description": "The zip code of the location as a 5-digit numeric value. n                            (string)A sequence of characters. (example: GOOG)n                                n                                n                                nttttttttExample: 60606",
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [
					"financial"
				]
			}
		}
	}
}