{
	"swagger": "2.0",
	"info": {
		"title": "Twitter API",
		"description": "The REST APIs provides programmatic access to read and write Twitter data.",
		"termsOfService": "https://dev.twitter.com/overview/terms",
		"version": "v1.1"
	},
	"host": "api.twitter.com",
	"basePath": "/1.1/",
	"schemes": [
		"http"
	],
	"produces": [
		"application/json"
	],
	"consumes": [
		"application/json"
	],
	"paths": {
		"account/remove_profile_banner": {
			"post": {
				"summary": "account/remove_profile_banner",
				"description": "Removes the uploaded profile banner for the authenticating user. Returns HTTP 200 upon success.",
				"operationId": "accountremove-profile-banner",
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [
					""
				]
			}
		},
		"account/settings": {
			"post": {
				"summary": "account/settings",
				"description": "Updates the authenticating user&#8217;s settings.",
				"operationId": "accountsettings",
				"parameters": [
					{
						"name": "end_sleep_time",
						"in": "query",
						"description": "",
						"type": "string"
					},
					{
						"name": "lang",
						"in": "query",
						"description": "",
						"type": "string"
					},
					{
						"name": "sleep_time_enabled",
						"in": "query",
						"description": "",
						"type": "string"
					},
					{
						"name": "start_sleep_time",
						"in": "query",
						"description": "",
						"type": "string"
					},
					{
						"name": "time_zone",
						"in": "query",
						"description": "",
						"type": "string"
					},
					{
						"name": "trend_location_woeid",
						"in": "query",
						"description": "",
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [
					""
				]
			}
		},
		"account/update_delivery_device": {
			"post": {
				"summary": "account/update_delivery_device",
				"description": "Sets which device Twitter delivers updates to for the authenticating user. Sending none as the device parameter will disable SMS updates.",
				"operationId": "accountupdate-delivery-device",
				"parameters": [
					{
						"name": "",
						"in": "query",
						"description": "",
						"type": "string"
					},
					{
						"name": "include_entities",
						"in": "query",
						"description": "",
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [
					""
				]
			}
		},
		"account/update_profile": {
			"post": {
				"summary": "account/update_profile",
				"description": "Sets some values that users are able to set under the &#8220;Account&#8221; tab of their settings page. Only the parameters specified will be updated.",
				"operationId": "accountupdate-profile",
				"parameters": [
					{
						"name": "description",
						"in": "query",
						"description": "",
						"type": "string"
					},
					{
						"name": "include_entities",
						"in": "query",
						"description": "",
						"type": "string"
					},
					{
						"name": "location",
						"in": "query",
						"description": "",
						"type": "string"
					},
					{
						"name": "name",
						"in": "query",
						"description": "",
						"type": "string"
					},
					{
						"name": "profile_link_color",
						"in": "query",
						"description": "",
						"type": "string"
					},
					{
						"name": "skip_status",
						"in": "query",
						"description": "",
						"type": "string"
					},
					{
						"name": "url",
						"in": "query",
						"description": "",
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [
					""
				]
			}
		},
		"account/update_profile_background_image": {
			"post": {
				"summary": "account/update_profile_background_image",
				"description": "Updates the authenticating user&#8217;s profile background image. This method can also be used to enable or disable the profile background image.Although each parameter is marked as optional, at least one of image, tile or use must be provided when making this request.",
				"operationId": "accountupdate-profile-background-image",
				"parameters": [
					{
						"name": "image",
						"in": "query",
						"description": "",
						"type": "string"
					},
					{
						"name": "include_entities",
						"in": "query",
						"description": "",
						"type": "string"
					},
					{
						"name": "skip_status",
						"in": "query",
						"description": "",
						"type": "string"
					},
					{
						"name": "tile",
						"in": "query",
						"description": "",
						"type": "string"
					},
					{
						"name": "use",
						"in": "query",
						"description": "",
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [
					""
				]
			}
		},
		"account/update_profile_banner": {
			"post": {
				"summary": "account/update_profile_banner",
				"description": "Uploads a profile banner on behalf of the authenticating user. For best results, upload an profile_banner_url node in their Users objects. More information about sizing variations can be found in User Profile Images and Banners and GET users / profile_banner.Profile banner images are processed asynchronously. The profile_banner_url and its variant sizes will not necessary be available directly after upload.HTTP Response CodesCode(s)Meaning200, 201, 202Profile banner image succesfully uploaded400Either an image was not provided or the image data could not be processed422The image could not be resized or is too large.",
				"operationId": "accountupdate-profile-banner",
				"parameters": [
					{
						"name": "",
						"in": "query",
						"description": "",
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [
					""
				]
			}
		},
		"account/update_profile_colors": {
			"post": {
				"summary": "account/update_profile_colors",
				"description": "This endpoint has been deprecated. Most of the values below may no longer be customised. Please refer to account/update_profile to update profile link colors.Sets one or more hex values that control the color scheme of the authenticating user&#8217;s profile page on twitter.com. Each parameter&#8217;s value must be a valid hexadecimal value, and may be either three or six characters (ex: #fff or #ffffff).",
				"operationId": "accountupdate-profile-colors",
				"parameters": [
					{
						"name": "include_entities",
						"in": "query",
						"description": "",
						"type": "string"
					},
					{
						"name": "profile_background_color",
						"in": "query",
						"description": "",
						"type": "string"
					},
					{
						"name": "profile_link_color",
						"in": "query",
						"description": "",
						"type": "string"
					},
					{
						"name": "profile_sidebar_border_color",
						"in": "query",
						"description": "",
						"type": "string"
					},
					{
						"name": "profile_sidebar_fill_color",
						"in": "query",
						"description": "",
						"type": "string"
					},
					{
						"name": "profile_text_color",
						"in": "query",
						"description": "",
						"type": "string"
					},
					{
						"name": "skip_status",
						"in": "query",
						"description": "",
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [
					""
				]
			}
		},
		"account/update_profile_image": {
			"post": {
				"summary": "account/update_profile_image",
				"description": "Updates the authenticating user&#8217;s profile image. Note that this method expects raw multipart data, not a URL to an image.This method asynchronously processes the uploaded file before updating the user&#8217;s profile image URL. You can either update your local cache the next time you request the user&#8217;s information, or, at least 5 seconds after uploading the image, ask for the updated URL using GET users / show.",
				"operationId": "accountupdate-profile-image",
				"parameters": [
					{
						"name": "",
						"in": "query",
						"description": "",
						"type": "string"
					},
					{
						"name": "include_entities",
						"in": "query",
						"description": "",
						"type": "string"
					},
					{
						"name": "skip_status",
						"in": "query",
						"description": "",
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [
					""
				]
			}
		},
		"account/verify_credentials": {
			"get": {
				"summary": "account/verify_credentials",
				"description": "Returns an HTTP 200 OK response code and a representation of the requesting user if authentication was successful; returns a 401 status code and an error message if not. Use this method to test if supplied user credentials are valid.",
				"operationId": "accountverify-credentials",
				"parameters": [
					{
						"name": "include_entities",
						"in": "query",
						"description": "",
						"type": "string"
					},
					{
						"name": "skip_status",
						"in": "query",
						"description": "",
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [
					""
				]
			}
		},
		"application/rate_limit_status": {
			"get": {
				"summary": "application/rate_limit_status",
				"description": "Returns the current rate limits for methods belonging to the specified resource families.Each 1.1 API resource belongs to a &#8220;resource family&#8221; which is indicated in its method documentation. You can typically determine a method&#8217;s resource family from the first component of the path after the resource version.This method responds with a map of methods belonging to the families specified by the resources parameter, the current remaining uses for each of those resources within the current rate limiting window, and its expiration time in epoch time. It also includes a rate_limit_context field that indicates the current access token or application-only authentication context.You may also issue requests to this method without any parameters to receive a map of all rate limited GET methods. If your application only uses a few of methods, please explicitly provide a resources parameter with the specified resource families you work with.When using app-only auth, this method&#8217;s response indicates the app-only auth rate limiting context.Read more about API Rate Limiting and review the limits.",
				"operationId": "applicationrate-limit-status",
				"parameters": [
					{
						"name": "",
						"in": "query",
						"description": "",
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [
					""
				]
			}
		},
		"blocks/create": {
			"post": {
				"summary": "blocks/create",
				"description": "Blocks the specified user from following the authenticating user. In addition the blocked user will not show in the authenticating users mentions or timeline (unless retweeted by another user). If a follow or friend relationship exists it is destroyed.The URL pattern /version/block/create/:screen_name_or_user_id.format is still accepted but not recommended. As a sequence of numbers is a valid screen name we recommend using the screen_name or user_id parameter instead.",
				"operationId": "blockscreate",
				"parameters": [
					{
						"name": "include_entities",
						"in": "query",
						"description": "",
						"type": "string"
					},
					{
						"name": "screen_name",
						"in": "query",
						"description": "",
						"type": "string"
					},
					{
						"name": "skip_status",
						"in": "query",
						"description": "",
						"type": "string"
					},
					{
						"name": "user_id",
						"in": "query",
						"description": "",
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [
					""
				]
			}
		},
		"blocks/destroy": {
			"post": {
				"summary": "blocks/destroy",
				"description": "Un-blocks the user specified in the ID parameter for the authenticating user. Returns the un-blocked user in the requested format when successful.  If relationships existed before the block was instated, they will not be restored.",
				"operationId": "blocksdestroy",
				"parameters": [
					{
						"name": "include_entities",
						"in": "query",
						"description": "",
						"type": "string"
					},
					{
						"name": "screen_name",
						"in": "query",
						"description": "",
						"type": "string"
					},
					{
						"name": "skip_status",
						"in": "query",
						"description": "",
						"type": "string"
					},
					{
						"name": "user_id",
						"in": "query",
						"description": "",
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [
					""
				]
			}
		},
		"blocks/ids": {
			"get": {
				"summary": "blocks/ids",
				"description": "Returns an array of numeric user ids the authenticating user is blocking.Important On October 15, 2012 this method will become cursored by default, altering the default response format. See Using cursors to navigate collections for more details on how cursoring works.",
				"operationId": "blocksids",
				"parameters": [
					{
						"name": "cursor",
						"in": "query",
						"description": "",
						"type": "string"
					},
					{
						"name": "stringify_ids",
						"in": "query",
						"description": "",
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [
					""
				]
			}
		},
		"blocks/list": {
			"get": {
				"summary": "blocks/list",
				"description": "Returns a collection of user objects that the authenticating user is blocking.Important On October 15, 2012 this method will become cursored by default, altering the default response format. See Using cursors to navigate collections for more details on how cursoring works.",
				"operationId": "blockslist",
				"parameters": [
					{
						"name": "cursor",
						"in": "query",
						"description": "",
						"type": "string"
					},
					{
						"name": "include_entities",
						"in": "query",
						"description": "",
						"type": "string"
					},
					{
						"name": "skip_status",
						"in": "query",
						"description": "",
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [
					""
				]
			}
		},
		"direct_messages": {
			"get": {
				"summary": "direct_messages",
				"description": "Returns the 20 most recent direct messages sent to the authenticating user. Includes detailed information about the sender and recipient user. You can request up to 200 direct messages per call, and only the most recent 200 DMs will be available using this endpoint.Important: This method requires an access token with RWD (read, write &amp; direct message) permissions. Consult The Application Permission Model for more information.",
				"operationId": "direct-messages",
				"parameters": [
					{
						"name": "count",
						"in": "query",
						"description": "",
						"type": "string"
					},
					{
						"name": "include_entities",
						"in": "query",
						"description": "",
						"type": "string"
					},
					{
						"name": "max_id",
						"in": "query",
						"description": "",
						"type": "string"
					},
					{
						"name": "since_id",
						"in": "query",
						"description": "",
						"type": "string"
					},
					{
						"name": "skip_status",
						"in": "query",
						"description": "",
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [
					""
				]
			}
		},
		"direct_messages/destroy": {
			"post": {
				"summary": "direct_messages/destroy",
				"description": "Destroys the direct message specified in the required ID parameter. The authenticating user must be the recipient of the specified direct message.Important: This method requires an access token with RWD (read, write &amp; direct message) permissions. Consult The Application Permission Model for more information.",
				"operationId": "direct-messagesdestroy",
				"parameters": [
					{
						"name": "",
						"in": "query",
						"description": "",
						"type": "string"
					},
					{
						"name": "include_entities",
						"in": "query",
						"description": "",
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [
					""
				]
			}
		},
		"direct_messages/new": {
			"post": {
				"summary": "direct_messages/new",
				"description": "Sends a new direct message to the specified user from the authenticating user. Requires both the user and text parameters and must be a POST. Returns the sent message in the requested format if successful.",
				"operationId": "direct-messagesnew",
				"parameters": [
					{
						"name": "",
						"in": "query",
						"description": "",
						"type": "string"
					},
					{
						"name": "screen_name",
						"in": "query",
						"description": "",
						"type": "string"
					},
					{
						"name": "user_id",
						"in": "query",
						"description": "",
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [
					""
				]
			}
		},
		"direct_messages/sent": {
			"get": {
				"summary": "direct_messages/sent",
				"description": "Returns the 20 most recent direct messages sent by the authenticating user. Includes detailed information about the sender and recipient user. You can request up to 200 direct messages per call, up to a maximum of 800 outgoing DMs.Important: This method requires an access token with RWD (read, write &amp; direct message) permissions. Consult The Application Permission Model for more information.",
				"operationId": "direct-messagessent",
				"parameters": [
					{
						"name": "count",
						"in": "query",
						"description": "",
						"type": "string"
					},
					{
						"name": "include_entities",
						"in": "query",
						"description": "",
						"type": "string"
					},
					{
						"name": "max_id",
						"in": "query",
						"description": "",
						"type": "string"
					},
					{
						"name": "page",
						"in": "query",
						"description": "",
						"type": "string"
					},
					{
						"name": "since_id",
						"in": "query",
						"description": "",
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [
					""
				]
			}
		},
		"direct_messages/show": {
			"get": {
				"summary": "direct_messages/show",
				"description": "Returns a single direct message, specified by an id parameter. Like the /1.1/direct_messages.format request, this method will include the user objects of the sender and recipient. Important: This method requires an access token with RWD (read, write &amp; direct message) permissions. Consult The Application Permission Model for more information.",
				"operationId": "direct-messagesshow",
				"parameters": [
					{
						"name": "",
						"in": "query",
						"description": "",
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [
					""
				]
			}
		},
		"favorites/create": {
			"post": {
				"summary": "favorites/create",
				"description": "Favorites the status specified in the ID parameter as the authenticating user. Returns the favorite status when successful.This process invoked by this method is asynchronous. The immediately returned status may not indicate the resultant favorited status of the tweet. A 200 OK response from this method will indicate whether the intended action was successful or not.",
				"operationId": "favoritescreate",
				"parameters": [
					{
						"name": "",
						"in": "query",
						"description": "",
						"type": "string"
					},
					{
						"name": "include_entities",
						"in": "query",
						"description": "",
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [
					""
				]
			}
		},
		"favorites/destroy": {
			"post": {
				"summary": "favorites/destroy",
				"description": "Un-favorites the status specified in the ID parameter as the authenticating user. Returns the un-favorited status in the requested format when successful.This process invoked by this method is asynchronous. The immediately returned status may not indicate the resultant favorited status of the tweet. A 200 OK response from this method will indicate whether the intended action was successful or not.",
				"operationId": "favoritesdestroy",
				"parameters": [
					{
						"name": "",
						"in": "query",
						"description": "",
						"type": "string"
					},
					{
						"name": "include_entities",
						"in": "query",
						"description": "",
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [
					""
				]
			}
		},
		"favorites/list": {
			"get": {
				"summary": "favorites/list",
				"description": "Returns the 20 most recent Tweets favorited by the authenticating or specified user.",
				"operationId": "favoriteslist",
				"parameters": [
					{
						"name": "",
						"in": "query",
						"description": "",
						"type": "string"
					},
					{
						"name": "count",
						"in": "query",
						"description": "",
						"type": "string"
					},
					{
						"name": "include_entities",
						"in": "query",
						"description": "",
						"type": "string"
					},
					{
						"name": "max_id",
						"in": "query",
						"description": "",
						"type": "string"
					},
					{
						"name": "since_id",
						"in": "query",
						"description": "",
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [
					""
				]
			}
		},
		"followers/ids": {
			"get": {
				"summary": "followers/ids",
				"description": "Returns a cursored collection of user IDs for every user following the specified user.At this time, results are ordered with the most recent following first u2014 however, this ordering is subject to unannounced change and eventual consistency issues. Results are given in groups of 5,000 user IDs and multiple &#8220;pages&#8221; of results can be navigated through using the next_cursor value in subsequent requests. See Using cursors to navigate collections for more information.This method is especially powerful when used in conjunction with GET users / lookup, a method that allows you to convert user IDs into full user objects in bulk.",
				"operationId": "followersids",
				"parameters": [
					{
						"name": "count",
						"in": "query",
						"description": "",
						"type": "string"
					},
					{
						"name": "cursor",
						"in": "query",
						"description": "",
						"type": "string"
					},
					{
						"name": "screen_name",
						"in": "query",
						"description": "",
						"type": "string"
					},
					{
						"name": "stringify_ids",
						"in": "query",
						"description": "",
						"type": "string"
					},
					{
						"name": "user_id",
						"in": "query",
						"description": "",
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [
					""
				]
			}
		},
		"followers/list": {
			"get": {
				"summary": "followers/list",
				"description": "Returns a cursored collection of user objects for users following the specified user.At this time, results are ordered with the most recent following first u2014 however, this ordering is subject to unannounced change and eventual consistency issues. Results are given in groups of 20 users and multiple &#8220;pages&#8221; of results can be navigated through using the next_cursor value in subsequent requests. See Using cursors to navigate collections for more information.",
				"operationId": "followerslist",
				"parameters": [
					{
						"name": "count",
						"in": "query",
						"description": "",
						"type": "string"
					},
					{
						"name": "cursor",
						"in": "query",
						"description": "",
						"type": "string"
					},
					{
						"name": "include_user_entities",
						"in": "query",
						"description": "",
						"type": "string"
					},
					{
						"name": "screen_name",
						"in": "query",
						"description": "",
						"type": "string"
					},
					{
						"name": "skip_status",
						"in": "query",
						"description": "",
						"type": "string"
					},
					{
						"name": "user_id",
						"in": "query",
						"description": "",
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [
					""
				]
			}
		},
		"friends/ids": {
			"get": {
				"summary": "friends/ids",
				"description": "Returns a cursored collection of user IDs for every user the specified user is following (otherwise known as their &#8220;friends&#8221;).At this time, results are ordered with the most recent following first u2014 however, this ordering is subject to unannounced change and eventual consistency issues. Results are given in groups of 5,000 user IDs and multiple &#8220;pages&#8221; of results can be navigated through using the next_cursor value in subsequent requests. See Using cursors to navigate collections for more information.This method is especially powerful when used in conjunction with GET users / lookup, a method that allows you to convert user IDs into full user objects in bulk.",
				"operationId": "friendsids",
				"parameters": [
					{
						"name": "count",
						"in": "query",
						"description": "",
						"type": "string"
					},
					{
						"name": "cursor",
						"in": "query",
						"description": "",
						"type": "string"
					},
					{
						"name": "screen_name",
						"in": "query",
						"description": "",
						"type": "string"
					},
					{
						"name": "stringify_ids",
						"in": "query",
						"description": "",
						"type": "string"
					},
					{
						"name": "user_id",
						"in": "query",
						"description": "",
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [
					""
				]
			}
		},
		"friends/list": {
			"get": {
				"summary": "friends/list",
				"description": "Returns a cursored collection of user objects for every user the specified user is following (otherwise known as their &#8220;friends&#8221;).At this time, results are ordered with the most recent following first u2014 however, this ordering is subject to unannounced change and eventual consistency issues. Results are given in groups of 20 users and multiple &#8220;pages&#8221; of results can be navigated through using the next_cursor value in subsequent requests. See Using cursors to navigate collections for more information.",
				"operationId": "friendslist",
				"parameters": [
					{
						"name": "count",
						"in": "query",
						"description": "",
						"type": "string"
					},
					{
						"name": "cursor",
						"in": "query",
						"description": "",
						"type": "string"
					},
					{
						"name": "include_user_entities",
						"in": "query",
						"description": "",
						"type": "string"
					},
					{
						"name": "screen_name",
						"in": "query",
						"description": "",
						"type": "string"
					},
					{
						"name": "skip_status",
						"in": "query",
						"description": "",
						"type": "string"
					},
					{
						"name": "user_id",
						"in": "query",
						"description": "",
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [
					""
				]
			}
		},
		"friendships/create": {
			"post": {
				"summary": "friendships/create",
				"description": "Allows the authenticating users to follow the user specified in the ID parameter.Returns the befriended user in the requested format when successful. Returns a string describing the failure condition when unsuccessful. If you are already friends with the user a HTTP 403 may be returned, though for performance reasons you may get a 200 OK message even if the friendship already exists.Actions taken in this method are asynchronous and changes will be eventually consistent.",
				"operationId": "friendshipscreate",
				"parameters": [
					{
						"name": "follow",
						"in": "query",
						"description": "",
						"type": "string"
					},
					{
						"name": "screen_name",
						"in": "query",
						"description": "",
						"type": "string"
					},
					{
						"name": "user_id",
						"in": "query",
						"description": "",
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [
					""
				]
			}
		},
		"friendships/destroy": {
			"post": {
				"summary": "friendships/destroy",
				"description": "Allows the authenticating user to unfollow the user specified in the ID parameter.Returns the unfollowed user in the requested format when successful. Returns a string describing the failure condition when unsuccessful.Actions taken in this method are asynchronous and changes will be eventually consistent.",
				"operationId": "friendshipsdestroy",
				"parameters": [
					{
						"name": "screen_name",
						"in": "query",
						"description": "",
						"type": "string"
					},
					{
						"name": "user_id",
						"in": "query",
						"description": "",
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [
					""
				]
			}
		},
		"friendships/incoming": {
			"get": {
				"summary": "friendships/incoming",
				"description": "Returns a collection of numeric IDs for every user who has a pending request to follow the authenticating user.",
				"operationId": "friendshipsincoming",
				"parameters": [
					{
						"name": "cursor",
						"in": "query",
						"description": "",
						"type": "string"
					},
					{
						"name": "stringify_ids",
						"in": "query",
						"description": "",
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [
					""
				]
			}
		},
		"friendships/lookup": {
			"get": {
				"summary": "friendships/lookup",
				"description": "Returns the relationships of the authenticating user to the comma-separated list of up to 100 screen_names or user_ids provided. Values for connections can be: following, following_requested, followed_by, none, blocking, muting.",
				"operationId": "friendshipslookup",
				"parameters": [
					{
						"name": "screen_name",
						"in": "query",
						"description": "",
						"type": "string"
					},
					{
						"name": "user_id",
						"in": "query",
						"description": "",
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [
					""
				]
			}
		},
		"friendships/no_retweets/ids": {
			"get": {
				"summary": "friendships/no_retweets/ids",
				"description": "Returns a collection of user_ids that the currently authenticated user does not want to receive retweets from.Use POST friendships / update to set the &#8220;no retweets&#8221; status for a given user account on behalf of the current user.",
				"operationId": "friendshipsno-retweetsids",
				"parameters": [
					{
						"name": "stringify_ids",
						"in": "query",
						"description": "",
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [
					""
				]
			}
		},
		"friendships/outgoing": {
			"get": {
				"summary": "friendships/outgoing",
				"description": "Returns a collection of numeric IDs for every protected user for whom the authenticating user has a pending follow request.",
				"operationId": "friendshipsoutgoing",
				"parameters": [
					{
						"name": "cursor",
						"in": "query",
						"description": "",
						"type": "string"
					},
					{
						"name": "stringify_ids",
						"in": "query",
						"description": "",
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [
					""
				]
			}
		},
		"friendships/show": {
			"get": {
				"summary": "friendships/show",
				"description": "Returns detailed information about the relationship between two arbitrary users.",
				"operationId": "friendshipsshow",
				"parameters": [
					{
						"name": "source_id",
						"in": "query",
						"description": "",
						"type": "string"
					},
					{
						"name": "source_screen_name",
						"in": "query",
						"description": "",
						"type": "string"
					},
					{
						"name": "target_id",
						"in": "query",
						"description": "",
						"type": "string"
					},
					{
						"name": "target_screen_name",
						"in": "query",
						"description": "",
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [
					""
				]
			}
		},
		"friendships/update": {
			"post": {
				"summary": "friendships/update",
				"description": "Allows one to enable or disable retweets and device notifications from the specified user.",
				"operationId": "friendshipsupdate",
				"parameters": [
					{
						"name": "device",
						"in": "query",
						"description": "",
						"type": "string"
					},
					{
						"name": "retweets",
						"in": "query",
						"description": "",
						"type": "string"
					},
					{
						"name": "screen_name",
						"in": "query",
						"description": "",
						"type": "string"
					},
					{
						"name": "user_id",
						"in": "query",
						"description": "",
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [
					""
				]
			}
		},
		"geo/id/:place_id": {
			"get": {
				"summary": "geo/id/:place_id",
				"description": "Returns all the information about a known place.",
				"operationId": "geoidplace-id",
				"parameters": [
					{
						"name": "",
						"in": "query",
						"description": "",
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [
					""
				]
			}
		},
		"geo/place": {
			"post": {
				"summary": "geo/place",
				"description": "As of December 2nd, 2013, this endpoint is deprecated and retired and no longer functions. Place creation was used infrequently by third party applications and is generally no longer supported on Twitter. Requests will return with status 410 (Gone) with error code 251.Created a new place object at the given latitude and longitude.Before creating a place you needed to query GET geo/similar_places with the latitude, longitude and name of the place you wished to create. The query will return an array of places which are similar to the one you wish to create, and a token. If the place you wished to create wasn&#8217;t in the returned array you could use the token with this method to create a new one.Learn more about Finding Tweets about Places.",
				"operationId": "geoplace",
				"parameters": [
					{
						"name": "",
						"in": "query",
						"description": "",
						"type": "string"
					},
					{
						"name": "attribute:street_address",
						"in": "query",
						"description": "",
						"type": "string"
					},
					{
						"name": "callback",
						"in": "query",
						"description": "",
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [
					""
				]
			}
		},
		"geo/reverse_geocode": {
			"get": {
				"summary": "geo/reverse_geocode",
				"description": "Given a latitude and a longitude, searches for up to 20 places that can be used as a place_id when updating a status.This request is an informative call and will deliver generalized results about geography.",
				"operationId": "georeverse-geocode",
				"parameters": [
					{
						"name": "",
						"in": "query",
						"description": "",
						"type": "string"
					},
					{
						"name": "accuracy",
						"in": "query",
						"description": "",
						"type": "string"
					},
					{
						"name": "callback",
						"in": "query",
						"description": "",
						"type": "string"
					},
					{
						"name": "granularity",
						"in": "query",
						"description": "",
						"type": "string"
					},
					{
						"name": "max_results",
						"in": "query",
						"description": "",
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [
					""
				]
			}
		},
		"geo/search": {
			"get": {
				"summary": "geo/search",
				"description": "Search for places that can be attached to a statuses/update. Given a latitude and a longitude pair, an IP address, or a name, this request will return a list of all the valid places that can be used as the place_id when updating a status.Conceptually, a query can be made from the user&#8217;s location, retrieve a list of places, have the user validate the location he or she is at, and then send the ID of this location with a call to POST statuses/update.This is the recommended method to use find places that can be attached to statuses/update.  Unlike GET geo/reverse_geocode which provides raw data access, this endpoint can potentially re-order places with regards to the user who is authenticated. This approach is also preferred for interactive place matching with the user.Some parameters in this method are only required based on the existence of other parameters. For instance, &#8220;lat&#8221; is required if &#8220;long&#8221; is provided, and vice-versa. Authentication is recommended, but not required with this method.",
				"operationId": "geosearch",
				"parameters": [
					{
						"name": "accuracy",
						"in": "query",
						"description": "",
						"type": "string"
					},
					{
						"name": "attribute:street_address",
						"in": "query",
						"description": "",
						"type": "string"
					},
					{
						"name": "callback",
						"in": "query",
						"description": "",
						"type": "string"
					},
					{
						"name": "contained_within",
						"in": "query",
						"description": "",
						"type": "string"
					},
					{
						"name": "granularity",
						"in": "query",
						"description": "",
						"type": "string"
					},
					{
						"name": "ip",
						"in": "query",
						"description": "",
						"type": "string"
					},
					{
						"name": "lat",
						"in": "query",
						"description": "",
						"type": "string"
					},
					{
						"name": "long",
						"in": "query",
						"description": "",
						"type": "string"
					},
					{
						"name": "max_results",
						"in": "query",
						"description": "",
						"type": "string"
					},
					{
						"name": "query",
						"in": "query",
						"description": "",
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [
					""
				]
			}
		},
		"help/configuration": {
			"get": {
				"summary": "help/configuration",
				"description": "Returns the current configuration used by Twitter including twitter.com slugs which are not usernames, maximum photo resolutions, and t.co URL lengths.It is recommended applications request this endpoint when they are loaded, but no more than once a day.",
				"operationId": "helpconfiguration",
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [
					""
				]
			}
		},
		"help/languages": {
			"get": {
				"summary": "help/languages",
				"description": "Returns the list of languages supported by Twitter along with the language code supported by Twitter.The language code may be formatted as ISO 639-1 alpha-2 (en), ISO 639-3 alpha-3 (msa), or ISO 639-1 alpha-2 combined with an ISO 3166-1 alpha-2 localization (zh-tw).",
				"operationId": "helplanguages",
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [
					""
				]
			}
		},
		"help/privacy": {
			"get": {
				"summary": "help/privacy",
				"description": "Returns Twitter&#8217;s Privacy Policy.",
				"operationId": "helpprivacy",
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [
					""
				]
			}
		},
		"help/tos": {
			"get": {
				"summary": "help/tos",
				"description": "Returns the Twitter Terms of Service. Note: these are not the same as the Developer Policy.",
				"operationId": "helptos",
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [
					""
				]
			}
		},
		"lists/create": {
			"post": {
				"summary": "lists/create",
				"description": "Creates a new list for the authenticated user. Note that you can&#8217;t create more than 20 lists per account.",
				"operationId": "listscreate",
				"parameters": [
					{
						"name": "description",
						"in": "query",
						"description": "",
						"type": "string"
					},
					{
						"name": "mode",
						"in": "query",
						"description": "",
						"type": "string"
					},
					{
						"name": "name",
						"in": "query",
						"description": "",
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [
					""
				]
			}
		},
		"lists/destroy": {
			"post": {
				"summary": "lists/destroy",
				"description": "Deletes the specified list. The authenticated user must own the list to be able to destroy it.",
				"operationId": "listsdestroy",
				"parameters": [
					{
						"name": "list_id",
						"in": "query",
						"description": "",
						"type": "string"
					},
					{
						"name": "owner_id",
						"in": "query",
						"description": "",
						"type": "string"
					},
					{
						"name": "owner_screen_name",
						"in": "query",
						"description": "",
						"type": "string"
					},
					{
						"name": "slug",
						"in": "query",
						"description": "",
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [
					""
				]
			}
		},
		"lists/list": {
			"get": {
				"summary": "lists/list",
				"description": "Returns all lists the authenticating or specified user subscribes to, including their own. The user is specified using the user_id or screen_name parameters. If no user is given, the authenticating user is used.This method used to be GET lists in version 1.0 of the API and has been renamed for consistency with other call.A maximum of 100 results will be returned by this call.  Subscribed lists are returned first, followed by owned lists.  This means that if a user subscribes to 90 lists and owns 20 lists, this method returns 90 subscriptions and 10 owned lists.  The reverse method returns owned lists first, so with reverse=true, 20 owned lists and 80 subscriptions would be returned.  If your goal is to obtain every list a user owns or subscribes to, use GET lists / ownerships and/or GET lists / subscriptions instead.",
				"operationId": "listslist",
				"parameters": [
					{
						"name": "reverse",
						"in": "query",
						"description": "",
						"type": "string"
					},
					{
						"name": "screen_name",
						"in": "query",
						"description": "",
						"type": "string"
					},
					{
						"name": "user_id",
						"in": "query",
						"description": "",
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [
					""
				]
			}
		},
		"lists/members": {
			"get": {
				"summary": "lists/members",
				"description": "Returns the members of the specified list. Private list members will only be shown if the authenticated user owns the specified list.",
				"operationId": "listsmembers",
				"parameters": [
					{
						"name": "count",
						"in": "query",
						"description": "",
						"type": "string"
					},
					{
						"name": "cursor",
						"in": "query",
						"description": "",
						"type": "string"
					},
					{
						"name": "include_entities",
						"in": "query",
						"description": "",
						"type": "string"
					},
					{
						"name": "list_id",
						"in": "query",
						"description": "",
						"type": "string"
					},
					{
						"name": "owner_id",
						"in": "query",
						"description": "",
						"type": "string"
					},
					{
						"name": "owner_screen_name",
						"in": "query",
						"description": "",
						"type": "string"
					},
					{
						"name": "skip_status",
						"in": "query",
						"description": "",
						"type": "string"
					},
					{
						"name": "slug",
						"in": "query",
						"description": "",
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [
					""
				]
			}
		},
		"lists/members/create": {
			"post": {
				"summary": "lists/members/create",
				"description": "Add a member to a list. The authenticated user must own the list to be able to add members to it. Note that lists cannot have more than 5,000 members.",
				"operationId": "listsmemberscreate",
				"parameters": [
					{
						"name": "list_id",
						"in": "query",
						"description": "",
						"type": "string"
					},
					{
						"name": "owner_id",
						"in": "query",
						"description": "",
						"type": "string"
					},
					{
						"name": "owner_screen_name",
						"in": "query",
						"description": "",
						"type": "string"
					},
					{
						"name": "screen_name",
						"in": "query",
						"description": "",
						"type": "string"
					},
					{
						"name": "slug",
						"in": "query",
						"description": "",
						"type": "string"
					},
					{
						"name": "user_id",
						"in": "query",
						"description": "",
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [
					""
				]
			}
		},
		"lists/members/create_all": {
			"post": {
				"summary": "lists/members/create_all",
				"description": "Adds multiple members to a list, by specifying a comma-separated list of member ids or screen names. The authenticated user must own the list to be able to add members to it. Note that lists can&#8217;t have more than 5,000 members, and you are limited to adding up to 100 members to a list at a time with this method.Please note that there can be issues with lists that rapidly remove and add memberships. Take care when using these methods such that you are not too rapidly switching between removals and adds on the same list.",
				"operationId": "listsmemberscreate-all",
				"parameters": [
					{
						"name": "list_id",
						"in": "query",
						"description": "",
						"type": "string"
					},
					{
						"name": "owner_id",
						"in": "query",
						"description": "",
						"type": "string"
					},
					{
						"name": "owner_screen_name",
						"in": "query",
						"description": "",
						"type": "string"
					},
					{
						"name": "screen_name",
						"in": "query",
						"description": "",
						"type": "string"
					},
					{
						"name": "slug",
						"in": "query",
						"description": "",
						"type": "string"
					},
					{
						"name": "user_id",
						"in": "query",
						"description": "",
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [
					""
				]
			}
		},
		"lists/members/destroy": {
			"post": {
				"summary": "lists/members/destroy",
				"description": "Removes the specified member from the list. The authenticated user must be the list&#8217;s owner to remove members from the list.",
				"operationId": "listsmembersdestroy",
				"parameters": [
					{
						"name": "list_id",
						"in": "query",
						"description": "",
						"type": "string"
					},
					{
						"name": "owner_id",
						"in": "query",
						"description": "",
						"type": "string"
					},
					{
						"name": "owner_screen_name",
						"in": "query",
						"description": "",
						"type": "string"
					},
					{
						"name": "screen_name",
						"in": "query",
						"description": "",
						"type": "string"
					},
					{
						"name": "slug",
						"in": "query",
						"description": "",
						"type": "string"
					},
					{
						"name": "user_id",
						"in": "query",
						"description": "",
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [
					""
				]
			}
		},
		"lists/members/destroy_all": {
			"post": {
				"summary": "lists/members/destroy_all",
				"description": "Removes multiple members from a list, by specifying a comma-separated list of member ids or screen names. The authenticated user must own the list to be able to remove members from it. Note that lists can&#8217;t have more than 500 members, and you are limited to removing up to 100 members to a list at a time with this method.Please note that there can be issues with lists that rapidly remove and add memberships. Take care when using these methods such that you are not too rapidly switching between removals and adds on the same list.",
				"operationId": "listsmembersdestroy-all",
				"parameters": [
					{
						"name": "list_id",
						"in": "query",
						"description": "",
						"type": "string"
					},
					{
						"name": "owner_id",
						"in": "query",
						"description": "",
						"type": "string"
					},
					{
						"name": "owner_screen_name",
						"in": "query",
						"description": "",
						"type": "string"
					},
					{
						"name": "screen_name",
						"in": "query",
						"description": "",
						"type": "string"
					},
					{
						"name": "slug",
						"in": "query",
						"description": "",
						"type": "string"
					},
					{
						"name": "user_id",
						"in": "query",
						"description": "",
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [
					""
				]
			}
		},
		"lists/members/show": {
			"get": {
				"summary": "lists/members/show",
				"description": "Check if the specified user is a member of the specified list.",
				"operationId": "listsmembersshow",
				"parameters": [
					{
						"name": "include_entities",
						"in": "query",
						"description": "",
						"type": "string"
					},
					{
						"name": "list_id",
						"in": "query",
						"description": "",
						"type": "string"
					},
					{
						"name": "owner_id",
						"in": "query",
						"description": "",
						"type": "string"
					},
					{
						"name": "owner_screen_name",
						"in": "query",
						"description": "",
						"type": "string"
					},
					{
						"name": "screen_name",
						"in": "query",
						"description": "",
						"type": "string"
					},
					{
						"name": "skip_status",
						"in": "query",
						"description": "",
						"type": "string"
					},
					{
						"name": "slug",
						"in": "query",
						"description": "",
						"type": "string"
					},
					{
						"name": "user_id",
						"in": "query",
						"description": "",
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [
					""
				]
			}
		},
		"lists/memberships": {
			"get": {
				"summary": "lists/memberships",
				"description": "Returns the lists the specified user has been added to. If user_id or screen_name are not provided the memberships for the authenticating user are returned.",
				"operationId": "listsmemberships",
				"parameters": [
					{
						"name": "count",
						"in": "query",
						"description": "",
						"type": "string"
					},
					{
						"name": "cursor",
						"in": "query",
						"description": "",
						"type": "string"
					},
					{
						"name": "filter_to_owned_lists",
						"in": "query",
						"description": "",
						"type": "string"
					},
					{
						"name": "screen_name",
						"in": "query",
						"description": "",
						"type": "string"
					},
					{
						"name": "user_id",
						"in": "query",
						"description": "",
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [
					""
				]
			}
		},
		"lists/ownerships": {
			"get": {
				"summary": "lists/ownerships",
				"description": "Returns the lists owned by the specified Twitter user. Private lists will only be shown if the authenticated user is also the owner of the lists.",
				"operationId": "listsownerships",
				"parameters": [
					{
						"name": "count",
						"in": "query",
						"description": "",
						"type": "string"
					},
					{
						"name": "cursor",
						"in": "query",
						"description": "",
						"type": "string"
					},
					{
						"name": "screen_name",
						"in": "query",
						"description": "",
						"type": "string"
					},
					{
						"name": "user_id",
						"in": "query",
						"description": "",
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [
					""
				]
			}
		},
		"lists/show": {
			"get": {
				"summary": "lists/show",
				"description": "Returns the specified list. Private lists will only be shown if the authenticated user owns the specified list.",
				"operationId": "listsshow",
				"parameters": [
					{
						"name": "list_id",
						"in": "query",
						"description": "",
						"type": "string"
					},
					{
						"name": "owner_id",
						"in": "query",
						"description": "",
						"type": "string"
					},
					{
						"name": "owner_screen_name",
						"in": "query",
						"description": "",
						"type": "string"
					},
					{
						"name": "slug",
						"in": "query",
						"description": "",
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [
					""
				]
			}
		},
		"lists/statuses": {
			"get": {
				"summary": "lists/statuses",
				"description": "Returns a timeline of tweets authored by members of the specified list. Retweets are included by default. Use the include_rts=false parameter to omit retweets.Embedded Timelines is a great way to embed list timelines on your website.",
				"operationId": "listsstatuses",
				"parameters": [
					{
						"name": "count",
						"in": "query",
						"description": "",
						"type": "string"
					},
					{
						"name": "include_entities",
						"in": "query",
						"description": "",
						"type": "string"
					},
					{
						"name": "include_rts",
						"in": "query",
						"description": "",
						"type": "string"
					},
					{
						"name": "list_id",
						"in": "query",
						"description": "",
						"type": "string"
					},
					{
						"name": "max_id",
						"in": "query",
						"description": "",
						"type": "string"
					},
					{
						"name": "owner_id",
						"in": "query",
						"description": "",
						"type": "string"
					},
					{
						"name": "owner_screen_name",
						"in": "query",
						"description": "",
						"type": "string"
					},
					{
						"name": "since_id",
						"in": "query",
						"description": "",
						"type": "string"
					},
					{
						"name": "slug",
						"in": "query",
						"description": "",
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [
					""
				]
			}
		},
		"lists/subscribers": {
			"get": {
				"summary": "lists/subscribers",
				"description": "Returns the subscribers of the specified list. Private list subscribers will only be shown if the authenticated user owns the specified list.",
				"operationId": "listssubscribers",
				"parameters": [
					{
						"name": "count",
						"in": "query",
						"description": "",
						"type": "string"
					},
					{
						"name": "cursor",
						"in": "query",
						"description": "",
						"type": "string"
					},
					{
						"name": "include_entities",
						"in": "query",
						"description": "",
						"type": "string"
					},
					{
						"name": "list_id",
						"in": "query",
						"description": "",
						"type": "string"
					},
					{
						"name": "owner_id",
						"in": "query",
						"description": "",
						"type": "string"
					},
					{
						"name": "owner_screen_name",
						"in": "query",
						"description": "",
						"type": "string"
					},
					{
						"name": "skip_status",
						"in": "query",
						"description": "",
						"type": "string"
					},
					{
						"name": "slug",
						"in": "query",
						"description": "",
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [
					""
				]
			}
		},
		"lists/subscribers/create": {
			"post": {
				"summary": "lists/subscribers/create",
				"description": "Subscribes the authenticated user to the specified list.",
				"operationId": "listssubscriberscreate",
				"parameters": [
					{
						"name": "list_id",
						"in": "query",
						"description": "",
						"type": "string"
					},
					{
						"name": "owner_id",
						"in": "query",
						"description": "",
						"type": "string"
					},
					{
						"name": "owner_screen_name",
						"in": "query",
						"description": "",
						"type": "string"
					},
					{
						"name": "slug",
						"in": "query",
						"description": "",
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [
					""
				]
			}
		},
		"lists/subscribers/destroy": {
			"post": {
				"summary": "lists/subscribers/destroy",
				"description": "Unsubscribes the authenticated user from the specified list.",
				"operationId": "listssubscribersdestroy",
				"parameters": [
					{
						"name": "list_id",
						"in": "query",
						"description": "",
						"type": "string"
					},
					{
						"name": "owner_id",
						"in": "query",
						"description": "",
						"type": "string"
					},
					{
						"name": "owner_screen_name",
						"in": "query",
						"description": "",
						"type": "string"
					},
					{
						"name": "slug",
						"in": "query",
						"description": "",
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [
					""
				]
			}
		},
		"lists/subscribers/show": {
			"get": {
				"summary": "lists/subscribers/show",
				"description": "Check if the specified user is a subscriber of the specified list. Returns the user if they are subscriber.",
				"operationId": "listssubscribersshow",
				"parameters": [
					{
						"name": "include_entities",
						"in": "query",
						"description": "",
						"type": "string"
					},
					{
						"name": "list_id",
						"in": "query",
						"description": "",
						"type": "string"
					},
					{
						"name": "owner_id",
						"in": "query",
						"description": "",
						"type": "string"
					},
					{
						"name": "owner_screen_name",
						"in": "query",
						"description": "",
						"type": "string"
					},
					{
						"name": "screen_name",
						"in": "query",
						"description": "",
						"type": "string"
					},
					{
						"name": "skip_status",
						"in": "query",
						"description": "",
						"type": "string"
					},
					{
						"name": "slug",
						"in": "query",
						"description": "",
						"type": "string"
					},
					{
						"name": "user_id",
						"in": "query",
						"description": "",
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [
					""
				]
			}
		},
		"lists/subscriptions": {
			"get": {
				"summary": "lists/subscriptions",
				"description": "Obtain a collection of the lists the specified user is subscribed to, 20 lists per page by default.  Does not include the user&#8217;s own lists.",
				"operationId": "listssubscriptions",
				"parameters": [
					{
						"name": "count",
						"in": "query",
						"description": "",
						"type": "string"
					},
					{
						"name": "cursor",
						"in": "query",
						"description": "",
						"type": "string"
					},
					{
						"name": "screen_name",
						"in": "query",
						"description": "",
						"type": "string"
					},
					{
						"name": "user_id",
						"in": "query",
						"description": "",
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [
					""
				]
			}
		},
		"lists/update": {
			"post": {
				"summary": "lists/update",
				"description": "Updates the specified list. The authenticated user must own the list to be able to update it.",
				"operationId": "listsupdate",
				"parameters": [
					{
						"name": "description",
						"in": "query",
						"description": "",
						"type": "string"
					},
					{
						"name": "list_id",
						"in": "query",
						"description": "",
						"type": "string"
					},
					{
						"name": "mode",
						"in": "query",
						"description": "",
						"type": "string"
					},
					{
						"name": "name",
						"in": "query",
						"description": "",
						"type": "string"
					},
					{
						"name": "owner_id",
						"in": "query",
						"description": "",
						"type": "string"
					},
					{
						"name": "owner_screen_name",
						"in": "query",
						"description": "",
						"type": "string"
					},
					{
						"name": "slug",
						"in": "query",
						"description": "",
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [
					""
				]
			}
		},
		"mutes/users/create": {
			"post": {
				"summary": "mutes/users/create",
				"description": "Mutes the user specified in the ID parameter for the authenticating user.Returns the muted user in the requested format when successful. Returns a string describing the failure condition when unsuccessful.Actions taken in this method are asynchronous and changes will be eventually consistent.",
				"operationId": "mutesuserscreate",
				"parameters": [
					{
						"name": "screen_name",
						"in": "query",
						"description": "",
						"type": "string"
					},
					{
						"name": "user_id",
						"in": "query",
						"description": "",
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [
					""
				]
			}
		},
		"mutes/users/destroy": {
			"post": {
				"summary": "mutes/users/destroy",
				"description": "Un-mutes the user specified in the ID parameter for the authenticating user.Returns the unmuted user in the requested format when successful. Returns a string describing the failure condition when unsuccessful.Actions taken in this method are asynchronous and changes will be eventually consistent.",
				"operationId": "mutesusersdestroy",
				"parameters": [
					{
						"name": "screen_name",
						"in": "query",
						"description": "",
						"type": "string"
					},
					{
						"name": "user_id",
						"in": "query",
						"description": "",
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [
					""
				]
			}
		},
		"mutes/users/ids": {
			"get": {
				"summary": "mutes/users/ids",
				"description": "Returns an array of numeric user ids the authenticating user has muted.",
				"operationId": "mutesusersids",
				"parameters": [
					{
						"name": "cursor",
						"in": "query",
						"description": "",
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [
					""
				]
			}
		},
		"mutes/users/list": {
			"get": {
				"summary": "mutes/users/list",
				"description": "Returns an array of user objects the authenticating user has muted.",
				"operationId": "mutesuserslist",
				"parameters": [
					{
						"name": "cursor",
						"in": "query",
						"description": "",
						"type": "string"
					},
					{
						"name": "include_entities",
						"in": "query",
						"description": "",
						"type": "string"
					},
					{
						"name": "skip_status",
						"in": "query",
						"description": "",
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [
					""
				]
			}
		},
		"saved_searches/create": {
			"post": {
				"summary": "saved_searches/create",
				"description": "Create a new saved search for the authenticated user. A user may only have 25 saved searches.",
				"operationId": "saved-searchescreate",
				"parameters": [
					{
						"name": "",
						"in": "query",
						"description": "",
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [
					""
				]
			}
		},
		"saved_searches/destroy/:id": {
			"post": {
				"summary": "saved_searches/destroy/:id",
				"description": "Destroys a saved search for the authenticating user. The authenticating user must be the owner of saved search id being destroyed.",
				"operationId": "saved-searchesdestroyid",
				"parameters": [
					{
						"name": "",
						"in": "query",
						"description": "",
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [
					""
				]
			}
		},
		"saved_searches/list": {
			"get": {
				"summary": "saved_searches/list",
				"description": "Returns the authenticated user&#8217;s saved search queries.",
				"operationId": "saved-searcheslist",
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [
					""
				]
			}
		},
		"saved_searches/show/:id": {
			"get": {
				"summary": "saved_searches/show/:id",
				"description": "Retrieve the information for the saved search represented by the given id. The authenticating user must be the owner of saved search ID being requested.",
				"operationId": "saved-searchesshowid",
				"parameters": [
					{
						"name": "",
						"in": "query",
						"description": "",
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [
					""
				]
			}
		},
		"search/tweets": {
			"get": {
				"summary": "search/tweets",
				"description": "Returns a collection of relevant Tweets matching a specified query.Please note that Twitter&#8217;s search service and, by extension, the Search API is not meant to be an exhaustive source of Tweets. Not all Tweets will be indexed or made available via the search interface.In API v1.1, the response format of the Search API has been improved to return Tweet objects more similar to the objects you&#8217;ll find across the REST API and platform. However, perspectival attributes (fields that pertain to the perspective of the authenticating user) are not currently supported on this endpoint.To learn how to use Twitter Search effectively, consult our guide to Using the Twitter Search API. See Working with Timelines to learn best practices for navigating results by since_id and max_id.",
				"operationId": "searchtweets",
				"parameters": [
					{
						"name": "",
						"in": "query",
						"description": "",
						"type": "string"
					},
					{
						"name": "callback",
						"in": "query",
						"description": "",
						"type": "string"
					},
					{
						"name": "count",
						"in": "query",
						"description": "",
						"type": "string"
					},
					{
						"name": "geocode",
						"in": "query",
						"description": "",
						"type": "string"
					},
					{
						"name": "include_entities",
						"in": "query",
						"description": "",
						"type": "string"
					},
					{
						"name": "lang",
						"in": "query",
						"description": "",
						"type": "string"
					},
					{
						"name": "locale",
						"in": "query",
						"description": "",
						"type": "string"
					},
					{
						"name": "max_id",
						"in": "query",
						"description": "",
						"type": "string"
					},
					{
						"name": "result_type",
						"in": "query",
						"description": "",
						"type": "string"
					},
					{
						"name": "since_id",
						"in": "query",
						"description": "",
						"type": "string"
					},
					{
						"name": "until",
						"in": "query",
						"description": "",
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [
					""
				]
			}
		},
		"statuses/destroy/:id": {
			"post": {
				"summary": "statuses/destroy/:id",
				"description": "Destroys the status specified by the required ID parameter. The authenticating user must be the author of the specified status. Returns the destroyed status if successful.",
				"operationId": "statusesdestroyid",
				"parameters": [
					{
						"name": "id",
						"in": "query",
						"description": "",
						"type": "string"
					},
					{
						"name": "trim_user",
						"in": "query",
						"description": "",
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [
					""
				]
			}
		},
		"statuses/home_timeline": {
			"get": {
				"summary": "statuses/home_timeline",
				"description": "Returns a collection of the most recent Tweets and retweets posted by the authenticating user and the users they follow. The home timeline is central to how most users interact with the Twitter service.Up to 800 Tweets are obtainable on the home timeline. It is more volatile for users that follow many users or follow users who tweet frequently.See Working with Timelines for instructions on traversing timelines efficiently.",
				"operationId": "statuseshome-timeline",
				"parameters": [
					{
						"name": "contributor_details",
						"in": "query",
						"description": "",
						"type": "string"
					},
					{
						"name": "count",
						"in": "query",
						"description": "",
						"type": "string"
					},
					{
						"name": "exclude_replies",
						"in": "query",
						"description": "",
						"type": "string"
					},
					{
						"name": "include_entities",
						"in": "query",
						"description": "",
						"type": "string"
					},
					{
						"name": "max_id",
						"in": "query",
						"description": "",
						"type": "string"
					},
					{
						"name": "since_id",
						"in": "query",
						"description": "",
						"type": "string"
					},
					{
						"name": "trim_user",
						"in": "query",
						"description": "",
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [
					""
				]
			}
		},
		"statuses/lookup": {
			"get": {
				"summary": "statuses/lookup",
				"description": "Returns fully-hydrated tweet objects for up to 100 tweets per request, as specified by comma-separated values passed to the id parameter.This method is especially useful to get the details (hydrate) a collection of Tweet IDs.GET statuses / show / :id is used to retrieve a single tweet object.There are a few things to note when using this method.You must be following a protected user to be able to see their most recent tweets. If you don&#8217;t follow a protected user their status will be removed.The order of tweet IDs may not match the order of tweets in the returned array.If a requested tweet is unknown or deleted, then that tweet will not be returned in the results list, unless the map parameter is set to true, in which case it will be returned with a value of null.If none of your lookup criteria matches valid tweet IDs an empty array will be returned for map=false.You are strongly encouraged to use a POST for larger requests.",
				"operationId": "statuseslookup",
				"parameters": [
					{
						"name": "id",
						"in": "query",
						"description": "",
						"type": "string"
					},
					{
						"name": "include_entities",
						"in": "query",
						"description": "",
						"type": "string"
					},
					{
						"name": "map",
						"in": "query",
						"description": "",
						"type": "string"
					},
					{
						"name": "trim_user",
						"in": "query",
						"description": "",
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [
					""
				]
			}
		},
		"statuses/mentions_timeline": {
			"get": {
				"summary": "statuses/mentions_timeline",
				"description": "Returns the 20 most recent mentions (tweets containing a users&#8217;s @screen_name) for the authenticating user.The timeline returned is the equivalent of the one seen when you view your mentions on twitter.com.This method can only return up to 800 tweets.See Working with Timelines for instructions on traversing timelines.",
				"operationId": "statusesmentions-timeline",
				"parameters": [
					{
						"name": "contributor_details",
						"in": "query",
						"description": "",
						"type": "string"
					},
					{
						"name": "count",
						"in": "query",
						"description": "",
						"type": "string"
					},
					{
						"name": "include_entities",
						"in": "query",
						"description": "",
						"type": "string"
					},
					{
						"name": "max_id",
						"in": "query",
						"description": "",
						"type": "string"
					},
					{
						"name": "since_id",
						"in": "query",
						"description": "",
						"type": "string"
					},
					{
						"name": "trim_user",
						"in": "query",
						"description": "",
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [
					""
				]
			}
		},
		"statuses/oembed": {
			"get": {
				"summary": "statuses/oembed",
				"description": "Returns a single Tweet, specified by either a Tweet web URL or the Tweet ID, in an oEmbed-compatible format. The returned HTML snippet will be automatically recognized as an Embedded Tweet when Twitter&#8217;s widget JavaScript is included on the page.The oEmbed endpoint allows customization of the final appearance of an Embedded Tweet by setting the corresponding properties in HTML markup to be interpreted by Twitter&#8217;s JavaScript bundled with the HTML response by default. The format of the returned markup may change over time as Twitter adds new features or adjusts its Tweet representation.The Tweet fallback markup is meant to be cached on your servers for up to the suggested cache lifetime specified in the cache_age.The oEmbed endpoint supports unauthenticated requests at api.twitter.com/1/statuses/oembed.{format} suitable for distributed software and general discovery. Individual sites should request oEmbed data using an application token.",
				"operationId": "statusesoembed",
				"parameters": [
					{
						"name": "",
						"in": "query",
						"description": "",
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [
					""
				]
			}
		},
		"statuses/retweet/:id": {
			"post": {
				"summary": "statuses/retweet/:id",
				"description": "Retweets a tweet. Returns the original tweet with retweet details embedded.Usage Notes:This method is subject to update limits. A HTTP 403 will be returned if this limit as been hit.Twitter will ignore attempts to perform duplicate retweets.The retweet_count will be current as of when the payload is generated and may not reflect the exact count. It is intended as an approximation.",
				"operationId": "statusesretweetid",
				"parameters": [
					{
						"name": "id",
						"in": "query",
						"description": "",
						"type": "string"
					},
					{
						"name": "trim_user",
						"in": "query",
						"description": "",
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [
					""
				]
			}
		},
		"statuses/retweeters/ids": {
			"get": {
				"summary": "statuses/retweeters/ids",
				"description": "Returns a collection of up to 100 user IDs belonging to users who have retweeted the tweet specified by the id parameter.This method offers similar data to GET statuses / retweets / :id.",
				"operationId": "statusesretweetersids",
				"parameters": [
					{
						"name": "cursor",
						"in": "query",
						"description": "",
						"type": "string"
					},
					{
						"name": "id",
						"in": "query",
						"description": "",
						"type": "string"
					},
					{
						"name": "stringify_ids",
						"in": "query",
						"description": "",
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [
					""
				]
			}
		},
		"statuses/retweets/:id": {
			"get": {
				"summary": "statuses/retweets/:id",
				"description": "Returns a collection of the 100 most recent retweets of the tweet specified by the id parameter.",
				"operationId": "statusesretweetsid",
				"parameters": [
					{
						"name": "count",
						"in": "query",
						"description": "",
						"type": "string"
					},
					{
						"name": "id",
						"in": "query",
						"description": "",
						"type": "string"
					},
					{
						"name": "trim_user",
						"in": "query",
						"description": "",
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [
					""
				]
			}
		},
		"statuses/retweets_of_me": {
			"get": {
				"summary": "statuses/retweets_of_me",
				"description": "Returns the most recent tweets authored by the authenticating user that have been retweeted by others. This timeline is a subset of the user&#8217;s GET statuses / user_timeline.See Working with Timelines for instructions on traversing timelines.",
				"operationId": "statusesretweets-of-me",
				"parameters": [
					{
						"name": "count",
						"in": "query",
						"description": "",
						"type": "string"
					},
					{
						"name": "include_entities",
						"in": "query",
						"description": "",
						"type": "string"
					},
					{
						"name": "include_user_entities",
						"in": "query",
						"description": "",
						"type": "string"
					},
					{
						"name": "max_id",
						"in": "query",
						"description": "",
						"type": "string"
					},
					{
						"name": "since_id",
						"in": "query",
						"description": "",
						"type": "string"
					},
					{
						"name": "trim_user",
						"in": "query",
						"description": "",
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [
					""
				]
			}
		},
		"statuses/show/:id": {
			"get": {
				"summary": "statuses/show/:id",
				"description": "Returns a single Tweet, specified by the id parameter. The Tweet&#8217;s author will also be embedded within the tweet.See GET statuses / lookup for getting Tweets in bulk (up to 100 per call). See also Embeddable Timelines, Embeddable Tweets, and GET statuses/oembed for tools to render Tweets according to Display Requirements.About GeoIf there is no geotag for a status, then there will be an empty &lt;geo/&gt; or geo : {}. This can only be populated if the user has used the Geotagging API to send a statuses/update.The JSON response mostly uses conventions laid out in GeoJSON. Unfortunately, the coordinates that Twitter renders are reversed from the GeoJSON specification (GeoJSON specifies a longitude then a latitude, whereas we are currently representing it as a latitude then a longitude). Our JSON renders as: geo: { type:Point, coordinates:[37.78029, -122.39697] }ContributorsIf there are no contributors for a Tweet, then there will be an empty  or contributors : {}. This field will only be populated if the user has contributors enabled on his or her account &#8212; this is a beta feature that is not yet generally available to all.This object contains an array of user IDs for users who have contributed to this status (an example of a status that has been contributed to is this one). In practice, there is usually only one ID in this array. The JSON renders as such contributors:[8285392].",
				"operationId": "statusesshowid",
				"parameters": [
					{
						"name": "",
						"in": "query",
						"description": "",
						"type": "string"
					},
					{
						"name": "id",
						"in": "query",
						"description": "",
						"type": "string"
					},
					{
						"name": "include_entities",
						"in": "query",
						"description": "",
						"type": "string"
					},
					{
						"name": "trim_user",
						"in": "query",
						"description": "",
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [
					""
				]
			}
		},
		"statuses/update": {
			"post": {
				"summary": "statuses/update",
				"description": "Updates the authenticating user&#8217;s current status, also known as tweeting.For each update attempt, the update text is compared with the authenticating user&#8217;s recent tweets. Any attempt that would result in duplication will be blocked, resulting in a 403 error. Therefore, a user cannot submit the same status twice in a row.While not rate limited by the API a user is limited in the number of tweets they can create at a time. If the number of updates posted by the user reaches the current allowed limit this method will return an HTTP 403 error.About GeoAny geo-tagging parameters in the update will be ignored if geo_enabled for the user is false (this is the default setting for all users unless the user has enabled geolocation in their settings)The number of digits passed the decimal separator passed to lat, up to 8, will be tracked so that the lat is returned in a status object it will have the same number of digits after the decimal separator.Please make sure to use to use a decimal point as the separator (and not the decimal comma) for the latitude and the longitude - usage of the decimal comma will cause the geo-tagged portion of the status update to be dropped.For JSON, the response mostly uses conventions described in GeoJSON. Unfortunately, the geo object has coordinates that Twitter renderers are reversed from the GeoJSON specification (GeoJSON specifies a longitude then a latitude, whereas we are currently representing it as a latitude then a longitude. Our JSON renders as: geo: { type:Point, coordinates:[37.78217, -122.40062] }The coordinates object is replacing the geo object (no deprecation date has been set for the geo object yet) &#8212; the difference is that the coordinates object, in JSON, is now rendered correctly in GeoJSON.If a place_id is passed into the status update, then that place will be attached to the status. If no place_id was explicitly provided, but latitude and longitude are, we attempt to implicitly provide a place by calling geo/reverse_geocode.Users will have the ability, from their settings page, to remove all the geotags from all their tweets en masse. Currently we are not doing any automatic scrubbing nor providing a method to remove geotags from individual tweets.",
				"operationId": "statusesupdate",
				"parameters": [
					{
						"name": "display_coordinates",
						"in": "query",
						"description": "",
						"type": "string"
					},
					{
						"name": "in_reply_to_status_id",
						"in": "query",
						"description": "",
						"type": "string"
					},
					{
						"name": "lat",
						"in": "query",
						"description": "",
						"type": "string"
					},
					{
						"name": "long",
						"in": "query",
						"description": "",
						"type": "string"
					},
					{
						"name": "media_ids",
						"in": "query",
						"description": "",
						"type": "string"
					},
					{
						"name": "place_id",
						"in": "query",
						"description": "",
						"type": "string"
					},
					{
						"name": "possibly_sensitive",
						"in": "query",
						"description": "",
						"type": "string"
					},
					{
						"name": "status",
						"in": "query",
						"description": "",
						"type": "string"
					},
					{
						"name": "trim_user",
						"in": "query",
						"description": "",
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [
					""
				]
			}
		},
		"statuses/update_with_media": {
			"post": {
				"summary": "statuses/update_with_media",
				"description": "This endpoint has been deprecated. Please refer to Uploading Media: Multiple Photos for uploading one or more media entities.Updates the authenticating user&#8217;s current status and attaches media for upload. In other words, it creates a Tweet with a picture attached.Unlike POST statuses/update, this method expects raw multipart data. Your POST request&#8217;s Content-Type should be set to multipart/form-data with the media[] parameter .See Uploading Media for a guide to using this method.The Tweet text will be rewritten to include the media URL(s), which will reduce the number of characters allowed in the Tweet text. If the URL(s) cannot be appended without text truncation, the tweet will be rejected and this method will return an HTTP 403 error.Important: In API v1.1, you now use api.twitter.com as the domain instead of upload.twitter.com. Use of SSL is required with this method.Important: In API v1.1, you now use api.twitter.com as the domain instead of upload.twitter.com.Users are limited to a specific daily media upload limit.. Requests to this endpoint will return the following headers with information regarding the user&#8217;s current media upload limits:X-MediaRateLimit-Limit - Indicates the total pieces of media the current user may upload before the time indicated in X-MediaRateLimit-Reset.X-MediaRateLimit-Remaining - The remaining pieces of media the current user may upload before the time indicated in X-MediaRateLimit-Reset.X-MediaRateLimit-Reset - A UTC-based timestamp (in seconds) indicating when X-MediaRateLimit-Remaining will reset to the value in X-MediaRateLimit-Limit and the user can resume uploading media.If the user is over the daily media limit, this method will return an HTTP 403 error. In addition to media upload limits, the user is still limited in the number of statuses they can publish daily. If the user tries to exceed the number of updates allowed, this method will also return an HTTP 403 error, similar to POST statuses / update.OAuth is handled differently for POST messages. See Uploading Media for more details on this.Example RequestNote: The OAuth tool does not support multipart requests, so you will not be able to use it to generate an example request to this endpoint. An example request has been included to demonstrate the multipart request format.POST /1.1/statuses/update_with_media.json HTTP/1.1nHost: api.twitter.comnUser-Agent: Go http packagenContent-Length: 15532nAuthorization: OAuth oauth_consumer_key=..., oauth_nonce=..., oauth_signature=..., oauth_signature_method=HMAC-SHA1, oauth_timestamp=1347058301, oauth_token=..., oauth_version=1.0nContent-Type: multipart/form-data;boundary=cce6735153bf14e47e999e68bb183e70a1fa7fc89722fc1efdf03a917340nAccept-Encoding: gzipnn--cce6735153bf14e47e999e68bb183e70a1fa7fc89722fc1efdf03a917340nContent-Disposition: form-data; name=status Hello 2012-09-07 15:51:41.375247 -0700 PDT!n--cce6735153bf14e47e999e68bb183e70a1fa7fc89722fc1efdf03a917340nnContent-Type: application/octet-streamnContent-Disposition: form-data; name=media[]; filename=media.png ...n--cce6735153bf14e47e999e68bb183e70a1fa7fc89722fc1efdf03a917340-- {n  contributors: null, n  coordinates: null, n  created_at: Fri Sep 07 22:46:18 +0000 2012, n  entities: {n    hashtags: [], n    media: [n      {n        display_url: pic.twitter.com/lX5LVZO, n        expanded_url: http://twitter.com/fakekurrik/status/244204973972410368/photo/1, n        id: 244204973989187584, n        id_str: 244204973989187584, n        indices: [n          44, n          63n        ], n        media_url: http://pbs.twimg.com/media/A2OXIUcCUAAXj9k.png, n        media_url_https: https://pbs.twimg.com/media/A2OXIUcCUAAXj9k.png, n        sizes: {n          large: {n            h: 175, n            resize: fit, n            w: 333n          }, n          medium: {n            h: 175, n            resize: fit, n            w: 333n          }, n          small: {n            h: 175, n            resize: fit, n            w: 333n          }, n          thumb: {n            h: 150, n            resize: crop, n            w: 150n          }n        }, n        type: photo, n        url: http://t.co/lX5LVZOn      }n    ], n    urls: [], n    user_mentions: []n  }, n  favorited: false, n  geo: null, n  id: 244204973972410368, n  id_str: 244204973972410368, n  in_reply_to_screen_name: null, n  in_reply_to_status_id: null, n  in_reply_to_status_id_str: null, n  in_reply_to_user_id: null, n  in_reply_to_user_id_str: null, n  place: null, n  possibly_sensitive: false, n  retweet_count: 0, n  retweeted: false, n  source: Fakekurrik's Test Application, n  text: Hello 2012-09-07 15:48:27.889593 -0700 PDT! http://t.co/lX5LVZO, n  truncated: false, n  user: {n    contributors_enabled: false, n    created_at: Fri Sep 09 16:13:20 +0000 2011, n    default_profile: false, n    default_profile_image: false, n    description: I am just a testing account, following me probably won't gain you very much, n    entities: {n      description: {n        urls: []n      }, n      url: {n        urls: [n          {n            display_url: null, n            expanded_url: null, n            indices: [n              0, n              24n            ], n            url: http://blog.roomanna.comn          }n        ]n      }n    }, n    favourites_count: 1, n    follow_request_sent: false, n    followers_count: 2, n    following: false, n    friends_count: 5, n    geo_enabled: true, n    id: 370773112, n    id_str: 370773112, n    is_translator: false, n    lang: en, n    listed_count: 0, n    location: Trapped in factory, n    name: fakekurrik, n    notifications: false, n    profile_background_color: C0DEED, n    profile_background_image_url: http://a0.twimg.com/profile_background_images/616512781/iarz5lvj7lg7zpg3zv8j.jpeg, n    profile_background_image_url_https: https://si0.twimg.com/profile_background_images/616512781/iarz5lvj7lg7zpg3zv8j.jpeg, n    profile_background_tile: true, n    profile_image_url: http://a0.twimg.com/profile_images/2440719659/x47xdzkguqxr1w1gg5un_normal.png, n    profile_image_url_https: https://si0.twimg.com/profile_images/2440719659/x47xdzkguqxr1w1gg5un_normal.png, n    profile_link_color: 0084B4, n    profile_sidebar_border_color: C0DEED, n    profile_sidebar_fill_color: FFFFFF, n    profile_text_color: 333333, n    profile_use_background_image: true, n    protected: true, n    screen_name: fakekurrik, n    show_all_inline_media: false, n    statuses_count: 546, n    time_zone: Pacific Time (US &amp; Canada), n    url: http://blog.roomanna.com, n    utc_offset: -28800, n    verified: falsen  }n}",
				"operationId": "statusesupdate-with-media",
				"parameters": [
					{
						"name": "display_coordinates",
						"in": "query",
						"description": "",
						"type": "string"
					},
					{
						"name": "in_reply_to_status_id",
						"in": "query",
						"description": "",
						"type": "string"
					},
					{
						"name": "lat",
						"in": "query",
						"description": "",
						"type": "string"
					},
					{
						"name": "long",
						"in": "query",
						"description": "",
						"type": "string"
					},
					{
						"name": "media[]",
						"in": "query",
						"description": "",
						"type": "string"
					},
					{
						"name": "place_id",
						"in": "query",
						"description": "",
						"type": "string"
					},
					{
						"name": "possibly_sensitive",
						"in": "query",
						"description": "",
						"type": "string"
					},
					{
						"name": "status",
						"in": "query",
						"description": "",
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [
					""
				]
			}
		},
		"statuses/user_timeline": {
			"get": {
				"summary": "statuses/user_timeline",
				"description": "Returns a collection of the most recent Tweets posted by the user indicated by the screen_name or user_id parameters.User timelines belonging to protected users may only be requested when the authenticated user either &#8220;owns&#8221; the timeline or is an approved follower of the owner.The timeline returned is the equivalent of the one seen when you view a user&#8217;s profile on twitter.com.This method can only return up to 3,200 of a user&#8217;s most recent Tweets. Native retweets of other statuses by the user is included in this total, regardless of whether include_rts is set to false when requesting this resource.See Working with Timelines for instructions on traversing timelines.See Embeddable Timelines, Embeddable Tweets, and GET statuses/oembed for tools to render Tweets according to Display Requirements.",
				"operationId": "statusesuser-timeline",
				"parameters": [
					{
						"name": "contributor_details",
						"in": "query",
						"description": "",
						"type": "string"
					},
					{
						"name": "count",
						"in": "query",
						"description": "",
						"type": "string"
					},
					{
						"name": "exclude_replies",
						"in": "query",
						"description": "",
						"type": "string"
					},
					{
						"name": "include_rts",
						"in": "query",
						"description": "",
						"type": "string"
					},
					{
						"name": "max_id",
						"in": "query",
						"description": "",
						"type": "string"
					},
					{
						"name": "screen_name",
						"in": "query",
						"description": "",
						"type": "string"
					},
					{
						"name": "since_id",
						"in": "query",
						"description": "",
						"type": "string"
					},
					{
						"name": "trim_user",
						"in": "query",
						"description": "",
						"type": "string"
					},
					{
						"name": "user_id",
						"in": "query",
						"description": "",
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [
					""
				]
			}
		},
		"trends/available": {
			"get": {
				"summary": "trends/available",
				"description": "Returns the locations that Twitter has trending topic information for.The response is an array of &#8220;locations&#8221; that encode the location&#8217;s WOEID and some other human-readable information such as a canonical name and country the location belongs in.A WOEID is a Yahoo! Where On Earth ID.",
				"operationId": "trendsavailable",
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [
					""
				]
			}
		},
		"trends/closest": {
			"get": {
				"summary": "trends/closest",
				"description": "Returns the locations that Twitter has trending topic information for, closest to a specified location.The response is an array of &#8220;locations&#8221; that encode the location&#8217;s WOEID and some other human-readable information such as a canonical name and country the location belongs in.A WOEID is a Yahoo! Where On Earth ID.",
				"operationId": "trendsclosest",
				"parameters": [
					{
						"name": "lat",
						"in": "query",
						"description": "",
						"type": "string"
					},
					{
						"name": "long",
						"in": "query",
						"description": "",
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [
					""
				]
			}
		},
		"trends/place": {
			"get": {
				"summary": "trends/place",
				"description": "Returns the top 10 trending topics for a specific WOEID, if trending information is available for it.The response is an array of &#8220;trend&#8221; objects that encode the name of the trending topic, the query parameter that can be used to search for the topic on Twitter Search, and the Twitter Search URL.This information is cached for 5 minutes. Requesting more frequently than that will not return any more data, and will count against your rate limit usage.",
				"operationId": "trendsplace",
				"parameters": [
					{
						"name": "",
						"in": "query",
						"description": "",
						"type": "string"
					},
					{
						"name": "exclude",
						"in": "query",
						"description": "",
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [
					""
				]
			}
		},
		"users/contributees": {
			"get": {
				"summary": "users/contributees",
				"description": "Returns a collection of users that the specified user can &#8220;contribute&#8221; to.",
				"operationId": "userscontributees",
				"parameters": [
					{
						"name": "include_entities",
						"in": "query",
						"description": "",
						"type": "string"
					},
					{
						"name": "screen_name",
						"in": "query",
						"description": "",
						"type": "string"
					},
					{
						"name": "skip_status",
						"in": "query",
						"description": "",
						"type": "string"
					},
					{
						"name": "user_id",
						"in": "query",
						"description": "",
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [
					""
				]
			}
		},
		"users/contributors": {
			"get": {
				"summary": "users/contributors",
				"description": "Returns a collection of users who can contribute to the specified account.",
				"operationId": "userscontributors",
				"parameters": [
					{
						"name": "include_entities",
						"in": "query",
						"description": "",
						"type": "string"
					},
					{
						"name": "screen_name",
						"in": "query",
						"description": "",
						"type": "string"
					},
					{
						"name": "skip_status",
						"in": "query",
						"description": "",
						"type": "string"
					},
					{
						"name": "user_id",
						"in": "query",
						"description": "",
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [
					""
				]
			}
		},
		"users/lookup": {
			"get": {
				"summary": "users/lookup",
				"description": "Returns fully-hydrated user objects for up to 100 users per request, as specified by comma-separated values passed to the user_id and/or screen_name parameters.This method is especially useful when used in conjunction with collections of user IDs returned from GET friends / ids and GET followers / ids.GET users / show is used to retrieve a single user object.There are a few things to note when using this method.You must be following a protected user to be able to see their most recent status update. If you don&#8217;t follow a protected user their status will be removed.The order of user IDs or screen names may not match the order of users in the returned array.If a requested user is unknown, suspended, or deleted, then that user will not be returned in the results list.If none of your lookup criteria can be satisfied by returning a user object, a HTTP 404 will be thrown.You are strongly encouraged to use a POST for larger requests.",
				"operationId": "userslookup",
				"parameters": [
					{
						"name": "include_entities",
						"in": "query",
						"description": "",
						"type": "string"
					},
					{
						"name": "screen_name",
						"in": "query",
						"description": "",
						"type": "string"
					},
					{
						"name": "user_id",
						"in": "query",
						"description": "",
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [
					""
				]
			}
		},
		"users/profile_banner": {
			"get": {
				"summary": "users/profile_banner",
				"description": "Returns a map of the available size variations of the specified user&#8217;s profile banner. If the user has not uploaded a profile banner, a HTTP 404 will be served instead. This method can be used instead of string manipulation on the profile_banner_url returned in user objects as described in [node:10796 ].The profile banner data available at each size variant&#8217;s URL is in PNG format.",
				"operationId": "usersprofile-banner",
				"parameters": [
					{
						"name": "screen_name",
						"in": "query",
						"description": "",
						"type": "string"
					},
					{
						"name": "user_id",
						"in": "query",
						"description": "",
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [
					""
				]
			}
		},
		"users/report_spam": {
			"post": {
				"summary": "users/report_spam",
				"description": "Report the specified user as a spam account to Twitter. Additionally performs the equivalent of POST blocks / create on behalf of the authenticated user.",
				"operationId": "usersreport-spam",
				"parameters": [
					{
						"name": "screen_name",
						"in": "query",
						"description": "",
						"type": "string"
					},
					{
						"name": "user_id",
						"in": "query",
						"description": "",
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [
					""
				]
			}
		},
		"users/search": {
			"get": {
				"summary": "users/search",
				"description": "Provides a simple, relevance-based search interface to public user accounts on Twitter. Try querying by topical interest, full name, company name, location, or other criteria. Exact match searches are not supported.Only the first 1,000 matching results are available.",
				"operationId": "userssearch",
				"parameters": [
					{
						"name": "",
						"in": "query",
						"description": "",
						"type": "string"
					},
					{
						"name": "count",
						"in": "query",
						"description": "",
						"type": "string"
					},
					{
						"name": "include_entities",
						"in": "query",
						"description": "",
						"type": "string"
					},
					{
						"name": "page",
						"in": "query",
						"description": "",
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [
					""
				]
			}
		},
		"users/show": {
			"get": {
				"summary": "users/show",
				"description": "Returns a variety of information about the user specified by the required user_id or screen_name parameter. The author&#8217;s most recent Tweet will be returned inline when possible.GET users / lookup is used to retrieve a bulk collection of user objects.You must be following a protected user to be able to see their most recent Tweet. If you don&#8217;t follow a protected user, the users Tweet will be removed. A Tweet will not always be returned in the current_status field.",
				"operationId": "usersshow",
				"parameters": [
					{
						"name": "",
						"in": "query",
						"description": "",
						"type": "string"
					},
					{
						"name": "include_entities",
						"in": "query",
						"description": "",
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [
					""
				]
			}
		},
		"users/suggestions": {
			"get": {
				"summary": "users/suggestions",
				"description": "Access to Twitter&#8217;s suggested user list. This returns the list of suggested user categories. The category can be used in GET users / suggestions / :slug to get the users in that category.",
				"operationId": "userssuggestions",
				"parameters": [
					{
						"name": "lang",
						"in": "query",
						"description": "",
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [
					""
				]
			}
		},
		"users/suggestions/:slug": {
			"get": {
				"summary": "users/suggestions/:slug",
				"description": "Access the users in a given category of the Twitter suggested user list.It is recommended that applications cache this data for no more than one hour.",
				"operationId": "userssuggestionsslug",
				"parameters": [
					{
						"name": "",
						"in": "query",
						"description": "",
						"type": "string"
					},
					{
						"name": "lang",
						"in": "query",
						"description": "",
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [
					""
				]
			}
		},
		"users/suggestions/:slug/members": {
			"get": {
				"summary": "users/suggestions/:slug/members",
				"description": "Access the users in a given category of the Twitter suggested user list and return their most recent status if they are not a protected user.",
				"operationId": "userssuggestionsslugmembers",
				"parameters": [
					{
						"name": "",
						"in": "query",
						"description": "",
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [
					""
				]
			}
		}
	}
}