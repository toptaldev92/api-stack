{
	"swagger": "2.0",
	"info": {
		"title": "Instructure Canvas Courses API",
		"description": "Canvas LMS includes a REST API for accessing and modifying data externally from the main application, in your own programs and scripts. ",
		"termsOfService": "https://www.canvaslms.com/policies/api-policy",
		"version": "v1"
	},
	"host": "canvas.instructure.com",
	"basePath": "/api/v1",
	"schemes": ["http"],
	"produces": ["application/json"],
	"consumes": ["application/json"],
	"paths": {
		"/courses": {
			"get": {
				"summary": "List your courses",
				"description": "",
				"operationId": "list-your-courses",
				"parameters": [{
					"in": "query",
					"name": "enrollment_role",
					"description": "Deprecated When set, only return courses where the user is enrolled withnthe specified course-level role.  This can be a role created with thenAdd Role API or a base role type ofn&#39;StudentEnrollment&#39;, &#39;TeacherEnrollment&#39;,n&#39;TaEnrollment&#39;, &#39;ObserverEnrollment&#39;, orn&#39;DesignerEnrollment&#39;.",
					"type": "string"
				},
				{
					"in": "query",
					"name": "enrollment_role_id",
					"description": "When set, only return courses where the user is enrolled with the specifiedncourse-level role.  This can be a role created with thenAdd Role API or a built_in role typenof &#39;StudentEnrollment&#39;, &#39;TeacherEnrollment&#39;,n&#39;TaEnrollment&#39;, &#39;ObserverEnrollment&#39;, orn&#39;DesignerEnrollment&#39;.",
					"type": "integer"
				},
				{
					"in": "query",
					"name": "enrollment_type",
					"description": "When set, only return courses where the user is enrolled as this type. Fornexample, set to u201cteacheru201d to return only courses where the user is enrollednas a Teacher.  This argument is ignored if enrollment_role is given.nn        n        n          Allowed values: teacher, student, ta, observer, designer",
					"type": "string"
				},
				{
					"in": "query",
					"name": "include[]",
					"description": "u201cneeds_grading_countu201d: Optional information to include with each Course.nWhen needs_grading_count is given, and the current user has grading rights,nthe total number of submissions needing grading for all assignments isnreturned.nnu201csyllabus_bodyu201d: Optional information to include with each Course. Whennsyllabus_body is given the user-generated html for the course syllabus isnreturned.nnu201ctotal_scoresu201d: Optional information to include with each Course. Whenntotal_scores is given, any student enrollments will also include the fieldsn&#39;computed_current_score&#39;, &#39;computed_final_score&#39;,n&#39;computed_current_grade&#39;, and &#39;computed_final_grade&#39; (seenEnrollment documentation for more information on these fields). Thisnargument is ignored if the course is configured to hide final grades.nnu201ccurrent_grading_period_scoresu201d: Optional information to include with eachnCourse. When current_grading_period_scores is given and total_scores isngiven, any student enrollments will also include the fieldsn&#39;multiple_grading_periods_enabled&#39;,n&#39;totals_for_all_grading_periods_option&#39;,n&#39;current_grading_period_title&#39;,n&#39;current_grading_period_id&#39;,ncurrent_period_computed_current_score&#39;,n&#39;current_period_computed_final_score&#39;,n&#39;current_period_computed_current_grade&#39;, andn&#39;current_period_computed_final_grade&#39; (see Enrollment documentationnfor more information on these fields). This argument is ignored if thencourse is configured to hide final grades or if the total_scores argumentnis not included.nnu201ctermu201d: Optional information to include with each Course. When term isngiven, the information for the enrollment term for each course is returned.nnu201ccourse_progressu201d: Optional information to include with each Course. Whenncourse_progress is given, each course will include an&#39;course_progress&#39; object with the fields:n&#39;requirement_count&#39;, an integer specifying the total number ofnrequirements in the course, &#39;requirement_completed_count&#39;, anninteger specifying the total number of requirements in this course thatnhave been completed, and &#39;next_requirement_url&#39;, a string url tonthe next requirement item, and &#39;completed_at&#39;, the date the coursenwas completed (null if incomplete). &#39;next_requirement_url&#39; will bennull if all requirements have been completed or the current module does notnrequire sequential progress. u201ccourse_progressu201d will return an error messagenif the course is not module based or the user is not enrolled as a studentnin the course.nnu201csectionsu201d: Section enrollment information to include with each Course.nReturns an array of hashes containing the section ID (id), section namen(name), start and end dates (start_at, end_at), as well as the enrollmentntype (enrollment_role, e.g. &#39;StudentEnrollment&#39;).nnu201cstorage_quota_used_mbu201d: The amount of storage space used by the files innthis coursennu201ctotal_studentsu201d: Optional information to include with each Course. Returnsnan integer for the total amount of active and invited students.nnu201cpassback_statusu201d: Include the grade passback_statusnnu201cfavoritesu201d: Optional information to include with each Course. Indicates ifnthe user has marked the course as a favorite course.nnu201cteachersu201d: Teacher information to include with each Course. Returns annarray of hashes containing the UserDisplayninformation for each teacher in the course.nnu201cobserved_usersu201d: Optional information to include with each Course. Willninclude data for observed users if the current user has an observernenrollment.nnn        n        n          Allowed values: needs_grading_count, syllabus_body, total_scores, term, course_progress, sections, storage_quota_used_mb, total_students, favorites, teachers, observed_users, current_grading_period_scores",
					"type": "string"
				},
				{
					"in": "query",
					"name": "state[]",
					"description": "If set, only return courses that are in the given state(s). By default,nu201cavailableu201d is returned for students and observers, and anything exceptnu201cdeletedu201d, for all other enrollment typesnn        n        n          Allowed values: unpublished, available, completed, deleted",
					"type": "string"
				}],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [""],
				"security": []
			}
		},
		"/courses/{course_id}/activity_stream": {
			"get": {
				"summary": "Course activity stream",
				"description": "",
				"operationId": "course-activity-stream",
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [""],
				"security": []
			}
		},
		"/courses/{course_id}/activity_stream/summary": {
			"get": {
				"summary": "Course activity stream summary",
				"description": "",
				"operationId": "course-activity-stream-summary",
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [""],
				"security": []
			}
		},
		"/courses/{course_id}/analytics/activity": {
			"get": {
				"summary": "Get course-level participation data",
				"description": "",
				"operationId": "get-courselevel-participation-data",
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [""],
				"security": []
			}
		},
		"/courses/{course_id}/analytics/assignments": {
			"get": {
				"summary": "Get course-level assignment data",
				"description": "",
				"operationId": "get-courselevel-assignment-data",
				"parameters": [{
					"in": "query",
					"name": "async",
					"description": "If async is true, then the course_assignments call can happen asynch-nronously and MAY return a response containing a progress_url key instead ofnan assignments array. If it does, then it is the caller&#39;snresponsibility to poll the API again to see if the progress is complete. Ifnthe data is ready (possibly even on the first async call) then it will benpassed back normally, as documented in the example response.",
					"type": "boolean"
				}],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [""],
				"security": []
			}
		},
		"/courses/{course_id}/analytics/student_summaries": {
			"get": {
				"summary": "Get course-level student summary data",
				"description": "",
				"operationId": "get-courselevel-student-summary-data",
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [""],
				"security": []
			}
		},
		"/courses/{course_id}/analytics/users/student_id/activity": {
			"get": {
				"summary": "Get user-in-a-course-level participation data",
				"description": "",
				"operationId": "get-userinacourselevel-participation-data",
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [""],
				"security": []
			}
		},
		"/courses/{course_id}/analytics/users/student_id/assignments": {
			"get": {
				"summary": "Get user-in-a-course-level assignment data",
				"description": "",
				"operationId": "get-userinacourselevel-assignment-data",
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [""],
				"security": []
			}
		},
		"/courses/{course_id}/analytics/users/student_id/communication": {
			"get": {
				"summary": "Get user-in-a-course-level messaging data",
				"description": "",
				"operationId": "get-userinacourselevel-messaging-data",
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [""],
				"security": []
			}
		},
		"/courses/{course_id}/assignments": {
			"get": {
				"summary": "List assignments",
				"description": "",
				"operationId": "list-assignments",
				"parameters": [{
					"in": "query",
					"name": "bucket",
					"description": "If included, only return certain assignments depending on due date andnsubmission status.nn        n        n          Allowed values: past, overdue, undated, ungraded, upcoming, future",
					"type": "string"
				},
				{
					"in": "query",
					"name": "include[]",
					"description": "Associations to include with the assignment. The u201cassignment_visibilityu201dnoption requires that the Differentiated Assignments course feature benturned on. If u201cobserved_usersu201d is passed, submissions for observed usersnwill also be included as an array.nn        n        n          Allowed values: submission, assignment_visibility, all_dates, overrides, observed_users",
					"type": "string"
				},
				{
					"in": "query",
					"name": "needs_grading_count_by_section",
					"description": "Split up u201cneeds_grading_countu201d by sections into thenu201cneeds_grading_count_by_sectionu201d key, defaults to false",
					"type": "boolean"
				},
				{
					"in": "query",
					"name": "override_assignment_dates",
					"description": "Apply assignment overrides for each assignment, defaults to true.",
					"type": "boolean"
				},
				{
					"in": "query",
					"name": "search_term",
					"description": "The partial title of the assignments to match and return.",
					"type": "string"
				}],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [""],
				"security": []
			},
			"post": {
				"summary": "Create an assignment",
				"description": "",
				"operationId": "create-an-assignment",
				"parameters": [{
					"in": "query",
					"name": "assignment[allowed_extensions][]",
					"description": "Allowed extensions if submission_types includes u201conline_uploadu201dnnExample:nnallowed_extensions: [&quot;docx&quot;,&quot;ppt&quot;]",
					"type": "string"
				},
				{
					"in": "query",
					"name": "assignment[assignment_group_id]",
					"description": "The assignment group id to put the assignment in. Defaults to the topnassignment group in the course.",
					"type": "integer"
				},
				{
					"in": "query",
					"name": "assignment[assignment_overrides][]",
					"description": "List of overrides for the assignment. NOTE: The assignment overridesnfeature is in beta.",
					"type": "assignmentoverride"
				},
				{
					"in": "query",
					"name": "assignment[automatic_peer_reviews]",
					"description": "Whether peer reviews will be assigned automatically by Canvas or ifnteachers must manually assign peer reviews. Does not apply if peer reviewsnare not enabled.",
					"type": "boolean"
				},
				{
					"in": "query",
					"name": "assignment[description]",
					"description": "The assignment&#39;s description, supports HTML.",
					"type": "string"
				},
				{
					"in": "query",
					"name": "assignment[due_at]",
					"description": "The day/time the assignment is due. Accepts times in ISO 8601 format, e.g.n2014-10-21T18:48:00Z.",
					"type": "datetime"
				},
				{
					"in": "query",
					"name": "assignment[external_tool_tag_attributes]",
					"description": "Hash of attributes if submission_types is [u201cexternal_toolu201d] Example:nnexternal_tool_tag_attributes: {n  %r/ url to the external tooln  url: &quot;http://instructure.com&quot;,n  %r/ create a new tab for the module, defaults to false.n  new_tab: falsen}",
					"type": "string"
				},
				{
					"in": "query",
					"name": "assignment[grade_group_students_individually]",
					"description": "If this is a group assignment, teachers have the options to grade studentsnindividually. If false, Canvas will apply the assignment&#39;s score toneach member of the group. If true, the teacher can manually assign scoresnto each member of the group.",
					"type": "integer"
				},
				{
					"in": "query",
					"name": "assignment[grading_standard_id]",
					"description": "The grading standard id to set for the course.  If no value is provided fornthis argument the current grading_standard will be un-set from this course.nThis will update the grading_type for the course to &#39;letter_grade&#39;nunless it is already &#39;gpa_scale&#39;.",
					"type": "integer"
				},
				{
					"in": "query",
					"name": "assignment[grading_type]",
					"description": "The strategy used for grading the assignment. The assignment is ungraded ifnthis field is omitted.nn        n        n          Allowed values: pass_fail, percent, letter_grade, gpa_scale, points",
					"type": "string"
				},
				{
					"in": "query",
					"name": "assignment[group_category_id]",
					"description": "If present, the assignment will become a group assignment assigned to thengroup.",
					"type": "integer"
				},
				{
					"in": "query",
					"name": "assignment[integration_data]",
					"description": "Data related to third party integrations, JSON string required.",
					"type": "string"
				},
				{
					"in": "query",
					"name": "assignment[integration_id]",
					"description": "Unique ID from third party integrations",
					"type": "string"
				},
				{
					"in": "query",
					"name": "assignment[lock_at]",
					"description": "The day/time the assignment is locked after. Accepts times in ISO 8601nformat, e.g. 2014-10-21T18:48:00Z.",
					"type": "datetime"
				},
				{
					"in": "query",
					"name": "assignment[muted]",
					"description": "Whether this assignment is muted. A muted assignment does not send changennotifications and hides grades from students. Defaults to false.",
					"type": "boolean"
				},
				{
					"in": "query",
					"name": "assignment[name]",
					"description": "The assignment name.",
					"type": "string"
				},
				{
					"in": "query",
					"name": "assignment[notify_of_update]",
					"description": "If true, Canvas will send a notification to students in the class notifyingnthem that the content has changed.",
					"type": "boolean"
				},
				{
					"in": "query",
					"name": "assignment[only_visible_to_overrides]",
					"description": "Whether this assignment is only visible to overrides (Only useful ifn&#39;differentiated assignments&#39; account setting is on)",
					"type": "boolean"
				},
				{
					"in": "query",
					"name": "assignment[peer_reviews]",
					"description": "If submission_types does not include external_tool,discussion_topic,nonline_quiz, or on_paper, determines whether or not peer reviews will benturned on for the assignment.",
					"type": "boolean"
				},
				{
					"in": "query",
					"name": "assignment[points_possible]",
					"description": "The maximum points possible on the assignment.",
					"type": "float"
				},
				{
					"in": "query",
					"name": "assignment[position]",
					"description": "The position of this assignment in the group when displaying assignmentnlists.",
					"type": "integer"
				},
				{
					"in": "query",
					"name": "assignment[published]",
					"description": "Whether this assignment is published. (Only useful if &#39;draft state&#39;naccount setting is on) Unpublished assignments are not visible to students.",
					"type": "boolean"
				},
				{
					"in": "query",
					"name": "assignment[submission_types][]",
					"description": "List of supported submission types for the assignment. Unless thenassignment is allowing online submissions, the array should only have onenelement.nnIf not allowing online submissions, your options are:nn&quot;online_quiz&quot;n&quot;none&quot;n&quot;on_paper&quot;n&quot;online_quiz&quot;n&quot;discussion_topic&quot;n&quot;external_tool&quot;nnIf you are allowing online submissions, you can have one or many allowednsubmission types:nn&quot;online_upload&quot;n&quot;online_text_entry&quot;n&quot;online_url&quot;n&quot;media_recording&quot; (Only valid when the Kaltura plugin is enabled)nn        n        n          Allowed values: online_quiz, none, on_paper, online_quiz, discussion_topic, external_tool, online_upload, online_text_entry, online_url, media_recording",
					"type": "string"
				},
				{
					"in": "query",
					"name": "assignment[turnitin_enabled]",
					"description": "Only applies when the Turnitin plugin is enabled for a course and thensubmission_types array includes u201conline_uploadu201d. Toggles Turnitinnsubmissions for the assignment. Will be ignored if Turnitin is notnavailable for the course.",
					"type": "boolean"
				},
				{
					"in": "query",
					"name": "assignment[turnitin_settings]",
					"description": "Settings to send along to turnitin. See Assignment object definition fornformat.",
					"type": "string"
				},
				{
					"in": "query",
					"name": "assignment[unlock_at]",
					"description": "The day/time the assignment is unlocked. Accepts times in ISO 8601 format,ne.g. 2014-10-21T18:48:00Z.",
					"type": "datetime"
				}],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [""],
				"security": []
			}
		},
		"/courses/{course_id}/assignments/assignment_id/gradeable_students": {
			"get": {
				"summary": "List gradeable students",
				"description": "",
				"operationId": "list-gradeable-students",
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [""],
				"security": []
			}
		},
		"/courses/{course_id}/assignments/assignment_id/moderated_students": {
			"get": {
				"summary": "List students selected for moderation",
				"description": "",
				"operationId": "list-students-selected-for-moderation",
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [""],
				"security": []
			},
			"post": {
				"summary": "Select students for moderation",
				"description": "",
				"operationId": "select-students-for-moderation",
				"parameters": [{
					"in": "query",
					"name": "student_ids[]",
					"description": "user ids for students to select for moderation",
					"type": "number"
				}],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [""],
				"security": []
			}
		},
		"/courses/{course_id}/assignments/assignment_id/overrides": {
			"get": {
				"summary": "List assignment overrides",
				"description": "",
				"operationId": "list-assignment-overrides",
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [""],
				"security": []
			},
			"post": {
				"summary": "Create an assignment override",
				"description": "",
				"operationId": "create-an-assignment-override",
				"parameters": [{
					"in": "query",
					"name": "assignment_override[course_section_id]",
					"description": "The ID of the override&#39;s target section. If present, must identify annactive section of the assignment&#39;s course not already targetted by andifferent override.",
					"type": "integer"
				},
				{
					"in": "query",
					"name": "assignment_override[due_at]",
					"description": "The day/time the overridden assignment is due. Accepts times in ISO 8601nformat, e.g. 2014-10-21T18:48:00Z. If absent, this override will not affectndue date. May be present but null to indicate the override removes anynprevious due date.",
					"type": "datetime"
				},
				{
					"in": "query",
					"name": "assignment_override[group_id]",
					"description": "The ID of the override&#39;s target group. If present, the followingnconditions must be met for the override to be successful:nnthe assignment MUST be a group assignment (a group_category_id is assignednto it)nnthe ID must identify an active group in the group set the assignment is innnthe ID must not be targetted by a different overridennnSee Appendix: Group assignments for more info.",
					"type": "integer"
				},
				{
					"in": "query",
					"name": "assignment_override[lock_at]",
					"description": "The day/time the overridden assignment becomes locked. Accepts times in ISOn8601 format, e.g. 2014-10-21T18:48:00Z. If absent, this override will notnaffect the lock date. May be present but null to indicate the overridenremoves any previous lock date.",
					"type": "datetime"
				},
				{
					"in": "query",
					"name": "assignment_override[student_ids][]",
					"description": "The IDs of the override&#39;s target students. If present, the IDs mustneach identify a user with an active student enrollment in the course thatnis not already targetted by a different adhoc override.",
					"type": "integer"
				},
				{
					"in": "query",
					"name": "assignment_override[title]",
					"description": "The title of the adhoc assignment override. Required if student_ids isnpresent, ignored otherwise (the title is set to the name of the targettedngroup or section instead).",
					"type": "string"
				},
				{
					"in": "query",
					"name": "assignment_override[unlock_at]",
					"description": "The day/time the overridden assignment becomes unlocked. Accepts times innISO 8601 format, e.g. 2014-10-21T18:48:00Z. If absent, this override willnnot affect the unlock date. May be present but null to indicate thenoverride removes any previous unlock date.",
					"type": "datetime"
				}],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [""],
				"security": []
			}
		},
		"/courses/{course_id}/assignments/assignment_id/overrides/{id}": {
			"delete": {
				"summary": "Delete an assignment override",
				"description": "",
				"operationId": "delete-an-assignment-override",
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [""],
				"security": []
			},
			"get": {
				"summary": "Get a single assignment override",
				"description": "",
				"operationId": "get-a-single-assignment-override",
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [""],
				"security": []
			},
			"put": {
				"summary": "Update an assignment override",
				"description": "",
				"operationId": "update-an-assignment-override",
				"parameters": [{
					"in": "query",
					"name": "assignment_override[due_at]",
					"description": "The day/time the overridden assignment is due. Accepts times in ISO 8601nformat, e.g. 2014-10-21T18:48:00Z. If absent, this override will not affectndue date. May be present but null to indicate the override removes anynprevious due date.",
					"type": "datetime"
				},
				{
					"in": "query",
					"name": "assignment_override[lock_at]",
					"description": "The day/time the overridden assignment becomes locked. Accepts times in ISOn8601 format, e.g. 2014-10-21T18:48:00Z. If absent, this override will notnaffect the lock date. May be present but null to indicate the overridenremoves any previous lock date.",
					"type": "datetime"
				},
				{
					"in": "query",
					"name": "assignment_override[student_ids][]",
					"description": "The IDs of the override&#39;s target students. If present, the IDs mustneach identify a user with an active student enrollment in the course thatnis not already targetted by a different adhoc override. Ignored unless thenoverride being updated is adhoc.",
					"type": "integer"
				},
				{
					"in": "query",
					"name": "assignment_override[title]",
					"description": "The title of an adhoc assignment override. Ignored unless the overridenbeing updated is adhoc.",
					"type": "string"
				},
				{
					"in": "query",
					"name": "assignment_override[unlock_at]",
					"description": "The day/time the overridden assignment becomes unlocked. Accepts times innISO 8601 format, e.g. 2014-10-21T18:48:00Z. If absent, this override willnnot affect the unlock date. May be present but null to indicate thenoverride removes any previous unlock date.",
					"type": "datetime"
				}],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [""],
				"security": []
			}
		},
		"/courses/{course_id}/assignments/assignment_id/peer_reviews": {
			"get": {
				"summary": "Get all Peer Reviews",
				"description": "",
				"operationId": "get-all-peer-reviews",
				"parameters": [{
					"in": "query",
					"name": "include[]",
					"description": "Associations to include with the peer review.nn        n        n          Allowed values: submission_comments, user",
					"type": "string"
				}],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [""],
				"security": []
			}
		},
		"/courses/{course_id}/assignments/assignment_id/provisional_grades/publish": {
			"post": {
				"summary": "Publish provisional grades for an assignment",
				"description": "",
				"operationId": "publish-provisional-grades-for-an-assignment",
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [""],
				"security": []
			}
		},
		"/courses/{course_id}/assignments/assignment_id/provisional_grades/status": {
			"get": {
				"summary": "Show provisional grade status for a student",
				"description": "",
				"operationId": "show-provisional-grade-status-for-a-student",
				"parameters": [{
					"in": "query",
					"name": "student_id",
					"description": "The id of the student to show the status for",
					"type": "integer"
				}],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [""],
				"security": []
			}
		},
		"/courses/{course_id}/assignments/assignment_id/provisional_grades/{provisional_grade_id}/copy_to_final_mark": {
			"post": {
				"summary": "Copy provisional grade",
				"description": "",
				"operationId": "copy-provisional-grade",
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [""],
				"security": []
			}
		},
		"/courses/{course_id}/assignments/assignment_id/provisional_grades/{provisional_grade_id}/select": {
			"put": {
				"summary": "Select provisional grade",
				"description": "",
				"operationId": "select-provisional-grade",
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [""],
				"security": []
			}
		},
		"/courses/{course_id}/assignments/assignment_id/submissions": {
			"get": {
				"summary": "List assignment submissions",
				"description": "",
				"operationId": "list-assignment-submissions",
				"parameters": [{
					"in": "query",
					"name": "grouped",
					"description": "If this argument is true, the response will be grouped by student groups.",
					"type": "boolean"
				},
				{
					"in": "query",
					"name": "include[]",
					"description": "Associations to include with the group.nn        n        n          Allowed values: submission_history, submission_comments, rubric_assessment, assignment, visibility, course, user",
					"type": "string"
				}],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [""],
				"security": []
			},
			"post": {
				"summary": "Submit an assignment",
				"description": "",
				"operationId": "submit-an-assignment",
				"parameters": [{
					"in": "query",
					"name": "comment[text_comment]",
					"description": "Include a textual comment with the submission.",
					"type": "string"
				},
				{
					"in": "query",
					"name": "submission[body]",
					"description": "Submit the assignment as an HTML document snippet. Note this HTML snippetnwill be sanitized using the same ruleset as a submission made from thenCanvas web UI. The sanitized HTML will be returned in the response as thensubmission body. Requires a submission_type of u201conline_text_entryu201d.",
					"type": "string"
				},
				{
					"in": "query",
					"name": "submission[file_ids][]",
					"description": "Submit the assignment as a set of one or more previously uploaded filesnresiding in the submitting user&#39;s files section (or the group&#39;snfiles section, for group assignments).nnTo upload a new file to submit, see the submissionsnUpload a file API.nnRequires a submission_type of u201conline_uploadu201d.",
					"type": "integer"
				},
				{
					"in": "query",
					"name": "submission[media_comment_id]",
					"description": "The media comment id to submit. Media comment ids can be submitted via thisnAPI, however, note that there is not yet an API to generate or listnexisting media comments, so this functionality is currently of limited use.nnRequires a submission_type of u201cmedia_recordingu201d.",
					"type": "string"
				},
				{
					"in": "query",
					"name": "submission[media_comment_type]",
					"description": "The type of media comment being submitted.nn        n        n          Allowed values: audio, video",
					"type": "string"
				},
				{
					"in": "query",
					"name": "submission[submission_type]",
					"description": "The type of submission being made. The assignment submission_types mustninclude this submission type as an allowed option, or the submission willnbe rejected with a 400 error.nnThe submission_type given determines which of the following parameters isnused. For instance, to submit a URL, submission [submission_type] must benset to u201conline_urlu201d, otherwise the submission [url] parameter will benignored.nn        n        n          Allowed values: online_text_entry, online_url, online_upload, media_recording",
					"type": "string"
				},
				{
					"in": "query",
					"name": "submission[url]",
					"description": "Submit the assignment as a URL. The URL scheme must be u201chttpu201d or u201chttpsu201d,nno u201cftpu201d or other URL schemes are allowed. If no scheme is given (e.g. u201cwww.example.comu201d) then u201chttpu201d will benassumed. Requires a submission_type of u201conline_urlu201d.",
					"type": "string"
				}],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [""],
				"security": []
			}
		},
		"/courses/{course_id}/assignments/assignment_id/submissions/update_grades": {
			"post": {
				"summary": "Grade or comment on multiple submissions",
				"description": "",
				"operationId": "grade-or-comment-on-multiple-submissions",
				"parameters": [{
					"in": "query",
					"name": "grade_data[&lt;student_id&gt;][file_ids][]",
					"description": "See documentation for the comment[] arguments in thenSubmissions Update documentation",
					"type": "integer"
				},
				{
					"in": "query",
					"name": "grade_data[&lt;student_id&gt;][group_comment]",
					"description": "no description",
					"type": "boolean"
				},
				{
					"in": "query",
					"name": "grade_data[&lt;student_id&gt;][media_comment_id]",
					"description": "no description",
					"type": "string"
				},
				{
					"in": "query",
					"name": "grade_data[&lt;student_id&gt;][media_comment_type]",
					"description": "no descriptionnn        n        n          Allowed values: audio, video",
					"type": "string"
				},
				{
					"in": "query",
					"name": "grade_data[&lt;student_id&gt;][posted_grade]",
					"description": "See documentation for the posted_grade argument in thenSubmissions Update documentation",
					"type": "string"
				},
				{
					"in": "query",
					"name": "grade_data[&lt;student_id&gt;][rubric_assessment]",
					"description": "See documentation for the rubric_assessment argument in thenSubmissions Update documentation",
					"type": "rubricassessment"
				},
				{
					"in": "query",
					"name": "grade_data[&lt;student_id&gt;][text_comment]",
					"description": "no description",
					"type": "string"
				}],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [""],
				"security": []
			}
		},
		"/courses/{course_id}/assignments/assignment_id/submissions/{submission_id}/peer_reviews": {
			"delete": {
				"summary": "Create Peer Review",
				"description": "",
				"operationId": "create-peer-review",
				"parameters": [{
					"in": "query",
					"name": "user_id",
					"description": "user_id to delete as reviewer on this assignment",
					"type": "integer"
				}],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [""],
				"security": []
			},
			"get": {
				"summary": "Get all Peer Reviews",
				"description": "",
				"operationId": "get-all-peer-reviews",
				"parameters": [{
					"in": "query",
					"name": "include[]",
					"description": "Associations to include with the peer review.nn        n        n          Allowed values: submission_comments, user",
					"type": "string"
				}],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [""],
				"security": []
			},
			"post": {
				"summary": "Create Peer Review",
				"description": "",
				"operationId": "create-peer-review",
				"parameters": [{
					"in": "query",
					"name": "user_id",
					"description": "user_id to assign as reviewer on this assignment",
					"type": "integer"
				}],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [""],
				"security": []
			}
		},
		"/courses/{course_id}/assignments/assignment_id/submissions/{user_id}": {
			"get": {
				"summary": "Get a single submission",
				"description": "",
				"operationId": "get-a-single-submission",
				"parameters": [{
					"in": "query",
					"name": "include[]",
					"description": "Associations to include with the group.nn        n        n          Allowed values: submission_history, submission_comments, rubric_assessment, visibility, course, user",
					"type": "string"
				}],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [""],
				"security": []
			},
			"put": {
				"summary": "Grade or comment on a submission",
				"description": "",
				"operationId": "grade-or-comment-on-a-submission",
				"parameters": [{
					"in": "query",
					"name": "comment[file_ids][]",
					"description": "Attach files to this comment that were previously uploaded using thenSubmission Comment API&#39;s files action",
					"type": "integer"
				},
				{
					"in": "query",
					"name": "comment[group_comment]",
					"description": "Whether or not this comment should be sent to the entire group (defaults tonfalse). Ignored if this is not a group assignment or if no text_comment isnprovided.",
					"type": "boolean"
				},
				{
					"in": "query",
					"name": "comment[media_comment_id]",
					"description": "Add an audio/video comment to the submission. Media comments can be addednvia this API, however, note that there is not yet an API to generate ornlist existing media comments, so this functionality is currently of limitednuse.",
					"type": "string"
				},
				{
					"in": "query",
					"name": "comment[media_comment_type]",
					"description": "The type of media comment being added.nn        n        n          Allowed values: audio, video",
					"type": "string"
				},
				{
					"in": "query",
					"name": "comment[text_comment]",
					"description": "Add a textual comment to the submission.",
					"type": "string"
				},
				{
					"in": "query",
					"name": "include[visibility]",
					"description": "Whether this assignment is visible to the owner of the submission",
					"type": "string"
				},
				{
					"in": "query",
					"name": "rubric_assessment",
					"description": "Assign a rubric assessment to this assignment submission. Thensub-parameters here depend on the rubric for the assignment. The generalnformat is, for each row in the rubric:nnThe points awarded for this row.nnrubric_assessment[criterion_id][points]nnComments to add for this row.nnrubric_assessment[criterion_id][comments]nnFor example, if the assignment rubric is (in JSON format):nn[n  {n    &#39;id&#39;: &#39;crit1&#39;,n    &#39;points&#39;: 10,n    &#39;description&#39;: &#39;Criterion 1&#39;,n    &#39;ratings&#39;:n    [n      { &#39;description&#39;: &#39;Good&#39;, &#39;points&#39;: 10 },n      { &#39;description&#39;: &#39;Poor&#39;, &#39;points&#39;: 3 }n    ]n  },n  {n    &#39;id&#39;: &#39;crit2&#39;,n    &#39;points&#39;: 5,n    &#39;description&#39;: &#39;Criterion 2&#39;,n    &#39;ratings&#39;:n    [n      { &#39;description&#39;: &#39;Complete&#39;, &#39;points&#39;: 5 },n      { &#39;description&#39;: &#39;Incomplete&#39;, &#39;points&#39;: 0 }n    ]n  }n]nnThen a possible set of values for rubric_assessment would be:nnrubric_assessment[crit1][points]=3&amp;rubric_assessment[crit2][points]=5&amp;rubric_assessment[crit2][comments]=Well%20Done.",
					"type": "rubricassessment"
				},
				{
					"in": "query",
					"name": "submission[excuse]",
					"description": "Sets the u201cexcusedu201d status of an assignment.",
					"type": "boolean"
				},
				{
					"in": "query",
					"name": "submission[posted_grade]",
					"description": "Assign a score to the submission, updating both the u201cscoreu201d and u201cgradeu201dnfields on the submission record. This parameter can be passed in a fewndifferent formats:npointsnnA floating point or integral value, such as u201c13.5u201d. The gradennnwill be interpreted directly as the score of the assignment.nValues above assignment.points_possible are allowed, for awardingnextra credit.npercentagennA floating point value appended with a percent sign, such asnnn&quot;40%&quot;. The grade will be interpreted as a percentage score on thenassignment, where 100% == assignment.points_possible. Values above 100%nare allowed, for awarding extra credit.nletter gradennA letter grade, following the assignment&#39;s defined letternnngrading scheme. For example, &quot;A-&quot;. The resulting score will be the highnend of the defined range for the letter grade. For instance, if &quot;B&quot; isndefined as 86% to 84%, a letter grade of &quot;B&quot; will be worth 86%. Thenletter grade will be rejected if the assignment does not have a definednletter grading scheme. For more fine-grained control of scores, pass innpoints or percentage rather than the letter grade.nu201cpass/complete/fail/incompleteu201dnnA string value of u201cpassu201d or u201ccompleteu201dnnnwill give a score of 100%. &quot;fail&quot; or &quot;incomplete&quot; will give a score ofn0.nnNote that assignments with grading_type of u201cpass_failu201d can only be assignedna score of 0 or assignment.points_possible, nothing inbetween. If anposted_grade in the u201cpointsu201d or u201cpercentageu201d format is sent, the grade willnonly be accepted if the grade equals one of those two values.",
					"type": "string"
				}],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [""],
				"security": []
			}
		},
		"/courses/{course_id}/assignments/assignment_id/submissions/{user_id}/comments/files": {
			"post": {
				"summary": "Upload a file",
				"description": "",
				"operationId": "upload-a-file",
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [""],
				"security": []
			}
		},
		"/courses/{course_id}/assignments/assignment_id/submissions/{user_id}/files": {
			"post": {
				"summary": "Upload a file",
				"description": "",
				"operationId": "upload-a-file",
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [""],
				"security": []
			}
		},
		"/courses/{course_id}/assignments/assignment_id/submissions/{user_id}/read": {
			"delete": {
				"summary": "Mark submission as unread",
				"description": "",
				"operationId": "mark-submission-as-unread",
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [""],
				"security": []
			},
			"put": {
				"summary": "Mark submission as read",
				"description": "",
				"operationId": "mark-submission-as-read",
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [""],
				"security": []
			}
		},
		"/courses/{course_id}/assignments/id": {
			"delete": {
				"summary": "Delete an assignment",
				"description": "",
				"operationId": "delete-an-assignment",
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [""],
				"security": []
			},
			"get": {
				"summary": "Get a single assignment",
				"description": "",
				"operationId": "get-a-single-assignment",
				"parameters": [{
					"in": "query",
					"name": "all_dates",
					"description": "All dates associated with the assignment, if applicable",
					"type": "boolean"
				},
				{
					"in": "query",
					"name": "include[]",
					"description": "Associations to include with the assignment. The u201cassignment_visibilityu201dnoption requires that the Differentiated Assignments course feature benturned on. Ifnn        n        n          Allowed values: submission, assignment_visibility, overrides, observed_users",
					"type": "string"
				},
				{
					"in": "query",
					"name": "needs_grading_count_by_section",
					"description": "Split up u201cneeds_grading_countu201d by sections into thenu201cneeds_grading_count_by_sectionu201d key, defaults to false",
					"type": "boolean"
				},
				{
					"in": "query",
					"name": "override_assignment_dates",
					"description": "Apply assignment overrides to the assignment, defaults to true.",
					"type": "boolean"
				}],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [""],
				"security": []
			},
			"put": {
				"summary": "Edit an assignment",
				"description": "",
				"operationId": "edit-an-assignment",
				"parameters": [{
					"in": "query",
					"name": "assignment[allowed_extensions][]",
					"description": "Allowed extensions if submission_types includes u201conline_uploadu201dnnExample:nnallowed_extensions: [&quot;docx&quot;,&quot;ppt&quot;]",
					"type": "string"
				},
				{
					"in": "query",
					"name": "assignment[assignment_group_id]",
					"description": "The assignment group id to put the assignment in. Defaults to the topnassignment group in the course.",
					"type": "integer"
				},
				{
					"in": "query",
					"name": "assignment[assignment_overrides][]",
					"description": "List of overrides for the assignment. NOTE: The assignment overridesnfeature is in beta.",
					"type": "assignmentoverride"
				},
				{
					"in": "query",
					"name": "assignment[automatic_peer_reviews]",
					"description": "Whether peer reviews will be assigned automatically by Canvas or ifnteachers must manually assign peer reviews. Does not apply if peer reviewsnare not enabled.",
					"type": "boolean"
				},
				{
					"in": "query",
					"name": "assignment[description]",
					"description": "The assignment&#39;s description, supports HTML.",
					"type": "string"
				},
				{
					"in": "query",
					"name": "assignment[due_at]",
					"description": "The day/time the assignment is due. Accepts times in ISO 8601 format, e.g.n2014-10-21T18:48:00Z.",
					"type": "datetime"
				},
				{
					"in": "query",
					"name": "assignment[external_tool_tag_attributes]",
					"description": "Hash of attributes if submission_types is [u201cexternal_toolu201d] Example:nnexternal_tool_tag_attributes: {n  %r/ url to the external tooln  url: &quot;http://instructure.com&quot;,n  %r/ create a new tab for the module, defaults to false.n  new_tab: falsen}",
					"type": "string"
				},
				{
					"in": "query",
					"name": "assignment[grade_group_students_individually]",
					"description": "If this is a group assignment, teachers have the options to grade studentsnindividually. If false, Canvas will apply the assignment&#39;s score toneach member of the group. If true, the teacher can manually assign scoresnto each member of the group.",
					"type": "integer"
				},
				{
					"in": "query",
					"name": "assignment[grading_standard_id]",
					"description": "The grading standard id to set for the course.  If no value is provided fornthis argument the current grading_standard will be un-set from this course.nThis will update the grading_type for the course to &#39;letter_grade&#39;nunless it is already &#39;gpa_scale&#39;.",
					"type": "integer"
				},
				{
					"in": "query",
					"name": "assignment[grading_type]",
					"description": "The strategy used for grading the assignment. The assignment is ungraded ifnthis field is omitted.nn        n        n          Allowed values: pass_fail, percent, letter_grade, gpa_scale, points",
					"type": "string"
				},
				{
					"in": "query",
					"name": "assignment[group_category_id]",
					"description": "If present, the assignment will become a group assignment assigned to thengroup.",
					"type": "integer"
				},
				{
					"in": "query",
					"name": "assignment[integration_data]",
					"description": "Data related to third party integrations, JSON string required.",
					"type": "string"
				},
				{
					"in": "query",
					"name": "assignment[integration_id]",
					"description": "Unique ID from third party integrations",
					"type": "string"
				},
				{
					"in": "query",
					"name": "assignment[lock_at]",
					"description": "The day/time the assignment is locked after. Accepts times in ISO 8601nformat, e.g. 2014-10-21T18:48:00Z.",
					"type": "datetime"
				},
				{
					"in": "query",
					"name": "assignment[muted]",
					"description": "Whether this assignment is muted. A muted assignment does not send changennotifications and hides grades from students. Defaults to false.",
					"type": "boolean"
				},
				{
					"in": "query",
					"name": "assignment[name]",
					"description": "The assignment name.",
					"type": "string"
				},
				{
					"in": "query",
					"name": "assignment[notify_of_update]",
					"description": "If true, Canvas will send a notification to students in the class notifyingnthem that the content has changed.",
					"type": "boolean"
				},
				{
					"in": "query",
					"name": "assignment[only_visible_to_overrides]",
					"description": "Whether this assignment is only visible to overrides (Only useful ifn&#39;differentiated assignments&#39; account setting is on)",
					"type": "boolean"
				},
				{
					"in": "query",
					"name": "assignment[peer_reviews]",
					"description": "If submission_types does not include external_tool,discussion_topic,nonline_quiz, or on_paper, determines whether or not peer reviews will benturned on for the assignment.",
					"type": "boolean"
				},
				{
					"in": "query",
					"name": "assignment[points_possible]",
					"description": "The maximum points possible on the assignment.",
					"type": "float"
				},
				{
					"in": "query",
					"name": "assignment[position]",
					"description": "The position of this assignment in the group when displaying assignmentnlists.",
					"type": "integer"
				},
				{
					"in": "query",
					"name": "assignment[published]",
					"description": "Whether this assignment is published. (Only useful if &#39;draft state&#39;naccount setting is on) Unpublished assignments are not visible to students.",
					"type": "boolean"
				},
				{
					"in": "query",
					"name": "assignment[submission_types][]",
					"description": "List of supported submission types for the assignment. Unless thenassignment is allowing online submissions, the array should only have onenelement.nnIf not allowing online submissions, your options are:nn&quot;online_quiz&quot;n&quot;none&quot;n&quot;on_paper&quot;n&quot;online_quiz&quot;n&quot;discussion_topic&quot;n&quot;external_tool&quot;nnIf you are allowing online submissions, you can have one or many allowednsubmission types:nn&quot;online_upload&quot;n&quot;online_text_entry&quot;n&quot;online_url&quot;n&quot;media_recording&quot; (Only valid when the Kaltura plugin is enabled)nn        n        n          Allowed values: online_quiz, none, on_paper, online_quiz, discussion_topic, external_tool, online_upload, online_text_entry, online_url, media_recording",
					"type": "string"
				},
				{
					"in": "query",
					"name": "assignment[turnitin_enabled]",
					"description": "Only applies when the Turnitin plugin is enabled for a course and thensubmission_types array includes u201conline_uploadu201d. Toggles Turnitinnsubmissions for the assignment. Will be ignored if Turnitin is notnavailable for the course.",
					"type": "boolean"
				},
				{
					"in": "query",
					"name": "assignment[turnitin_settings]",
					"description": "Settings to send along to turnitin. See Assignment object definition fornformat.",
					"type": "string"
				},
				{
					"in": "query",
					"name": "assignment[unlock_at]",
					"description": "The day/time the assignment is unlocked. Accepts times in ISO 8601 format,ne.g. 2014-10-21T18:48:00Z.",
					"type": "datetime"
				}],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [""],
				"security": []
			}
		},
		"/courses/{course_id}/assignment_groups": {
			"get": {
				"summary": "List assignment groups",
				"description": "",
				"operationId": "list-assignment-groups",
				"parameters": [{
					"in": "query",
					"name": "grading_period_id",
					"description": "The id of the grading period in which assignment groups are being requestedn(Requires the Multiple Grading Periods feature turned on.)",
					"type": "integer"
				},
				{
					"in": "query",
					"name": "include[]",
					"description": "Associations to include with the group. u201cdiscussion_topicu201d, u201call_datesu201dnu201cassignment_visibilityu201d &amp; u201csubmissionu201d are only valid are only valid ifnu201cassignmentsu201d is also included. The u201cassignment_visibilityu201d optionnadditionally requires that the Differentiated Assignments course feature benturned on.nn        n        n          Allowed values: assignments, discussion_topic, all_dates, assignment_visibility, overrides, submission",
					"type": "string"
				},
				{
					"in": "query",
					"name": "override_assignment_dates",
					"description": "Apply assignment overrides for each assignment, defaults to true.",
					"type": "boolean"
				},
				{
					"in": "query",
					"name": "scope_assignments_to_student",
					"description": "If true, all assignments returned will apply to the current user in thenspecified grading period. If assignments apply to other students in thenspecified grading period, but not the current user, they will not benreturned. (Requires the grading_period_id argument and the Multiple GradingnPeriods feature turned on. In addition, the current user must be anstudent.)",
					"type": "boolean"
				}],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [""],
				"security": []
			},
			"post": {
				"summary": "Create an Assignment Group",
				"description": "",
				"operationId": "create-an-assignment-group",
				"parameters": [{
					"in": "query",
					"name": "group_weight",
					"description": "The percent of the total grade that this assignment group represents",
					"type": "float"
				},
				{
					"in": "query",
					"name": "name",
					"description": "The assignment group&#39;s name",
					"type": "string"
				},
				{
					"in": "query",
					"name": "position",
					"description": "The position of this assignment group in relation to the other assignmentngroups",
					"type": "integer"
				},
				{
					"in": "query",
					"name": "rules",
					"description": "The grading rules that are applied within this assignment group See thenAssignment Group object definition for format",
					"type": "string"
				}],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [""],
				"security": []
			}
		},
		"/courses/{course_id}/assignment_groups/assignment_group_id": {
			"delete": {
				"summary": "Destroy an Assignment Group",
				"description": "",
				"operationId": "destroy-an-assignment-group",
				"parameters": [{
					"in": "query",
					"name": "move_assignments_to",
					"description": "The ID of an active Assignment Group to which the assignments that arencurrently assigned to the destroyed Assignment Group will be assigned.nNOTE: If this argument is not provided, any assignments in this AssignmentnGroup will be deleted.",
					"type": "integer"
				}],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [""],
				"security": []
			},
			"get": {
				"summary": "Get an Assignment Group",
				"description": "",
				"operationId": "get-an-assignment-group",
				"parameters": [{
					"in": "query",
					"name": "grading_period_id",
					"description": "The id of the grading period in which assignment groups are being requestedn(Requires the Multiple Grading Periods account feature turned on)",
					"type": "integer"
				},
				{
					"in": "query",
					"name": "include[]",
					"description": "Associations to include with the group. u201cdiscussion_topicu201d andnu201cassignment_visibilityu201d and u201csubmissionu201d are only valid if u201cassignmentsu201d isnalso included. The u201cassignment_visibilityu201d option additionally requiresnthat the Differentiated Assignments course feature be turned on.nn        n        n          Allowed values: assignments, discussion_topic, assignment_visibility, submission",
					"type": "string"
				},
				{
					"in": "query",
					"name": "override_assignment_dates",
					"description": "Apply assignment overrides for each assignment, defaults to true.",
					"type": "boolean"
				}],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [""],
				"security": []
			},
			"put": {
				"summary": "Edit an Assignment Group",
				"description": "",
				"operationId": "edit-an-assignment-group",
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [""],
				"security": []
			}
		},
		"/courses/{course_id}/conferences": {
			"get": {
				"summary": "List conferences",
				"description": "",
				"operationId": "list-conferences",
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [""],
				"security": []
			}
		},
		"/courses/{course_id}/content_exports": {
			"get": {
				"summary": "List content exports",
				"description": "",
				"operationId": "list-content-exports",
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [""],
				"security": []
			},
			"post": {
				"summary": "Export content",
				"description": "",
				"operationId": "export-content",
				"parameters": [{
					"in": "query",
					"name": "export_type",
					"description": "u201ccommon_cartridgeu201dnnExport the contents of the course in the Common Cartridge (.imscc) formatnu201cqtiu201dnnExport quizzes from a course in the QTI formatnu201czipu201dnnExport files from a course, group, or user in a zip filennn        n        n          Allowed values: common_cartridge, qti, zip",
					"type": "string"
				},
				{
					"in": "query",
					"name": "skip_notifications",
					"description": "Don&#39;t send the notifications about the export to the user. Default:nfalse",
					"type": "boolean"
				}],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [""],
				"security": []
			}
		},
		"/courses/{course_id}/content_exports/id": {
			"get": {
				"summary": "Show content export",
				"description": "",
				"operationId": "show-content-export",
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [""],
				"security": []
			}
		},
		"/courses/{course_id}/content_licenses": {
			"get": {
				"summary": "List licenses",
				"description": "",
				"operationId": "list-licenses",
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [""],
				"security": []
			}
		},
		"/courses/{course_id}/content_migrations": {
			"get": {
				"summary": "List content migrations",
				"description": "",
				"operationId": "list-content-migrations",
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [""],
				"security": []
			},
			"post": {
				"summary": "Create a content migration",
				"description": "",
				"operationId": "create-a-content-migration",
				"parameters": [{
					"in": "query",
					"name": "date_shift_options[day_substitutions][X]",
					"description": "Move anything scheduled for day &#39;X&#39; to the specified day.n(0-Sunday, 1-Monday, 2-Tuesday, 3-Wednesday, 4-Thursday, 5-Friday,n6-Saturday)",
					"type": "integer"
				},
				{
					"in": "query",
					"name": "date_shift_options[new_end_date]",
					"description": "The new end date for the source content/course",
					"type": "date"
				},
				{
					"in": "query",
					"name": "date_shift_options[new_start_date]",
					"description": "The new start date for the content/course",
					"type": "date"
				},
				{
					"in": "query",
					"name": "date_shift_options[old_end_date]",
					"description": "The original end date of the source content/course",
					"type": "date"
				},
				{
					"in": "query",
					"name": "date_shift_options[old_start_date]",
					"description": "The original start date of the source content/course",
					"type": "date"
				},
				{
					"in": "query",
					"name": "date_shift_options[remove_dates]",
					"description": "Whether to remove dates in the copied course. Cannot be used in conjunctionnwith shift_dates.",
					"type": "boolean"
				},
				{
					"in": "query",
					"name": "date_shift_options[shift_dates]",
					"description": "Whether to shift dates in the copied course",
					"type": "boolean"
				},
				{
					"in": "query",
					"name": "migration_type",
					"description": "The type of the migration. Use thenMigrator endpoint tonsee all available migrators. Default allowed values:ncanvas_cartridge_importer, common_cartridge_importer, course_copy_importer,nzip_file_importer, qti_converter, moodle_converter",
					"type": "string"
				},
				{
					"in": "query",
					"name": "pre_attachment[*]",
					"description": "Other file upload properties, See File Upload Documentation",
					"type": "string"
				},
				{
					"in": "query",
					"name": "pre_attachment[name]",
					"description": "Required if uploading a file. This is the first step in uploading a file tonthe content migration. See the File Upload Documentation for details on the file upload workflow.",
					"type": "string"
				},
				{
					"in": "query",
					"name": "settings[file_url]",
					"description": "A URL to download the file from. Must not require authentication.",
					"type": "string"
				},
				{
					"in": "query",
					"name": "settings[folder_id]",
					"description": "The folder to unzip the .zip file into for a zip_file_import.",
					"type": "string"
				},
				{
					"in": "query",
					"name": "settings[overwrite_quizzes]",
					"description": "Whether to overwrite quizzes with the same identifiers between contentnpackages.",
					"type": "boolean"
				},
				{
					"in": "query",
					"name": "settings[question_bank_id]",
					"description": "The existing question bank ID to import questions into if not specified innthe content package.",
					"type": "integer"
				},
				{
					"in": "query",
					"name": "settings[question_bank_name]",
					"description": "The question bank to import questions into if not specified in the contentnpackage, if both bank id and name are set, id will take precedence.",
					"type": "string"
				},
				{
					"in": "query",
					"name": "settings[source_course_id]",
					"description": "The course to copy from for a course copy migration. (required if doingncourse copy)",
					"type": "string"
				}],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [""],
				"security": []
			}
		},
		"/courses/{course_id}/content_migrations/content_migration_id/migration_issues": {
			"get": {
				"summary": "List migration issues",
				"description": "",
				"operationId": "list-migration-issues",
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [""],
				"security": []
			}
		},
		"/courses/{course_id}/content_migrations/content_migration_id/migration_issues/{id}": {
			"get": {
				"summary": "Get a migration issue",
				"description": "",
				"operationId": "get-a-migration-issue",
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [""],
				"security": []
			},
			"put": {
				"summary": "Update a migration issue",
				"description": "",
				"operationId": "update-a-migration-issue",
				"parameters": [{
					"in": "query",
					"name": "workflow_state",
					"description": "Set the workflow_state of the issue.nn        n        n          Allowed values: active, resolved",
					"type": "string"
				}],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [""],
				"security": []
			}
		},
		"/courses/{course_id}/content_migrations/id": {
			"get": {
				"summary": "Get a content migration",
				"description": "",
				"operationId": "get-a-content-migration",
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [""],
				"security": []
			},
			"put": {
				"summary": "Update a content migration",
				"description": "",
				"operationId": "update-a-content-migration",
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [""],
				"security": []
			}
		},
		"/courses/{course_id}/content_migrations/migrators": {
			"get": {
				"summary": "List Migration Systems",
				"description": "",
				"operationId": "list-migration-systems",
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [""],
				"security": []
			}
		},
		"/courses/{course_id}/course_copy": {
			"post": {
				"summary": "Copy course content",
				"description": "",
				"operationId": "copy-course-content",
				"parameters": [{
					"in": "query",
					"name": "except[]",
					"description": "A list of the course content types to exclude, all areas not listed will bencopied.nn        n        n          Allowed values: course_settings, assignments, external_tools, files, topics, calendar_events, quizzes, wiki_pages, modules, outcomes",
					"type": "string"
				},
				{
					"in": "query",
					"name": "only[]",
					"description": "A list of the course content types to copy, all areas not listed will notnbe copied.nn        n        n          Allowed values: course_settings, assignments, external_tools, files, topics, calendar_events, quizzes, wiki_pages, modules, outcomes",
					"type": "string"
				},
				{
					"in": "query",
					"name": "source_course",
					"description": "ID or SIS-ID of the course to copy the content from",
					"type": "string"
				}],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [""],
				"security": []
			}
		},
		"/courses/{course_id}/course_copy/id": {
			"get": {
				"summary": "Get course copy status",
				"description": "",
				"operationId": "get-course-copy-status",
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [""],
				"security": []
			}
		},
		"/courses/{course_id}/custom_gradebook_columns": {
			"get": {
				"summary": "List custom gradebook columns",
				"description": "",
				"operationId": "list-custom-gradebook-columns",
				"parameters": [{
					"in": "query",
					"name": "include_hidden",
					"description": "Include hidden parameters (defaults to false)",
					"type": "boolean"
				}],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [""],
				"security": []
			},
			"post": {
				"summary": "Create a custom gradebook column",
				"description": "",
				"operationId": "create-a-custom-gradebook-column",
				"parameters": [{
					"in": "query",
					"name": "column[hidden]",
					"description": "Hidden columns are not displayed in the gradebook",
					"type": "boolean"
				},
				{
					"in": "query",
					"name": "column[position]",
					"description": "The position of the column relative to other custom columns",
					"type": "integer"
				},
				{
					"in": "query",
					"name": "column[teacher_notes]",
					"description": "Set this if the column is created by a teacher.  The gradebook onlynsupports one teacher_notes column.",
					"type": "boolean"
				},
				{
					"in": "query",
					"name": "column[title]",
					"description": "no description",
					"type": "string"
				}],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [""],
				"security": []
			}
		},
		"/courses/{course_id}/custom_gradebook_columns/id": {
			"delete": {
				"summary": "Delete a custom gradebook column",
				"description": "",
				"operationId": "delete-a-custom-gradebook-column",
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [""],
				"security": []
			},
			"put": {
				"summary": "Update a custom gradebook column",
				"description": "",
				"operationId": "update-a-custom-gradebook-column",
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [""],
				"security": []
			}
		},
		"/courses/{course_id}/custom_gradebook_columns/id/data": {
			"get": {
				"summary": "List entries for a column",
				"description": "",
				"operationId": "list-entries-for-a-column",
				"parameters": [{
					"in": "query",
					"name": "include_hidden",
					"description": "If true, hidden columns will be included in the result. If false or absent,nonly visible columns will be returned.",
					"type": "boolean"
				}],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [""],
				"security": []
			}
		},
		"/courses/{course_id}/custom_gradebook_columns/id/data/{user_id}": {
			"put": {
				"summary": "Update column data",
				"description": "",
				"operationId": "update-column-data",
				"parameters": [{
					"in": "query",
					"name": "column_data[content]",
					"description": "Column content.  Setting this to blank will delete the datum object.",
					"type": "string"
				}],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [""],
				"security": []
			}
		},
		"/courses/{course_id}/custom_gradebook_columns/reorder": {
			"post": {
				"summary": "Reorder custom columns",
				"description": "",
				"operationId": "reorder-custom-columns",
				"parameters": [{
					"in": "query",
					"name": "order[]",
					"description": "no description",
					"type": "integer"
				}],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [""],
				"security": []
			}
		},
		"/courses/{course_id}/discussion_topics": {
			"get": {
				"summary": "List discussion topics",
				"description": "",
				"operationId": "list-discussion-topics",
				"parameters": [{
					"in": "query",
					"name": "only_announcements",
					"description": "Return announcements instead of discussion topics. Defaults to false",
					"type": "boolean"
				},
				{
					"in": "query",
					"name": "order_by",
					"description": "Determines the order of the discussion topic list. Defaults to u201cpositionu201d.nn        n        n          Allowed values: position, recent_activity",
					"type": "string"
				},
				{
					"in": "query",
					"name": "scope",
					"description": "Only return discussion topics in the given state(s). Defaults to includingnall topics. Filtering is done after pagination, so pages may be smallernthan requested if topics are filtered. Can pass multiple states as commanseparated string.nn        n        n          Allowed values: locked, unlocked, pinned, unpinned",
					"type": "string"
				},
				{
					"in": "query",
					"name": "search_term",
					"description": "The partial title of the discussion topics to match and return.",
					"type": "string"
				}],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [""],
				"security": []
			},
			"post": {
				"summary": "Create a new discussion topic",
				"description": "",
				"operationId": "create-a-new-discussion-topic",
				"parameters": [{
					"in": "query",
					"name": "allow_rating",
					"description": "If true, users will be allowed to rate entries.",
					"type": "boolean"
				},
				{
					"in": "query",
					"name": "assignment",
					"description": "To create an assignment discussion, pass the assignment parameters as ansub-object. See the Create an Assignment API for the available parameters. The name parameter will benignored, as it&#39;s taken from the discussion title. If you want to make andiscussion that was an assignment NOT an assignment, pass set_assignment =nfalse as part of the assignment object",
					"type": "assignment"
				},
				{
					"in": "query",
					"name": "attachment",
					"description": "A multipart/form-data form-field-style attachment. Attachments larger thann1 kilobyte are subject to quota restrictions.",
					"type": "file"
				},
				{
					"in": "query",
					"name": "delayed_post_at",
					"description": "If a timestamp is given, the topic will not be published until that time.",
					"type": "datetime"
				},
				{
					"in": "query",
					"name": "discussion_type",
					"description": "The type of discussion. Defaults to side_comment if not value is given.nAccepted values are &#39;side_comment&#39;, for discussions that only allownone level of nested comments, and &#39;threaded&#39; for fully threadedndiscussions.nn        n        n          Allowed values: side_comment, threaded",
					"type": "string"
				},
				{
					"in": "query",
					"name": "group_category_id",
					"description": "If present, the topic will become a group discussion assigned to the group.",
					"type": "integer"
				},
				{
					"in": "query",
					"name": "is_announcement",
					"description": "If true, this topic is an announcement. It will appear in thenannouncement&#39;s section rather than the discussions section. Thisnrequires announcment-posting permissions.",
					"type": "boolean"
				},
				{
					"in": "query",
					"name": "lock_at",
					"description": "If a timestamp is given, the topic will be scheduled to lock at thenprovided timestamp. If the timestamp is in the past, the topic will benlocked.",
					"type": "datetime"
				},
				{
					"in": "query",
					"name": "message",
					"description": "no description",
					"type": "string"
				},
				{
					"in": "query",
					"name": "only_graders_can_rate",
					"description": "If true, only graders will be allowed to rate entries.",
					"type": "boolean"
				},
				{
					"in": "query",
					"name": "pinned",
					"description": "If true, this topic will be listed in the u201cPinned Discussionu201d section",
					"type": "boolean"
				},
				{
					"in": "query",
					"name": "podcast_enabled",
					"description": "If true, the topic will have an associated podcast feed.",
					"type": "boolean"
				},
				{
					"in": "query",
					"name": "podcast_has_student_posts",
					"description": "If true, the podcast will include posts from students as well. Impliesnpodcast_enabled.",
					"type": "boolean"
				},
				{
					"in": "query",
					"name": "position_after",
					"description": "By default, discussions are sorted chronologically by creation date, youncan pass the id of another topic to have this one show up after the othernwhen they are listed.",
					"type": "string"
				},
				{
					"in": "query",
					"name": "published",
					"description": "Whether this topic is published (true) or draft state (false). Onlynteachers and TAs have the ability to create draft state topics.",
					"type": "boolean"
				},
				{
					"in": "query",
					"name": "require_initial_post",
					"description": "If true then a user may not respond to other replies until that user hasnmade an initial reply. Defaults to false.",
					"type": "boolean"
				},
				{
					"in": "query",
					"name": "sort_by_rating",
					"description": "If true, entries will be sorted by rating.",
					"type": "boolean"
				},
				{
					"in": "query",
					"name": "title",
					"description": "no description",
					"type": "string"
				}],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [""],
				"security": []
			}
		},
		"/courses/{course_id}/discussion_topics/reorder": {
			"post": {
				"summary": "Reorder pinned topics",
				"description": "",
				"operationId": "reorder-pinned-topics",
				"parameters": [{
					"in": "query",
					"name": "order[]",
					"description": "The ids of the pinned discussion topics in the desired order. (For example,nu201corder=104,102,103u201d.)",
					"type": "integer"
				}],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [""],
				"security": []
			}
		},
		"/courses/{course_id}/discussion_topics/topic_id": {
			"delete": {
				"summary": "Delete a topic",
				"description": "",
				"operationId": "delete-a-topic",
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [""],
				"security": []
			},
			"get": {
				"summary": "Get a single topic",
				"description": "",
				"operationId": "get-a-single-topic",
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [""],
				"security": []
			},
			"put": {
				"summary": "Update a topic",
				"description": "",
				"operationId": "update-a-topic",
				"parameters": [{
					"in": "query",
					"name": "allow_rating",
					"description": "If true, users will be allowed to rate entries.",
					"type": "boolean"
				},
				{
					"in": "query",
					"name": "assignment",
					"description": "To create an assignment discussion, pass the assignment parameters as ansub-object. See the Create an Assignment API for the available parameters. The name parameter will benignored, as it&#39;s taken from the discussion title. If you want to make andiscussion that was an assignment NOT an assignment, pass set_assignment =nfalse as part of the assignment object",
					"type": "assignment"
				},
				{
					"in": "query",
					"name": "delayed_post_at",
					"description": "If a timestamp is given, the topic will not be published until that time.",
					"type": "datetime"
				},
				{
					"in": "query",
					"name": "discussion_type",
					"description": "The type of discussion. Defaults to side_comment if not value is given.nAccepted values are &#39;side_comment&#39;, for discussions that only allownone level of nested comments, and &#39;threaded&#39; for fully threadedndiscussions.nn        n        n          Allowed values: side_comment, threaded",
					"type": "string"
				},
				{
					"in": "query",
					"name": "group_category_id",
					"description": "If present, the topic will become a group discussion assigned to the group.",
					"type": "integer"
				},
				{
					"in": "query",
					"name": "is_announcement",
					"description": "If true, this topic is an announcement. It will appear in thenannouncement&#39;s section rather than the discussions section. Thisnrequires announcment-posting permissions.",
					"type": "boolean"
				},
				{
					"in": "query",
					"name": "lock_at",
					"description": "If a timestamp is given, the topic will be scheduled to lock at thenprovided timestamp. If the timestamp is in the past, the topic will benlocked.",
					"type": "datetime"
				},
				{
					"in": "query",
					"name": "message",
					"description": "no description",
					"type": "string"
				},
				{
					"in": "query",
					"name": "only_graders_can_rate",
					"description": "If true, only graders will be allowed to rate entries.",
					"type": "boolean"
				},
				{
					"in": "query",
					"name": "pinned",
					"description": "If true, this topic will be listed in the u201cPinned Discussionu201d section",
					"type": "boolean"
				},
				{
					"in": "query",
					"name": "podcast_enabled",
					"description": "If true, the topic will have an associated podcast feed.",
					"type": "boolean"
				},
				{
					"in": "query",
					"name": "podcast_has_student_posts",
					"description": "If true, the podcast will include posts from students as well. Impliesnpodcast_enabled.",
					"type": "boolean"
				},
				{
					"in": "query",
					"name": "position_after",
					"description": "By default, discussions are sorted chronologically by creation date, youncan pass the id of another topic to have this one show up after the othernwhen they are listed.",
					"type": "string"
				},
				{
					"in": "query",
					"name": "published",
					"description": "Whether this topic is published (true) or draft state (false). Onlynteachers and TAs have the ability to create draft state topics.",
					"type": "boolean"
				},
				{
					"in": "query",
					"name": "require_initial_post",
					"description": "If true then a user may not respond to other replies until that user hasnmade an initial reply. Defaults to false.",
					"type": "boolean"
				},
				{
					"in": "query",
					"name": "sort_by_rating",
					"description": "If true, entries will be sorted by rating.",
					"type": "boolean"
				},
				{
					"in": "query",
					"name": "title",
					"description": "no description",
					"type": "string"
				}],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [""],
				"security": []
			}
		},
		"/courses/{course_id}/discussion_topics/topic_id/entries": {
			"get": {
				"summary": "List topic entries",
				"description": "",
				"operationId": "list-topic-entries",
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [""],
				"security": []
			},
			"post": {
				"summary": "Post an entry",
				"description": "",
				"operationId": "post-an-entry",
				"parameters": [{
					"in": "query",
					"name": "attachment",
					"description": "a multipart/form-data form-field-style attachment. Attachments larger thann1 kilobyte are subject to quota restrictions.",
					"type": "string"
				},
				{
					"in": "query",
					"name": "message",
					"description": "The body of the entry.",
					"type": "string"
				}],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [""],
				"security": []
			}
		},
		"/courses/{course_id}/discussion_topics/topic_id/entries/{entry_id}/rating": {
			"post": {
				"summary": "Rate entry",
				"description": "",
				"operationId": "rate-entry",
				"parameters": [{
					"in": "query",
					"name": "rating",
					"description": "A rating to set on this entry. Only 0 and 1 are accepted.",
					"type": "integer"
				}],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [""],
				"security": []
			}
		},
		"/courses/{course_id}/discussion_topics/topic_id/entries/{entry_id}/read": {
			"delete": {
				"summary": "Mark entry as unread",
				"description": "",
				"operationId": "mark-entry-as-unread",
				"parameters": [{
					"in": "query",
					"name": "forced_read_state",
					"description": "A boolean value to set the entry&#39;s forced_read_state. No change is madenif this argument is not specified.",
					"type": "boolean"
				}],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [""],
				"security": []
			},
			"put": {
				"summary": "Mark entry as read",
				"description": "",
				"operationId": "mark-entry-as-read",
				"parameters": [{
					"in": "query",
					"name": "forced_read_state",
					"description": "A boolean value to set the entry&#39;s forced_read_state. No change is madenif this argument is not specified.",
					"type": "boolean"
				}],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [""],
				"security": []
			}
		},
		"/courses/{course_id}/discussion_topics/topic_id/entries/{entry_id}/replies": {
			"get": {
				"summary": "List entry replies",
				"description": "",
				"operationId": "list-entry-replies",
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [""],
				"security": []
			},
			"post": {
				"summary": "Post a reply",
				"description": "",
				"operationId": "post-a-reply",
				"parameters": [{
					"in": "query",
					"name": "attachment",
					"description": "a multipart/form-data form-field-style attachment. Attachments larger thann1 kilobyte are subject to quota restrictions.",
					"type": "string"
				},
				{
					"in": "query",
					"name": "message",
					"description": "The body of the entry.",
					"type": "string"
				}],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [""],
				"security": []
			}
		},
		"/courses/{course_id}/discussion_topics/topic_id/entries/{id}": {
			"delete": {
				"summary": "Delete an entry",
				"description": "",
				"operationId": "delete-an-entry",
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [""],
				"security": []
			},
			"put": {
				"summary": "Update an entry",
				"description": "",
				"operationId": "update-an-entry",
				"parameters": [{
					"in": "query",
					"name": "message",
					"description": "The updated body of the entry.",
					"type": "string"
				}],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [""],
				"security": []
			}
		},
		"/courses/{course_id}/discussion_topics/topic_id/entry_list": {
			"get": {
				"summary": "List entries",
				"description": "",
				"operationId": "list-entries",
				"parameters": [{
					"in": "query",
					"name": "ids[]",
					"description": "A list of entry ids to retrieve. Entries will be returned in id order,nsmallest id first.",
					"type": "string"
				}],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [""],
				"security": []
			}
		},
		"/courses/{course_id}/discussion_topics/topic_id/read": {
			"delete": {
				"summary": "Mark topic as unread",
				"description": "",
				"operationId": "mark-topic-as-unread",
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [""],
				"security": []
			},
			"put": {
				"summary": "Mark topic as read",
				"description": "",
				"operationId": "mark-topic-as-read",
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [""],
				"security": []
			}
		},
		"/courses/{course_id}/discussion_topics/topic_id/read_all": {
			"delete": {
				"summary": "Mark all entries as unread",
				"description": "",
				"operationId": "mark-all-entries-as-unread",
				"parameters": [{
					"in": "query",
					"name": "forced_read_state",
					"description": "A boolean value to set all of the entries&#39; forced_read_state. No changenis made if this argument is not specified.",
					"type": "boolean"
				}],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [""],
				"security": []
			},
			"put": {
				"summary": "Mark all entries as read",
				"description": "",
				"operationId": "mark-all-entries-as-read",
				"parameters": [{
					"in": "query",
					"name": "forced_read_state",
					"description": "A boolean value to set all of the entries&#39; forced_read_state. No changenis made if this argument is not specified.",
					"type": "boolean"
				}],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [""],
				"security": []
			}
		},
		"/courses/{course_id}/discussion_topics/topic_id/subscribed": {
			"delete": {
				"summary": "Unsubscribe from a topic",
				"description": "",
				"operationId": "unsubscribe-from-a-topic",
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [""],
				"security": []
			},
			"put": {
				"summary": "Subscribe to a topic",
				"description": "",
				"operationId": "subscribe-to-a-topic",
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [""],
				"security": []
			}
		},
		"/courses/{course_id}/discussion_topics/topic_id/view": {
			"get": {
				"summary": "Get the full topic",
				"description": "",
				"operationId": "get-the-full-topic",
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [""],
				"security": []
			}
		},
		"/courses/{course_id}/enrollments": {
			"get": {
				"summary": "List enrollments",
				"description": "",
				"operationId": "list-enrollments",
				"parameters": [{
					"in": "query",
					"name": "grading_period_id",
					"description": "Return grades for the given grading_period.  If this parameter is notnspecified, the returned grades will be for the whole course.",
					"type": "integer"
				},
				{
					"in": "query",
					"name": "role[]",
					"description": "A list of enrollment roles to return. Accepted values include course-levelnroles created by the Add Role API asnwell as the base enrollment types accepted by the `type` argument above.",
					"type": "string"
				},
				{
					"in": "query",
					"name": "state[]",
					"description": "Filter by enrollment state. If omitted, &#39;active&#39; andn&#39;invited&#39; enrollments are returned. When querying a user&#39;snenrollments (either via user_id argument or via user enrollments endpoint),nthe following additional synthetic states are supported:nu201ccurrent_and_invitedu201d|u201ccurrent_and_futureu201d|u201ccurrent_and_concludedu201dnn        n        n          Allowed values: active, invited, creation_pending, deleted, rejected, completed, inactive",
					"type": "string"
				},
				{
					"in": "query",
					"name": "type[]",
					"description": "A list of enrollment types to return. Accepted values aren&#39;StudentEnrollment&#39;, &#39;TeacherEnrollment&#39;,n&#39;TaEnrollment&#39;, &#39;DesignerEnrollment&#39;, andn&#39;ObserverEnrollment.&#39; If omitted, all enrollment types arenreturned. This argument is ignored if `role` is given.",
					"type": "string"
				},
				{
					"in": "query",
					"name": "user_id",
					"description": "Filter by user_id (only valid for course or section enrollment queries). Ifnset to the current user&#39;s id, this is a way to determine if the usernhas any enrollments in the course or section, independent of whether thenuser has permission to view other people on the roster.",
					"type": "string"
				}],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [""],
				"security": []
			},
			"post": {
				"summary": "Enroll a user",
				"description": "",
				"operationId": "enroll-a-user",
				"parameters": [{
					"in": "query",
					"name": "enrollment[course_section_id]",
					"description": "The ID of the course section to enroll the student in. If thensection-specific URL is used, this argument is redundant and will benignored.",
					"type": "integer"
				},
				{
					"in": "query",
					"name": "enrollment[enrollment_state]",
					"description": "If set to &#39;active,&#39; student will be immediately enrolled in thencourse. Otherwise they will be required to accept a course invitation.nDefault is &#39;invited.&#39;.nnIf set to &#39;inactive&#39;, student will be listed in the course rosternfor teachers, but will not be able to participate in the course until theirnenrollment is activated.nn        n        n          Allowed values: active, invited, inactive",
					"type": "string"
				},
				{
					"in": "query",
					"name": "enrollment[limit_privileges_to_course_section]",
					"description": "If set, the enrollment will only allow the user to see and interact withnusers enrolled in the section given by course_section_id.nnFor teachers and TAs, this includes grading privileges.nnSection-limited students will not see any users (including teachers andnTAs) not enrolled in their sections.nnUsers may have other enrollments that grant privileges to multiple sectionsnin the same course.",
					"type": "boolean"
				},
				{
					"in": "query",
					"name": "enrollment[notify]",
					"description": "If true, a notification will be sent to the enrolled user. Notificationsnare not sent by default.",
					"type": "boolean"
				},
				{
					"in": "query",
					"name": "enrollment[role]",
					"description": "Assigns a custom course-level role to the user.",
					"type": "deprecated"
				},
				{
					"in": "query",
					"name": "enrollment[role_id]",
					"description": "Assigns a custom course-level role to the user.",
					"type": "integer"
				},
				{
					"in": "query",
					"name": "enrollment[self_enrolled]",
					"description": "If true, marks the enrollment as a self-enrollment, which gives studentsnthe ability to drop the course if desired. Defaults to false.",
					"type": "boolean"
				},
				{
					"in": "query",
					"name": "enrollment[self_enrollment_code]",
					"description": "If the current user is not allowed to manage enrollments in this course,nbut the course allows self-enrollment, the user can self- enroll as anstudent in the default section by passing in a valid code. Whennself-enrolling, the user_id must be &#39;self&#39;. The enrollment_statenwill be set to &#39;active&#39; and all other arguments will be ignored.",
					"type": "string"
				},
				{
					"in": "query",
					"name": "enrollment[type]",
					"description": "Enroll the user as a student, teacher, TA, observer, or designer. If nonvalue is given, the type will be inferred by enrollment if supplied, otherwisen&#39;StudentEnrollment&#39; will be used.nn        n        n          Allowed values: StudentEnrollment, TeacherEnrollment, TaEnrollment, ObserverEnrollment, DesignerEnrollment",
					"type": "string"
				},
				{
					"in": "query",
					"name": "enrollment[user_id]",
					"description": "The ID of the user to be enrolled in the course.",
					"type": "string"
				}],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [""],
				"security": []
			}
		},
		"/courses/{course_id}/enrollments/id": {
			"delete": {
				"summary": "Conclude or inactivate an enrollment",
				"description": "",
				"operationId": "conclude-or-inactivate-an-enrollment",
				"parameters": [{
					"in": "query",
					"name": "task",
					"description": "The action to take on the enrollment. When inactive, a user will stillnappear in the course roster to admins, but be unable to participate.nn        n        n          Allowed values: conclude, delete, inactivate",
					"type": "string"
				}],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [""],
				"security": []
			}
		},
		"/courses/{course_id}/enrollments/id/reactivate": {
			"put": {
				"summary": "Re-activate an enrollment",
				"description": "",
				"operationId": "reactivate-an-enrollment",
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [""],
				"security": []
			}
		},
		"/courses/{course_id}/epub_exports/id": {
			"get": {
				"summary": "Show ePub export",
				"description": "",
				"operationId": "show-epub-export",
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [""],
				"security": []
			}
		},
		"/courses/{course_id}/external_feeds": {
			"get": {
				"summary": "List external feeds",
				"description": "",
				"operationId": "list-external-feeds",
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [""],
				"security": []
			},
			"post": {
				"summary": "Create an external feed",
				"description": "",
				"operationId": "create-an-external-feed",
				"parameters": [{
					"in": "query",
					"name": "header_match",
					"description": "If given, only feed entries that contain this string in their title will benimported",
					"type": "boolean"
				},
				{
					"in": "query",
					"name": "url",
					"description": "The url to the external rss or atom feed",
					"type": "string"
				},
				{
					"in": "query",
					"name": "verbosity",
					"description": "Defaults to u201cfullu201dnn        n        n          Allowed values: full, truncate, link_only",
					"type": "string"
				}],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [""],
				"security": []
			}
		},
		"/courses/{course_id}/external_feeds/external_feed_id": {
			"delete": {
				"summary": "Delete an external feed",
				"description": "",
				"operationId": "delete-an-external-feed",
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [""],
				"security": []
			}
		},
		"/courses/{course_id}/external_tools": {
			"get": {
				"summary": "List external tools",
				"description": "",
				"operationId": "list-external-tools",
				"parameters": [{
					"in": "query",
					"name": "search_term",
					"description": "The partial name of the tools to match and return.",
					"type": "string"
				},
				{
					"in": "query",
					"name": "selectable",
					"description": "If true, then only tools that are meant to be selectable are returned",
					"type": "boolean"
				}],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [""],
				"security": []
			},
			"post": {
				"summary": "Create an external tool",
				"description": "",
				"operationId": "create-an-external-tool",
				"parameters": [{
					"in": "query",
					"name": "account_navigation[enabled]",
					"description": "Set this to enable this feature",
					"type": "boolean"
				},
				{
					"in": "query",
					"name": "account_navigation[text]",
					"description": "The text that will show on the left-tab in the account navigation",
					"type": "string"
				},
				{
					"in": "query",
					"name": "account_navigation[url]",
					"description": "The url of the external tool for account navigation",
					"type": "string"
				},
				{
					"in": "query",
					"name": "config_type",
					"description": "Configuration can be passed in as CC xml instead of using query parameters.nIf this value is u201cby_urlu201d or u201cby_xmlu201d then an xml configuration will benexpected in either the u201cconfig_xmlu201d or u201cconfig_urlu201d parameter. Note thatnthe name parameter overrides the tool name provided in the xml",
					"type": "string"
				},
				{
					"in": "query",
					"name": "config_url",
					"description": "URL where the server can retrieve an XML tool configuration, as specifiednin the CC xml specification. This is required if u201cconfig_typeu201d is set tonu201cby_urlu201d",
					"type": "string"
				},
				{
					"in": "query",
					"name": "config_xml",
					"description": "XML tool configuration, as specified in the CC xml specification. This isnrequired if u201cconfig_typeu201d is set to u201cby_xmlu201d",
					"type": "string"
				},
				{
					"in": "query",
					"name": "consumer_key",
					"description": "The consumer key for the external tool",
					"type": "string"
				},
				{
					"in": "query",
					"name": "course_navigation[default]",
					"description": "Whether the navigation option will show in the course by default or whethernthe teacher will have to explicitly enable it",
					"type": "boolean"
				},
				{
					"in": "query",
					"name": "course_navigation[enabled]",
					"description": "Set this to enable this feature",
					"type": "boolean"
				},
				{
					"in": "query",
					"name": "course_navigation[text]",
					"description": "The text that will show on the left-tab in the course navigation",
					"type": "string"
				},
				{
					"in": "query",
					"name": "course_navigation[url]",
					"description": "The url of the external tool for course navigation",
					"type": "string"
				},
				{
					"in": "query",
					"name": "course_navigation[visibility]",
					"description": "Who will see the navigation tab. u201cadminsu201d for course admins, u201cmembersu201d fornstudents, null for everyonenn        n        n          Allowed values: admins, members",
					"type": "string"
				},
				{
					"in": "query",
					"name": "custom_fields",
					"description": "Custom fields that will be sent to the tool consumer, specified as custom_fields",
					"type": "string"
				},
				{
					"in": "query",
					"name": "description",
					"description": "A description of the tool",
					"type": "string"
				},
				{
					"in": "query",
					"name": "domain",
					"description": "The domain to match links against. Either u201curlu201d or u201cdomainu201d should be set,nnot both.",
					"type": "string"
				},
				{
					"in": "query",
					"name": "editor_button[enabled]",
					"description": "Set this to enable this feature",
					"type": "boolean"
				},
				{
					"in": "query",
					"name": "editor_button[icon_url]",
					"description": "The url of the icon to show in the WYSIWYG editor",
					"type": "string"
				},
				{
					"in": "query",
					"name": "editor_button[selection_height]",
					"description": "The height of the dialog the tool is launched in",
					"type": "string"
				},
				{
					"in": "query",
					"name": "editor_button[selection_width]",
					"description": "The width of the dialog the tool is launched in",
					"type": "string"
				},
				{
					"in": "query",
					"name": "editor_button[url]",
					"description": "The url of the external tool",
					"type": "string"
				},
				{
					"in": "query",
					"name": "icon_url",
					"description": "The url of the icon to show for this tool",
					"type": "string"
				},
				{
					"in": "query",
					"name": "name",
					"description": "The name of the tool",
					"type": "string"
				},
				{
					"in": "query",
					"name": "not_selectable",
					"description": "Default: false, if set to true the tool won&#39;t show up in the externalntool selection UI in modules and assignments",
					"type": "boolean"
				},
				{
					"in": "query",
					"name": "privacy_level",
					"description": "What information to send to the external tool.nn        n        n          Allowed values: anonymous, name_only, public",
					"type": "string"
				},
				{
					"in": "query",
					"name": "resource_selection[enabled]",
					"description": "Set this to enable this feature",
					"type": "boolean"
				},
				{
					"in": "query",
					"name": "resource_selection[icon_url]",
					"description": "The url of the icon to show in the module external tool list",
					"type": "string"
				},
				{
					"in": "query",
					"name": "resource_selection[selection_height]",
					"description": "The height of the dialog the tool is launched in",
					"type": "string"
				},
				{
					"in": "query",
					"name": "resource_selection[selection_width]",
					"description": "The width of the dialog the tool is launched in",
					"type": "string"
				},
				{
					"in": "query",
					"name": "resource_selection[url]",
					"description": "The url of the external tool",
					"type": "string"
				},
				{
					"in": "query",
					"name": "shared_secret",
					"description": "The shared secret with the external tool",
					"type": "string"
				},
				{
					"in": "query",
					"name": "text",
					"description": "The default text to show for this tool",
					"type": "string"
				},
				{
					"in": "query",
					"name": "url",
					"description": "The url to match links against. Either u201curlu201d or u201cdomainu201d should be set, notnboth.",
					"type": "string"
				},
				{
					"in": "query",
					"name": "user_navigation[enabled]",
					"description": "Set this to enable this feature",
					"type": "boolean"
				},
				{
					"in": "query",
					"name": "user_navigation[text]",
					"description": "The text that will show on the left-tab in the user navigation",
					"type": "string"
				},
				{
					"in": "query",
					"name": "user_navigation[url]",
					"description": "The url of the external tool for user navigation",
					"type": "string"
				}],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [""],
				"security": []
			}
		},
		"/courses/{course_id}/external_tools/external_tool_id": {
			"delete": {
				"summary": "Delete an external tool",
				"description": "",
				"operationId": "delete-an-external-tool",
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [""],
				"security": []
			},
			"get": {
				"summary": "Get a single external tool",
				"description": "",
				"operationId": "get-a-single-external-tool",
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [""],
				"security": []
			},
			"put": {
				"summary": "Edit an external tool",
				"description": "",
				"operationId": "edit-an-external-tool",
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [""],
				"security": []
			}
		},
		"/courses/{course_id}/external_tools/sessionless_launch": {
			"get": {
				"summary": "Get a sessionless launch url for an external tool.",
				"description": "",
				"operationId": "get-a-sessionless-launch-url-for-an-external-tool",
				"parameters": [{
					"in": "query",
					"name": "assignment_id",
					"description": "The assignment id for an assignment launch.",
					"type": "string"
				},
				{
					"in": "query",
					"name": "id",
					"description": "The external id of the tool to launch.",
					"type": "string"
				},
				{
					"in": "query",
					"name": "launch_type",
					"description": "The type of launch to perform on the external tool.",
					"type": "string"
				},
				{
					"in": "query",
					"name": "url",
					"description": "The LTI launch url for the external tool.",
					"type": "string"
				}],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [""],
				"security": []
			}
		},
		"/courses/{course_id}/features": {
			"get": {
				"summary": "List features",
				"description": "",
				"operationId": "list-features",
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [""],
				"security": []
			}
		},
		"/courses/{course_id}/features/enabled": {
			"get": {
				"summary": "List enabled features",
				"description": "",
				"operationId": "list-enabled-features",
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [""],
				"security": []
			}
		},
		"/courses/{course_id}/features/flags/feature": {
			"delete": {
				"summary": "Remove feature flag",
				"description": "",
				"operationId": "remove-feature-flag",
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [""],
				"security": []
			},
			"get": {
				"summary": "Get feature flag",
				"description": "",
				"operationId": "get-feature-flag",
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [""],
				"security": []
			},
			"put": {
				"summary": "Set feature flag",
				"description": "",
				"operationId": "set-feature-flag",
				"parameters": [{
					"in": "query",
					"name": "locking_account_id",
					"description": "If set, this FeatureFlag may only be modified by someone withnadministrative rights in the specified account. The locking account must benabove the target object in the account chain.",
					"type": "integer"
				},
				{
					"in": "query",
					"name": "state",
					"description": "u201coffu201dnnThe feature is not available for the course, user, or account andnsub-accounts.nu201callowedu201dnn(valid only on accounts) The feature is off in the account, but may benenabled in sub-accounts and courses by setting a feature flag on thensub-account or course.nu201conu201dnnThe feature is turned on unconditionally for the user, course, or accountnand sub-accounts.nnn        n        n          Allowed values: off, allowed, on",
					"type": "string"
				}],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [""],
				"security": []
			}
		},
		"/courses/{course_id}/files": {
			"get": {
				"summary": "List files",
				"description": "",
				"operationId": "list-files",
				"parameters": [{
					"in": "query",
					"name": "content_types[]",
					"description": "Filter results by content-type. You can specify type/subtype pairs (e.g.,n&#39;image/jpeg&#39;), or simply types (e.g., &#39;image&#39;, which willnmatch &#39;image/gif&#39;, &#39;image/jpeg&#39;, etc.).",
					"type": "string"
				},
				{
					"in": "query",
					"name": "include[]",
					"description": "Array of additional information to include.nu201cuseru201dnnthe user who uploaded the file or last edited its contentnu201cusage_rightsu201dnncopyright and license information for the file (see UsageRights)nnn        n        n          Allowed values: user",
					"type": "string"
				},
				{
					"in": "query",
					"name": "only[]",
					"description": "Array of information to restrict to. Overrides include[]nu201cnamesu201dnnonly returns file name information",
					"type": "array"
				},
				{
					"in": "query",
					"name": "order",
					"description": "The sorting order. Defaults to &#39;asc&#39;.nn        n        n          Allowed values: asc, desc",
					"type": "string"
				},
				{
					"in": "query",
					"name": "search_term",
					"description": "The partial name of the files to match and return.",
					"type": "string"
				},
				{
					"in": "query",
					"name": "sort",
					"description": "Sort results by this field. Defaults to &#39;name&#39;. Note thatn`sort=user` implies `include[]=user`.nn        n        n          Allowed values: name, size, created_at, updated_at, content_type, user",
					"type": "string"
				}],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [""],
				"security": []
			},
			"post": {
				"summary": "Upload a file",
				"description": "",
				"operationId": "upload-a-file",
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [""],
				"security": []
			}
		},
		"/courses/{course_id}/files/id": {
			"get": {
				"summary": "Get file",
				"description": "",
				"operationId": "get-file",
				"parameters": [{
					"in": "query",
					"name": "include[]",
					"description": "Array of additional information to include.nu201cuseru201dnnthe user who uploaded the file or last edited its contentnu201cusage_rightsu201dnncopyright and license information for the file (see UsageRights)nnn        n        n          Allowed values: user",
					"type": "string"
				}],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [""],
				"security": []
			}
		},
		"/courses/{course_id}/files/quota": {
			"get": {
				"summary": "Get quota information",
				"description": "",
				"operationId": "get-quota-information",
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [""],
				"security": []
			}
		},
		"/courses/{course_id}/folders": {
			"get": {
				"summary": "List all folders",
				"description": "",
				"operationId": "list-all-folders",
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [""],
				"security": []
			},
			"post": {
				"summary": "Create folder",
				"description": "",
				"operationId": "create-folder",
				"parameters": [{
					"in": "query",
					"name": "hidden",
					"description": "Flag the folder as hidden",
					"type": "boolean"
				},
				{
					"in": "query",
					"name": "locked",
					"description": "Flag the folder as locked",
					"type": "boolean"
				},
				{
					"in": "query",
					"name": "lock_at",
					"description": "The datetime to lock the folder at",
					"type": "datetime"
				},
				{
					"in": "query",
					"name": "name",
					"description": "The name of the folder",
					"type": "string"
				},
				{
					"in": "query",
					"name": "parent_folder_id",
					"description": "The id of the folder to store the file in. If this and parent_folder_pathnare sent an error will be returned. If neither is given, a default foldernwill be used.",
					"type": "string"
				},
				{
					"in": "query",
					"name": "parent_folder_path",
					"description": "The path of the folder to store the new folder in. The path separator isnthe forward slash `/`, never a back slash. The parent folder will bencreated if it does not already exist. This parameter only applies to newnfolders in a context that has folders, such as a user, a course, or angroup. If this and parent_folder_id are sent an error will be returned. Ifnneither is given, a default folder will be used.",
					"type": "string"
				},
				{
					"in": "query",
					"name": "position",
					"description": "Set an explicit sort position for the folder",
					"type": "integer"
				},
				{
					"in": "query",
					"name": "unlock_at",
					"description": "The datetime to unlock the folder at",
					"type": "datetime"
				}],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [""],
				"security": []
			}
		},
		"/courses/{course_id}/folders/by_path": {
			"get": {
				"summary": "Resolve path",
				"description": "",
				"operationId": "resolve-path",
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [""],
				"security": []
			}
		},
		"/courses/{course_id}/folders/by_path/*full_path": {
			"get": {
				"summary": "Resolve path",
				"description": "",
				"operationId": "resolve-path",
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [""],
				"security": []
			}
		},
		"/courses/{course_id}/folders/id": {
			"get": {
				"summary": "Get folder",
				"description": "",
				"operationId": "get-folder",
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [""],
				"security": []
			}
		},
		"/courses/{course_id}/front_page": {
			"get": {
				"summary": "Show front page",
				"description": "",
				"operationId": "show-front-page",
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [""],
				"security": []
			},
			"put": {
				"summary": "Update/create front page",
				"description": "",
				"operationId": "updatecreate-front-page",
				"parameters": [{
					"in": "query",
					"name": "wiki_page[body]",
					"description": "The content for the new page.",
					"type": "string"
				},
				{
					"in": "query",
					"name": "wiki_page[editing_roles]",
					"description": "Which user roles are allowed to edit this page. Any combination of thesenroles is allowed (separated by commas).nu201cteachersu201dnnAllows editing by teachers in the course.nu201cstudentsu201dnnAllows editing by students in the course.nu201cmembersu201dnnFor group wikis, allows editing by members of the group.nu201cpublicu201dnnAllows editing by any user.nnn        n        n          Allowed values: teachers, students, members, public",
					"type": "string"
				},
				{
					"in": "query",
					"name": "wiki_page[notify_of_update]",
					"description": "Whether participants should be notified when this page changes.",
					"type": "boolean"
				},
				{
					"in": "query",
					"name": "wiki_page[published]",
					"description": "Whether the page is published (true) or draft state (false).",
					"type": "boolean"
				},
				{
					"in": "query",
					"name": "wiki_page[title]",
					"description": "The title for the new page. NOTE: changing a page&#39;s title will changenits url. The updated url will be returned in the result.",
					"type": "string"
				}],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [""],
				"security": []
			}
		},
		"/courses/{course_id}/gradebook_history/date": {
			"get": {
				"summary": "Details for a given date in gradebook history for this course",
				"description": "",
				"operationId": "details-for-a-given-date-in-gradebook-history-for-this-course",
				"parameters": [{
					"in": "query",
					"name": "course_id",
					"description": "The id of the contextual course for this API call",
					"type": "integer"
				},
				{
					"in": "query",
					"name": "date",
					"description": "The date for which you would like to see detailed information",
					"type": "string"
				}],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [""],
				"security": []
			}
		},
		"/courses/{course_id}/gradebook_history/date/graders/{grader_id}/assignments/assignment_id/submissions": {
			"get": {
				"summary": "Lists submissions",
				"description": "",
				"operationId": "lists-submissions",
				"parameters": [{
					"in": "query",
					"name": "assignment_id",
					"description": "The ID of the assignment for which you want to see submissions",
					"type": "integer"
				},
				{
					"in": "query",
					"name": "course_id",
					"description": "The id of the contextual course for this API call",
					"type": "integer"
				},
				{
					"in": "query",
					"name": "date",
					"description": "The date for which you would like to see submissions",
					"type": "string"
				},
				{
					"in": "query",
					"name": "grader_id",
					"description": "The ID of the grader for which you want to see submissions",
					"type": "integer"
				}],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [""],
				"security": []
			}
		},
		"/courses/{course_id}/gradebook_history/days": {
			"get": {
				"summary": "Days in gradebook history for this course",
				"description": "",
				"operationId": "days-in-gradebook-history-for-this-course",
				"parameters": [{
					"in": "query",
					"name": "course_id",
					"description": "The id of the contextual course for this API call",
					"type": "integer"
				}],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [""],
				"security": []
			}
		},
		"/courses/{course_id}/gradebook_history/feed": {
			"get": {
				"summary": "List uncollated submission versions",
				"description": "",
				"operationId": "list-uncollated-submission-versions",
				"parameters": [{
					"in": "query",
					"name": "ascending",
					"description": "Returns submission versions in ascending date order (oldest first). Ifnabsent, returns submission versions in descending date order (newestnfirst).",
					"type": "boolean"
				},
				{
					"in": "query",
					"name": "assignment_id",
					"description": "The ID of the assignment for which you want to see submissions. If absent,nversions of submissions from any assignment in the course are included.",
					"type": "integer"
				},
				{
					"in": "query",
					"name": "course_id",
					"description": "The id of the contextual course for this API call",
					"type": "integer"
				},
				{
					"in": "query",
					"name": "user_id",
					"description": "The ID of the user for which you want to see submissions. If absent,nversions of submissions from any user in the course are included.",
					"type": "integer"
				}],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [""],
				"security": []
			}
		},
		"/courses/{course_id}/grading_periods": {
			"get": {
				"summary": "List grading periods",
				"description": "",
				"operationId": "list-grading-periods",
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [""],
				"security": []
			},
			"post": {
				"summary": "Create a single grading period",
				"description": "",
				"operationId": "create-a-single-grading-period",
				"parameters": [{
					"in": "query",
					"name": "grading_periods[][end_date]",
					"description": "no description",
					"type": "date"
				},
				{
					"in": "query",
					"name": "grading_periods[][start_date]",
					"description": "The date the grading period starts.",
					"type": "date"
				},
				{
					"in": "query",
					"name": "grading_periods[][weight]",
					"description": "The percentage weight of how much the period should count toward the coursengrade.",
					"type": "number"
				}],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [""],
				"security": []
			}
		},
		"/courses/{course_id}/grading_periods/id": {
			"delete": {
				"summary": "Delete a grading period",
				"description": "",
				"operationId": "delete-a-grading-period",
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [""],
				"security": []
			},
			"get": {
				"summary": "Get a single grading period",
				"description": "",
				"operationId": "get-a-single-grading-period",
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [""],
				"security": []
			},
			"put": {
				"summary": "Update a single grading period",
				"description": "",
				"operationId": "update-a-single-grading-period",
				"parameters": [{
					"in": "query",
					"name": "grading_periods[][end_date]",
					"description": "no description",
					"type": "date"
				},
				{
					"in": "query",
					"name": "grading_periods[][start_date]",
					"description": "The date the grading period starts.",
					"type": "date"
				},
				{
					"in": "query",
					"name": "grading_periods[][weight]",
					"description": "The percentage weight of how much the period should count toward the coursengrade.",
					"type": "number"
				}],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [""],
				"security": []
			}
		},
		"/courses/{course_id}/grading_standards": {
			"get": {
				"summary": "List the grading standards available in a context.",
				"description": "",
				"operationId": "list-the-grading-standards-available-in-a-context",
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [""],
				"security": []
			},
			"post": {
				"summary": "Create a new grading standard",
				"description": "",
				"operationId": "create-a-new-grading-standard",
				"parameters": [{
					"in": "query",
					"name": "grading_scheme_entry[][name]",
					"description": "The name for an entry value within a GradingStandard that describes thenrange of the value e.g. A-",
					"type": "string"
				},
				{
					"in": "query",
					"name": "grading_scheme_entry[][value]",
					"description": "The value for the name of the entry within a GradingStandard. The entrynrepresents the lower bound of the range for the entry. This range includesnthe value up to the next entry in the GradingStandard, or 100 if there isnno upper bound. The lowest value will have a lower bound range of 0. e.g.n93",
					"type": "integer"
				},
				{
					"in": "query",
					"name": "title",
					"description": "The title for the Grading Standard.",
					"type": "string"
				}],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [""],
				"security": []
			}
		},
		"/courses/{course_id}/groups": {
			"get": {
				"summary": "List the groups available in a context.",
				"description": "",
				"operationId": "list-the-groups-available-in-a-context",
				"parameters": [{
					"in": "query",
					"name": "only_own_groups",
					"description": "Will only include groups that the user belongs to if this is set",
					"type": "boolean"
				}],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [""],
				"security": []
			}
		},
		"/courses/{course_id}/group_categories": {
			"get": {
				"summary": "List group categories for a context",
				"description": "",
				"operationId": "list-group-categories-for-a-context",
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [""],
				"security": []
			},
			"post": {
				"summary": "Create a Group Category",
				"description": "",
				"operationId": "create-a-group-category",
				"parameters": [{
					"in": "query",
					"name": "auto_leader",
					"description": "Assigns group leaders automatically when generating and allocating studentsnto groups Valid values are:nu201cfirstu201dnnthe first student to be allocated to a group is the leadernu201crandomu201dnna random student from all members is chosen as the leadernnn        n        n          Allowed values: first, random",
					"type": "string"
				},
				{
					"in": "query",
					"name": "create_group_count",
					"description": "Create this number of groups (Course Only).",
					"type": "integer"
				},
				{
					"in": "query",
					"name": "group_limit",
					"description": "Limit the maximum number of users in each group (Course Only). Requiresnself signup.",
					"type": "integer"
				},
				{
					"in": "query",
					"name": "name",
					"description": "Name of the group category",
					"type": "string"
				},
				{
					"in": "query",
					"name": "self_signup",
					"description": "Allow students to sign up for a group themselves (Course Only). validnvalues are:nu201cenabledu201dnnallows students to self sign up for any group in coursenu201crestrictedu201dnnallows students to self sign up only for groups in the same section nullndisallows self sign upnnn        n        n          Allowed values: enabled, restricted",
					"type": "string"
				},
				{
					"in": "query",
					"name": "split_group_count",
					"description": "(Deprecated) Create this number of groups, and evenly distribute studentsnamong them. not allowed with u201cenable_self_signupu201d. because the groupnassignment happens synchronously, it&#39;s recommended that you instead usenthe assign_unassigned_members endpoint. (Course Only)",
					"type": "string"
				}],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [""],
				"security": []
			}
		},
		"/courses/{course_id}/live_assessments": {
			"get": {
				"summary": "List live assessments",
				"description": "",
				"operationId": "list-live-assessments",
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [""],
				"security": []
			},
			"post": {
				"summary": "Create or find a live assessment",
				"description": "",
				"operationId": "create-or-find-a-live-assessment",
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [""],
				"security": []
			}
		},
		"/courses/{course_id}/live_assessments/assessment_id/results": {
			"get": {
				"summary": "List live assessment results",
				"description": "",
				"operationId": "list-live-assessment-results",
				"parameters": [{
					"in": "query",
					"name": "user_id",
					"description": "If set, restrict results to those for this user",
					"type": "integer"
				}],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [""],
				"security": []
			},
			"post": {
				"summary": "Create live assessment results",
				"description": "",
				"operationId": "create-live-assessment-results",
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [""],
				"security": []
			}
		},
		"/courses/{course_id}/modules": {
			"get": {
				"summary": "List modules",
				"description": "",
				"operationId": "list-modules",
				"parameters": [{
					"in": "query",
					"name": "include[]",
					"description": "u201citemsu201d: Return module items inline if possible. This parameter suggestsnthat Canvas return module items directly in the Module object JSON, tonavoid having to make separate API requests for each module when enumeratingnmodules and items. Canvas is free to omit &#39;items&#39; for anynparticular module if it deems them too numerous to return inline. Callersnmust be prepared to use the List Module Items API if items are not returned.nnu201ccontent_detailsu201d: Requires include. Returnsnadditional details with module items specific to their associated contentnitems. Includes standard lock information for each item.nnn        n        n          Allowed values: items, content_details",
					"type": "string"
				},
				{
					"in": "query",
					"name": "search_term",
					"description": "The partial name of the modules (and module items, if include is specified) to match and return.",
					"type": "string"
				},
				{
					"in": "query",
					"name": "student_id",
					"description": "Returns module completion information for the student with this id.",
					"type": "string"
				}],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [""],
				"security": []
			},
			"post": {
				"summary": "Create a module",
				"description": "",
				"operationId": "create-a-module",
				"parameters": [{
					"in": "query",
					"name": "module[name]",
					"description": "The name of the module",
					"type": "string"
				},
				{
					"in": "query",
					"name": "module[position]",
					"description": "The position of this module in the course (1-based)",
					"type": "integer"
				},
				{
					"in": "query",
					"name": "module[prerequisite_module_ids][]",
					"description": "IDs of Modules that must be completed before this one is unlocked.nPrerequisite modules must precede this module (i.e. have a lower positionnvalue), otherwise they will be ignored",
					"type": "string"
				},
				{
					"in": "query",
					"name": "module[publish_final_grade]",
					"description": "Whether to publish the student&#39;s final grade for the course uponncompletion of this module.",
					"type": "boolean"
				},
				{
					"in": "query",
					"name": "module[require_sequential_progress]",
					"description": "Whether module items must be unlocked in order",
					"type": "boolean"
				},
				{
					"in": "query",
					"name": "module[unlock_at]",
					"description": "The date the module will unlock",
					"type": "datetime"
				}],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [""],
				"security": []
			}
		},
		"/courses/{course_id}/modules/id": {
			"delete": {
				"summary": "Delete module",
				"description": "",
				"operationId": "delete-module",
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [""],
				"security": []
			},
			"get": {
				"summary": "Show module",
				"description": "",
				"operationId": "show-module",
				"parameters": [{
					"in": "query",
					"name": "include[]",
					"description": "u201citemsu201d: Return module items inline if possible. This parameter suggestsnthat Canvas return module items directly in the Module object JSON, tonavoid having to make separate API requests for each module when enumeratingnmodules and items. Canvas is free to omit &#39;items&#39; for anynparticular module if it deems them too numerous to return inline. Callersnmust be prepared to use the List Module Items API if items are not returned.nnu201ccontent_detailsu201d: Requires include. Returnsnadditional details with module items specific to their associated contentnitems. Includes standard lock information for each item.nnn        n        n          Allowed values: items, content_details",
					"type": "string"
				},
				{
					"in": "query",
					"name": "student_id",
					"description": "Returns module completion information for the student with this id.",
					"type": "string"
				}],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [""],
				"security": []
			},
			"put": {
				"summary": "Update a module",
				"description": "",
				"operationId": "update-a-module",
				"parameters": [{
					"in": "query",
					"name": "module[name]",
					"description": "The name of the module",
					"type": "string"
				},
				{
					"in": "query",
					"name": "module[position]",
					"description": "The position of the module in the course (1-based)",
					"type": "integer"
				},
				{
					"in": "query",
					"name": "module[prerequisite_module_ids][]",
					"description": "IDs of Modules that must be completed before this one is unlockednPrerequisite modules must precede this module (i.e. have a lower positionnvalue), otherwise they will be ignored",
					"type": "string"
				},
				{
					"in": "query",
					"name": "module[published]",
					"description": "Whether the module is published and visible to students",
					"type": "boolean"
				},
				{
					"in": "query",
					"name": "module[publish_final_grade]",
					"description": "Whether to publish the student&#39;s final grade for the course uponncompletion of this module.",
					"type": "boolean"
				},
				{
					"in": "query",
					"name": "module[require_sequential_progress]",
					"description": "Whether module items must be unlocked in order",
					"type": "boolean"
				},
				{
					"in": "query",
					"name": "module[unlock_at]",
					"description": "The date the module will unlock",
					"type": "datetime"
				}],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [""],
				"security": []
			}
		},
		"/courses/{course_id}/modules/id/relock": {
			"put": {
				"summary": "Re-lock module progressions",
				"description": "",
				"operationId": "relock-module-progressions",
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [""],
				"security": []
			}
		},
		"/courses/{course_id}/modules/module_id/items": {
			"get": {
				"summary": "List module items",
				"description": "",
				"operationId": "list-module-items",
				"parameters": [{
					"in": "query",
					"name": "include[]",
					"description": "If included, will return additional details specific to the contentnassociated with each item. Refer to the Module Item specification for more details. Includes standard lock informationnfor each item.nn        n        n          Allowed values: content_details",
					"type": "string"
				},
				{
					"in": "query",
					"name": "search_term",
					"description": "The partial title of the items to match and return.",
					"type": "string"
				},
				{
					"in": "query",
					"name": "student_id",
					"description": "Returns module completion information for the student with this id.",
					"type": "string"
				}],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [""],
				"security": []
			},
			"post": {
				"summary": "Create a module item",
				"description": "",
				"operationId": "create-a-module-item",
				"parameters": [{
					"in": "query",
					"name": "module_item[completion_requirement][min_score]",
					"description": "Minimum score required to complete. Required for completion_requirementntype &#39;min_score&#39;.",
					"type": "integer"
				},
				{
					"in": "query",
					"name": "module_item[completion_requirement][type]",
					"description": "Completion requirement for this module item. u201cmust_viewu201d: Applies to allnitem types u201cmust_contributeu201d: Only applies to u201cAssignmentu201d, u201cDiscussionu201d,nand u201cPageu201d types u201cmust_submitu201d, u201cmin_scoreu201d: Only apply to u201cAssignmentu201d andnu201cQuizu201d types Inapplicable types will be ignorednn        n        n          Allowed values: must_view, must_contribute, must_submit",
					"type": "string"
				},
				{
					"in": "query",
					"name": "module_item[content_id]",
					"description": "The id of the content to link to the module item. Required, except forn&#39;ExternalUrl&#39;, &#39;Page&#39;, and &#39;SubHeader&#39; types.",
					"type": "string"
				},
				{
					"in": "query",
					"name": "module_item[external_url]",
					"description": "External url that the item points to. [Required for &#39;ExternalUrl&#39;nand &#39;ExternalTool&#39; types.",
					"type": "string"
				},
				{
					"in": "query",
					"name": "module_item[indent]",
					"description": "0-based indent level; module items may be indented to show a hierarchy",
					"type": "integer"
				},
				{
					"in": "query",
					"name": "module_item[new_tab]",
					"description": "Whether the external tool opens in a new tab. Only applies ton&#39;ExternalTool&#39; type.",
					"type": "boolean"
				},
				{
					"in": "query",
					"name": "module_item[page_url]",
					"description": "Suffix for the linked wiki page (e.g. &#39;front-page&#39;). Required forn&#39;Page&#39; type.",
					"type": "string"
				},
				{
					"in": "query",
					"name": "module_item[position]",
					"description": "The position of this item in the module (1-based).",
					"type": "integer"
				},
				{
					"in": "query",
					"name": "module_item[title]",
					"description": "The name of the module item and associated content",
					"type": "string"
				},
				{
					"in": "query",
					"name": "module_item[type]",
					"description": "The type of content linked to the itemnn        n        n          Allowed values: File, Page, Discussion, Assignment, Quiz, SubHeader, ExternalUrl, ExternalTool",
					"type": "string"
				}],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [""],
				"security": []
			}
		},
		"/courses/{course_id}/modules/module_id/items/{id}": {
			"delete": {
				"summary": "Delete module item",
				"description": "",
				"operationId": "delete-module-item",
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [""],
				"security": []
			},
			"get": {
				"summary": "Show module item",
				"description": "",
				"operationId": "show-module-item",
				"parameters": [{
					"in": "query",
					"name": "include[]",
					"description": "If included, will return additional details specific to the contentnassociated with this item. Refer to the Module Item specification for more details. Includes standard lock informationnfor each item.nn        n        n          Allowed values: content_details",
					"type": "string"
				},
				{
					"in": "query",
					"name": "student_id",
					"description": "Returns module completion information for the student with this id.",
					"type": "string"
				}],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [""],
				"security": []
			},
			"put": {
				"summary": "Update a module item",
				"description": "",
				"operationId": "update-a-module-item",
				"parameters": [{
					"in": "query",
					"name": "module_item[completion_requirement][min_score]",
					"description": "Minimum score required to complete, Required for completion_requirementntype &#39;min_score&#39;.",
					"type": "integer"
				},
				{
					"in": "query",
					"name": "module_item[completion_requirement][type]",
					"description": "Completion requirement for this module item. u201cmust_viewu201d: Applies to allnitem types u201cmust_contributeu201d: Only applies to u201cAssignmentu201d, u201cDiscussionu201d,nand u201cPageu201d types u201cmust_submitu201d, u201cmin_scoreu201d: Only apply to u201cAssignmentu201d andnu201cQuizu201d types Inapplicable types will be ignorednn        n        n          Allowed values: must_view, must_contribute, must_submit",
					"type": "string"
				},
				{
					"in": "query",
					"name": "module_item[external_url]",
					"description": "External url that the item points to. Only applies to &#39;ExternalUrl&#39;ntype.",
					"type": "string"
				},
				{
					"in": "query",
					"name": "module_item[indent]",
					"description": "0-based indent level; module items may be indented to show a hierarchy",
					"type": "integer"
				},
				{
					"in": "query",
					"name": "module_item[module_id]",
					"description": "Move this item to another module by specifying the target module id here.nThe target module must be in the same course.",
					"type": "string"
				},
				{
					"in": "query",
					"name": "module_item[new_tab]",
					"description": "Whether the external tool opens in a new tab. Only applies ton&#39;ExternalTool&#39; type.",
					"type": "boolean"
				},
				{
					"in": "query",
					"name": "module_item[position]",
					"description": "The position of this item in the module (1-based)",
					"type": "integer"
				},
				{
					"in": "query",
					"name": "module_item[published]",
					"description": "Whether the module item is published and visible to students.",
					"type": "boolean"
				},
				{
					"in": "query",
					"name": "module_item[title]",
					"description": "The name of the module item",
					"type": "string"
				}],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [""],
				"security": []
			}
		},
		"/courses/{course_id}/modules/module_id/items/{id}/done": {
			"put": {
				"summary": "Mark module item as done/not done",
				"description": "",
				"operationId": "mark-module-item-as-donenot-done",
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [""],
				"security": []
			}
		},
		"/courses/{course_id}/modules/module_id/items/{id}/mark_read": {
			"post": {
				"summary": "Mark module item read",
				"description": "",
				"operationId": "mark-module-item-read",
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [""],
				"security": []
			}
		},
		"/courses/{course_id}/module_item_sequence": {
			"get": {
				"summary": "Get module item sequence",
				"description": "",
				"operationId": "get-module-item-sequence",
				"parameters": [{
					"in": "query",
					"name": "asset_id",
					"description": "The id of the asset (or the url in the case of a Page)",
					"type": "integer"
				},
				{
					"in": "query",
					"name": "asset_type",
					"description": "The type of asset to find module sequence information for. Use thenModuleItem if it is known (e.g., the user navigated from a module item),nsince this will avoid ambiguity if the asset appears more than once in thenmodule sequence.nn        n        n          Allowed values: ModuleItem, File, Page, Discussion, Assignment, Quiz, ExternalTool",
					"type": "string"
				}],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [""],
				"security": []
			}
		},
		"/courses/{course_id}/outcome_groups": {
			"get": {
				"summary": "Get all outcome groups for context",
				"description": "",
				"operationId": "get-all-outcome-groups-for-context",
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [""],
				"security": []
			}
		},
		"/courses/{course_id}/outcome_groups/id": {
			"delete": {
				"summary": "Delete an outcome group",
				"description": "",
				"operationId": "delete-an-outcome-group",
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [""],
				"security": []
			},
			"get": {
				"summary": "Show an outcome group",
				"description": "",
				"operationId": "show-an-outcome-group",
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [""],
				"security": []
			},
			"put": {
				"summary": "Update an outcome group",
				"description": "",
				"operationId": "update-an-outcome-group",
				"parameters": [{
					"in": "query",
					"name": "description",
					"description": "The new outcome group description.",
					"type": "string"
				},
				{
					"in": "query",
					"name": "parent_outcome_group_id",
					"description": "The id of the new parent outcome group.",
					"type": "integer"
				},
				{
					"in": "query",
					"name": "title",
					"description": "The new outcome group title.",
					"type": "string"
				},
				{
					"in": "query",
					"name": "vendor_guid",
					"description": "A custom GUID for the learning standard.",
					"type": "string"
				}],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [""],
				"security": []
			}
		},
		"/courses/{course_id}/outcome_groups/id/import": {
			"post": {
				"summary": "Import an outcome group",
				"description": "",
				"operationId": "import-an-outcome-group",
				"parameters": [{
					"in": "query",
					"name": "source_outcome_group_id",
					"description": "The ID of the source outcome group.",
					"type": "integer"
				}],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [""],
				"security": []
			}
		},
		"/courses/{course_id}/outcome_groups/id/outcomes": {
			"get": {
				"summary": "List linked outcomes",
				"description": "",
				"operationId": "list-linked-outcomes",
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [""],
				"security": []
			},
			"post": {
				"summary": "Create/link an outcome",
				"description": "",
				"operationId": "createlink-an-outcome",
				"parameters": [{
					"in": "query",
					"name": "calculation_int",
					"description": "The new calculation int.  Only applies if the calculation_method isnu201cdecaying_averageu201d or u201cn_masteryu201d",
					"type": "integer"
				},
				{
					"in": "query",
					"name": "calculation_method",
					"description": "The new calculation method.  Defaults to u201chighestu201dnn        n        n          Allowed values: decaying_average, n_mastery, latest, highest",
					"type": "string"
				},
				{
					"in": "query",
					"name": "description",
					"description": "The description of the new outcome.",
					"type": "string"
				},
				{
					"in": "query",
					"name": "display_name",
					"description": "A friendly name shown in reports for outcomes with cryptic titles, such asncommon core standards names.",
					"type": "string"
				},
				{
					"in": "query",
					"name": "mastery_points",
					"description": "The mastery threshold for the embedded rubric criterion.",
					"type": "integer"
				},
				{
					"in": "query",
					"name": "outcome_id",
					"description": "The ID of the existing outcome to link.",
					"type": "integer"
				},
				{
					"in": "query",
					"name": "ratings[][description]",
					"description": "The description of a rating level for the embedded rubric criterion.",
					"type": "string"
				},
				{
					"in": "query",
					"name": "ratings[][points]",
					"description": "The points corresponding to a rating level for the embedded rubricncriterion.",
					"type": "integer"
				},
				{
					"in": "query",
					"name": "title",
					"description": "The title of the new outcome. Required if outcome_id is absent.",
					"type": "string"
				},
				{
					"in": "query",
					"name": "vendor_guid",
					"description": "A custom GUID for the learning standard.",
					"type": "string"
				}],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [""],
				"security": []
			}
		},
		"/courses/{course_id}/outcome_groups/id/outcomes/{outcome_id}": {
			"delete": {
				"summary": "Unlink an outcome",
				"description": "",
				"operationId": "unlink-an-outcome",
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [""],
				"security": []
			},
			"put": {
				"summary": "Create/link an outcome",
				"description": "",
				"operationId": "createlink-an-outcome",
				"parameters": [{
					"in": "query",
					"name": "calculation_int",
					"description": "The new calculation int.  Only applies if the calculation_method isnu201cdecaying_averageu201d or u201cn_masteryu201d",
					"type": "integer"
				},
				{
					"in": "query",
					"name": "calculation_method",
					"description": "The new calculation method.  Defaults to u201chighestu201dnn        n        n          Allowed values: decaying_average, n_mastery, latest, highest",
					"type": "string"
				},
				{
					"in": "query",
					"name": "description",
					"description": "The description of the new outcome.",
					"type": "string"
				},
				{
					"in": "query",
					"name": "display_name",
					"description": "A friendly name shown in reports for outcomes with cryptic titles, such asncommon core standards names.",
					"type": "string"
				},
				{
					"in": "query",
					"name": "mastery_points",
					"description": "The mastery threshold for the embedded rubric criterion.",
					"type": "integer"
				},
				{
					"in": "query",
					"name": "outcome_id",
					"description": "The ID of the existing outcome to link.",
					"type": "integer"
				},
				{
					"in": "query",
					"name": "ratings[][description]",
					"description": "The description of a rating level for the embedded rubric criterion.",
					"type": "string"
				},
				{
					"in": "query",
					"name": "ratings[][points]",
					"description": "The points corresponding to a rating level for the embedded rubricncriterion.",
					"type": "integer"
				},
				{
					"in": "query",
					"name": "title",
					"description": "The title of the new outcome. Required if outcome_id is absent.",
					"type": "string"
				},
				{
					"in": "query",
					"name": "vendor_guid",
					"description": "A custom GUID for the learning standard.",
					"type": "string"
				}],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [""],
				"security": []
			}
		},
		"/courses/{course_id}/outcome_groups/id/subgroups": {
			"get": {
				"summary": "List subgroups",
				"description": "",
				"operationId": "list-subgroups",
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [""],
				"security": []
			},
			"post": {
				"summary": "Create a subgroup",
				"description": "",
				"operationId": "create-a-subgroup",
				"parameters": [{
					"in": "query",
					"name": "description",
					"description": "The description of the new outcome group.",
					"type": "string"
				},
				{
					"in": "query",
					"name": "title",
					"description": "The title of the new outcome group.",
					"type": "string"
				},
				{
					"in": "query",
					"name": "vendor_guid",
					"description": "A custom GUID for the learning standard",
					"type": "string"
				}],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [""],
				"security": []
			}
		},
		"/courses/{course_id}/outcome_group_links": {
			"get": {
				"summary": "Get all outcome links for context",
				"description": "",
				"operationId": "get-all-outcome-links-for-context",
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [""],
				"security": []
			}
		},
		"/courses/{course_id}/outcome_results": {
			"get": {
				"summary": "Get outcome results",
				"description": "",
				"operationId": "get-outcome-results",
				"parameters": [{
					"in": "query",
					"name": "include[]",
					"description": "String, u201calignmentsu201d|u201coutcomesu201d|u201coutcomes.alignmentsu201d|u201coutcome_groupsu201d|u201coutcome_linksu201d|u201coutcome_pathsu201d|u201cusersu201dnnSpecify additional collections to be side loaded with the result.nu201calignmentsu201d includes only the alignments referenced by the returnednresults. u201coutcomes.alignmentsu201d includes all alignments referenced bynoutcomes in the context.",
					"type": "string"
				},
				{
					"in": "query",
					"name": "outcome_ids[]",
					"description": "If specified, only the outcomes whose ids are given will be included in thenresults. it is an error to specify an id for an outcome which is not linkednto the context.",
					"type": "integer"
				},
				{
					"in": "query",
					"name": "user_ids[]",
					"description": "If specified, only the users whose ids are given will be included in thenresults. SIS ids can be used, prefixed by u201csis_user_id:u201d. It is an error tonspecify an id for a user who is not a student in the context.",
					"type": "integer"
				}],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [""],
				"security": []
			}
		},
		"/courses/{course_id}/outcome_rollups": {
			"get": {
				"summary": "Get outcome result rollups",
				"description": "",
				"operationId": "get-outcome-result-rollups",
				"parameters": [{
					"in": "query",
					"name": "aggregate",
					"description": "If specified, instead of returning one rollup for each user, all the usernrollups will be combined into one rollup for the course that will containnthe average rollup score for each outcome.nn        n        n          Allowed values: course",
					"type": "string"
				},
				{
					"in": "query",
					"name": "include[]",
					"description": "String, u201ccoursesu201d|u201coutcomesu201d|u201coutcomes.alignmentsu201d|u201coutcome_groupsu201d|u201coutcome_linksu201d|u201coutcome_pathsu201d|u201cusersu201dnnSpecify additional collections to be side loaded with the result.",
					"type": "string"
				},
				{
					"in": "query",
					"name": "outcome_ids[]",
					"description": "If specified, only the outcomes whose ids are given will be included in thenresults. it is an error to specify an id for an outcome which is not linkednto the context.",
					"type": "integer"
				},
				{
					"in": "query",
					"name": "user_ids[]",
					"description": "If specified, only the users whose ids are given will be included in thenresults or used in an aggregate result. it is an error to specify an id forna user who is not a student in the context",
					"type": "integer"
				}],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [""],
				"security": []
			}
		},
		"/courses/{course_id}/pages": {
			"get": {
				"summary": "List pages",
				"description": "",
				"operationId": "list-pages",
				"parameters": [{
					"in": "query",
					"name": "order",
					"description": "The sorting order. Defaults to &#39;asc&#39;.nn        n        n          Allowed values: asc, desc",
					"type": "string"
				},
				{
					"in": "query",
					"name": "published",
					"description": "If true, include only published paqes. If false, exclude published pages.nIf not present, do not filter on published status.",
					"type": "boolean"
				},
				{
					"in": "query",
					"name": "search_term",
					"description": "The partial title of the pages to match and return.",
					"type": "string"
				},
				{
					"in": "query",
					"name": "sort",
					"description": "Sort results by this field.nn        n        n          Allowed values: title, created_at, updated_at",
					"type": "string"
				}],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [""],
				"security": []
			},
			"post": {
				"summary": "Create page",
				"description": "",
				"operationId": "create-page",
				"parameters": [{
					"in": "query",
					"name": "wiki_page[body]",
					"description": "The content for the new page.",
					"type": "string"
				},
				{
					"in": "query",
					"name": "wiki_page[editing_roles]",
					"description": "Which user roles are allowed to edit this page. Any combination of thesenroles is allowed (separated by commas).nu201cteachersu201dnnAllows editing by teachers in the course.nu201cstudentsu201dnnAllows editing by students in the course.nu201cmembersu201dnnFor group wikis, allows editing by members of the group.nu201cpublicu201dnnAllows editing by any user.nnn        n        n          Allowed values: teachers, students, members, public",
					"type": "string"
				},
				{
					"in": "query",
					"name": "wiki_page[front_page]",
					"description": "Set an unhidden page as the front page (if true)",
					"type": "boolean"
				},
				{
					"in": "query",
					"name": "wiki_page[notify_of_update]",
					"description": "Whether participants should be notified when this page changes.",
					"type": "boolean"
				},
				{
					"in": "query",
					"name": "wiki_page[published]",
					"description": "Whether the page is published (true) or draft state (false).",
					"type": "boolean"
				},
				{
					"in": "query",
					"name": "wiki_page[title]",
					"description": "The title for the new page.",
					"type": "string"
				}],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [""],
				"security": []
			}
		},
		"/courses/{course_id}/pages/url": {
			"delete": {
				"summary": "Delete page",
				"description": "",
				"operationId": "delete-page",
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [""],
				"security": []
			},
			"get": {
				"summary": "Show page",
				"description": "",
				"operationId": "show-page",
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [""],
				"security": []
			},
			"put": {
				"summary": "Update/create page",
				"description": "",
				"operationId": "updatecreate-page",
				"parameters": [{
					"in": "query",
					"name": "wiki_page[body]",
					"description": "The content for the new page.",
					"type": "string"
				},
				{
					"in": "query",
					"name": "wiki_page[editing_roles]",
					"description": "Which user roles are allowed to edit this page. Any combination of thesenroles is allowed (separated by commas).nu201cteachersu201dnnAllows editing by teachers in the course.nu201cstudentsu201dnnAllows editing by students in the course.nu201cmembersu201dnnFor group wikis, allows editing by members of the group.nu201cpublicu201dnnAllows editing by any user.nnn        n        n          Allowed values: teachers, students, members, public",
					"type": "string"
				},
				{
					"in": "query",
					"name": "wiki_page[front_page]",
					"description": "Set an unhidden page as the front page (if true)",
					"type": "boolean"
				},
				{
					"in": "query",
					"name": "wiki_page[notify_of_update]",
					"description": "Whether participants should be notified when this page changes.",
					"type": "boolean"
				},
				{
					"in": "query",
					"name": "wiki_page[published]",
					"description": "Whether the page is published (true) or draft state (false).",
					"type": "boolean"
				},
				{
					"in": "query",
					"name": "wiki_page[title]",
					"description": "The title for the new page. NOTE: changing a page&#39;s title will changenits url. The updated url will be returned in the result.",
					"type": "string"
				}],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [""],
				"security": []
			}
		},
		"/courses/{course_id}/pages/url/revisions": {
			"get": {
				"summary": "List revisions",
				"description": "",
				"operationId": "list-revisions",
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [""],
				"security": []
			}
		},
		"/courses/{course_id}/pages/url/revisions/latest": {
			"get": {
				"summary": "Show revision",
				"description": "",
				"operationId": "show-revision",
				"parameters": [{
					"in": "query",
					"name": "summary",
					"description": "If set, exclude page content from results",
					"type": "boolean"
				}],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [""],
				"security": []
			}
		},
		"/courses/{course_id}/pages/url/revisions/{revision_id}": {
			"get": {
				"summary": "Show revision",
				"description": "",
				"operationId": "show-revision",
				"parameters": [{
					"in": "query",
					"name": "summary",
					"description": "If set, exclude page content from results",
					"type": "boolean"
				}],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [""],
				"security": []
			},
			"post": {
				"summary": "Revert to revision",
				"description": "",
				"operationId": "revert-to-revision",
				"parameters": [{
					"in": "query",
					"name": "revision_id",
					"description": "The revision to revert to (use the List Revisions API to see available revisions)",
					"type": "integer"
				}],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [""],
				"security": []
			}
		},
		"/courses/{course_id}/preview_html": {
			"post": {
				"summary": "Preview processed html",
				"description": "",
				"operationId": "preview-processed-html",
				"parameters": [{
					"in": "query",
					"name": "html",
					"description": "The html content to process",
					"type": "string"
				}],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [""],
				"security": []
			}
		},
		"/courses/{course_id}/quizzes": {
			"get": {
				"summary": "List quizzes in a course",
				"description": "",
				"operationId": "list-quizzes-in-a-course",
				"parameters": [{
					"in": "query",
					"name": "search_term",
					"description": "The partial title of the quizzes to match and return.",
					"type": "string"
				}],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [""],
				"security": []
			},
			"post": {
				"summary": "Create a quiz",
				"description": "",
				"operationId": "create-a-quiz",
				"parameters": [{
					"in": "query",
					"name": "quiz[access_code]",
					"description": "Restricts access to the quiz with a password. For no access codenrestriction, set to null. Defaults to null.",
					"type": "string"
				},
				{
					"in": "query",
					"name": "quiz[allowed_attempts]",
					"description": "Number of times a student is allowed to take a quiz. Set to -1 fornunlimited attempts. Defaults to 1.",
					"type": "integer"
				},
				{
					"in": "query",
					"name": "quiz[assignment_group_id]",
					"description": "The assignment group id to put the assignment in. Defaults to the topnassignment group in the course. Only valid if the quiz is graded, i.e. ifnquiz_type is u201cassignmentu201d or u201cgraded_surveyu201d.",
					"type": "integer"
				},
				{
					"in": "query",
					"name": "quiz[cant_go_back]",
					"description": "Only valid if one_question_at_a_time=true If true, questions are lockednafter answering. Defaults to false.",
					"type": "boolean"
				},
				{
					"in": "query",
					"name": "quiz[description]",
					"description": "A description of the quiz.",
					"type": "string"
				},
				{
					"in": "query",
					"name": "quiz[due_at]",
					"description": "The day/time the quiz is due. Accepts times in ISO 8601 format, e.g.n2011-10-21T18:48Z.",
					"type": "datetime"
				},
				{
					"in": "query",
					"name": "quiz[hide_correct_answers_at]",
					"description": "Only valid if show_correct_answers=true If set, the correct answers willnstop being visible once this date has passed. Otherwise, the correctnanswers will be visible indefinitely.",
					"type": "datetime"
				},
				{
					"in": "query",
					"name": "quiz[hide_results]",
					"description": "Dictates whether or not quiz results are hidden from students. If null,nstudents can see their results after any attempt. If u201calwaysu201d, students cannnever see their results. If u201cuntil_after_last_attemptu201d, students can onlynsee results after their last attempt. (Only valid if allowed_attempts &gt;n1). Defaults to null.nn        n        n          Allowed values: always, until_after_last_attempt",
					"type": "string"
				},
				{
					"in": "query",
					"name": "quiz[ip_filter]",
					"description": "Restricts access to the quiz to computers in a specified IP range. Filtersncan be a comma-separated list of addresses, or an address followed by anmasknnExamples:nn&quot;192.168.217.1&quot;n&quot;192.168.217.1/24&quot;n&quot;192.168.217.1/255.255.255.0&quot;nnFor no IP filter restriction, set to null. Defaults to null.",
					"type": "string"
				},
				{
					"in": "query",
					"name": "quiz[lock_at]",
					"description": "The day/time the quiz is locked for students. Accepts times in ISO 8601nformat, e.g. 2011-10-21T18:48Z.",
					"type": "datetime"
				},
				{
					"in": "query",
					"name": "quiz[one_question_at_a_time]",
					"description": "If true, shows quiz to student one question at a time. Defaults to false.",
					"type": "boolean"
				},
				{
					"in": "query",
					"name": "quiz[one_time_results]",
					"description": "Whether students should be prevented from viewing their quiz results pastnthe first time (right after they turn the quiz in.) Only valid ifnu201chide_resultsu201d is not set to u201calwaysu201d. Defaults to false.",
					"type": "boolean"
				},
				{
					"in": "query",
					"name": "quiz[published]",
					"description": "Whether the quiz should have a draft state of published or unpublished.nNOTE: If students have started taking the quiz, or there are anynsubmissions for the quiz, you may not unpublish a quiz and will recieve annerror.",
					"type": "boolean"
				},
				{
					"in": "query",
					"name": "quiz[quiz_type]",
					"description": "The type of quiz.nn        n        n          Allowed values: practice_quiz, assignment, graded_survey, survey",
					"type": "string"
				},
				{
					"in": "query",
					"name": "quiz[scoring_policy]",
					"description": "Required and only valid if allowed_attempts &gt; 1. Scoring policy for anquiz that students can take multiple times. Defaults to u201ckeep_highestu201d.nn        n        n          Allowed values: keep_highest, keep_latest",
					"type": "string"
				},
				{
					"in": "query",
					"name": "quiz[show_correct_answers]",
					"description": "Only valid if hide_results=null If false, hides correct answers fromnstudents when quiz results are viewed. Defaults to true.",
					"type": "boolean"
				},
				{
					"in": "query",
					"name": "quiz[show_correct_answers_at]",
					"description": "Only valid if show_correct_answers=true If set, the correct answers will benvisible by students only after this date, otherwise the correct answers arenvisible once the student hands in their quiz submission.",
					"type": "datetime"
				},
				{
					"in": "query",
					"name": "quiz[show_correct_answers_last_attempt]",
					"description": "Only valid if show_correct_answers=true and allowed_attempts &gt; 1 Ifntrue, hides correct answers from students when quiz results are viewednuntil they submit the last attempt for the quiz. Defaults to false.",
					"type": "boolean"
				},
				{
					"in": "query",
					"name": "quiz[shuffle_answers]",
					"description": "If true, quiz answers for multiple choice questions will be randomized forneach student. Defaults to false.",
					"type": "boolean"
				},
				{
					"in": "query",
					"name": "quiz[time_limit]",
					"description": "Time limit to take this quiz, in minutes. Set to null for no time limit.nDefaults to null.",
					"type": "integer"
				},
				{
					"in": "query",
					"name": "quiz[title]",
					"description": "The quiz title.",
					"type": "string"
				},
				{
					"in": "query",
					"name": "quiz[unlock_at]",
					"description": "The day/time the quiz is unlocked for students. Accepts times in ISO 8601nformat, e.g. 2011-10-21T18:48Z.",
					"type": "datetime"
				}],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [""],
				"security": []
			}
		},
		"/courses/{course_id}/quizzes/assignment_overrides": {
			"get": {
				"summary": "Retrieve assignment-overridden dates for quizzes",
				"description": "",
				"operationId": "retrieve-assignmentoverridden-dates-for-quizzes",
				"parameters": [{
					"in": "query",
					"name": "quiz_assignment_overrides[0][quiz_ids][]",
					"description": "An array of quiz IDs. If omitted, overrides for all quizzes available tonthe operating user will be returned.",
					"type": "integer"
				}],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [""],
				"security": []
			}
		},
		"/courses/{course_id}/quizzes/id": {
			"delete": {
				"summary": "Delete a quiz",
				"description": "",
				"operationId": "delete-a-quiz",
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [""],
				"security": []
			},
			"get": {
				"summary": "Get a single quiz",
				"description": "",
				"operationId": "get-a-single-quiz",
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [""],
				"security": []
			},
			"put": {
				"summary": "Edit a quiz",
				"description": "",
				"operationId": "edit-a-quiz",
				"parameters": [{
					"in": "query",
					"name": "quiz[notify_of_update]",
					"description": "If true, notifies users that the quiz has changed. Defaults to true",
					"type": "boolean"
				}],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [""],
				"security": []
			}
		},
		"/courses/{course_id}/quizzes/id/reorder": {
			"post": {
				"summary": "Reorder quiz items",
				"description": "",
				"operationId": "reorder-quiz-items",
				"parameters": [{
					"in": "query",
					"name": "order[][id]",
					"description": "The associated item&#39;s unique identifier",
					"type": "integer"
				},
				{
					"in": "query",
					"name": "order[][type]",
					"description": "The type of item is either &#39;question&#39; or &#39;group&#39;nn        n        n          Allowed values: question, group",
					"type": "string"
				}],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [""],
				"security": []
			}
		},
		"/courses/{course_id}/quizzes/id/submission_users/message": {
			"post": {
				"summary": "Send a message to unsubmitted or submitted users for the quiz",
				"description": "",
				"operationId": "send-a-message-to-unsubmitted-or-submitted-users-for-the-quiz",
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [""],
				"security": []
			}
		},
		"/courses/{course_id}/quizzes/id/validate_access_code": {
			"post": {
				"summary": "Validate quiz access code",
				"description": "",
				"operationId": "validate-quiz-access-code",
				"parameters": [{
					"in": "query",
					"name": "access_code",
					"description": "The access code being validated",
					"type": "string"
				}],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [""],
				"security": []
			}
		},
		"/courses/{course_id}/quizzes/quiz_id/extensions": {
			"post": {
				"summary": "Set extensions for student quiz submissions",
				"description": "",
				"operationId": "set-extensions-for-student-quiz-submissions",
				"parameters": [{
					"in": "query",
					"name": "extend_from_end_at",
					"description": "The number of minutes to extend the quiz beyond the quiz&#39;s currentnending time. This is mutually exclusive to extend_from_now. This is limitednto 1440 minutes (24 hours)",
					"type": "integer"
				},
				{
					"in": "query",
					"name": "extend_from_now",
					"description": "The number of minutes to extend the quiz from the current time. This isnmutually exclusive to extend_from_end_at. This is limited to 1440 minutesn(24 hours)",
					"type": "integer"
				},
				{
					"in": "query",
					"name": "extra_attempts",
					"description": "Number of times the student is allowed to re-take the quiz over thenmultiple-attempt limit. This is limited to 1000 attempts or less.",
					"type": "integer"
				},
				{
					"in": "query",
					"name": "extra_time",
					"description": "The number of extra minutes to allow for all attempts. This will add to thenexisting time limit on the submission. This is limited to 10080 minutes (1nweek)",
					"type": "integer"
				},
				{
					"in": "query",
					"name": "manually_unlocked",
					"description": "Allow the student to take the quiz even if it&#39;s locked for everyonenelse.",
					"type": "boolean"
				},
				{
					"in": "query",
					"name": "user_id",
					"description": "The ID of the user we want to add quiz extensions for.",
					"type": "integer"
				}],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [""],
				"security": []
			}
		},
		"/courses/{course_id}/quizzes/quiz_id/groups": {
			"post": {
				"summary": "Create a question group",
				"description": "",
				"operationId": "create-a-question-group",
				"parameters": [{
					"in": "query",
					"name": "quiz_groups[][assessment_question_bank_id]",
					"description": "The id of the assessment question bank to pull questions from.",
					"type": "integer"
				},
				{
					"in": "query",
					"name": "quiz_groups[][name]",
					"description": "The name of the question group.",
					"type": "string"
				},
				{
					"in": "query",
					"name": "quiz_groups[][pick_count]",
					"description": "The number of questions to randomly select for this group.",
					"type": "integer"
				},
				{
					"in": "query",
					"name": "quiz_groups[][question_points]",
					"description": "The number of points to assign to each question in the group.",
					"type": "integer"
				}],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [""],
				"security": []
			}
		},
		"/courses/{course_id}/quizzes/quiz_id/groups/{id}": {
			"delete": {
				"summary": "Delete a question group",
				"description": "",
				"operationId": "delete-a-question-group",
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [""],
				"security": []
			},
			"get": {
				"summary": "Get a single quiz group",
				"description": "",
				"operationId": "get-a-single-quiz-group",
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [""],
				"security": []
			},
			"put": {
				"summary": "Update a question group",
				"description": "",
				"operationId": "update-a-question-group",
				"parameters": [{
					"in": "query",
					"name": "quiz_groups[][name]",
					"description": "The name of the question group.",
					"type": "string"
				},
				{
					"in": "query",
					"name": "quiz_groups[][pick_count]",
					"description": "The number of questions to randomly select for this group.",
					"type": "integer"
				},
				{
					"in": "query",
					"name": "quiz_groups[][question_points]",
					"description": "The number of points to assign to each question in the group.",
					"type": "integer"
				}],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [""],
				"security": []
			}
		},
		"/courses/{course_id}/quizzes/quiz_id/groups/{id}/reorder": {
			"post": {
				"summary": "Reorder question groups",
				"description": "",
				"operationId": "reorder-question-groups",
				"parameters": [{
					"in": "query",
					"name": "order[][id]",
					"description": "The associated item&#39;s unique identifier",
					"type": "integer"
				},
				{
					"in": "query",
					"name": "order[][type]",
					"description": "The type of item is always &#39;question&#39; for a groupnn        n        n          Allowed values: question",
					"type": "string"
				}],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [""],
				"security": []
			}
		},
		"/courses/{course_id}/quizzes/quiz_id/ip_filters": {
			"get": {
				"summary": "Get available quiz IP filters.",
				"description": "",
				"operationId": "get-available-quiz-ip-filters",
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [""],
				"security": []
			}
		},
		"/courses/{course_id}/quizzes/quiz_id/questions": {
			"get": {
				"summary": "List questions in a quiz or a submission",
				"description": "",
				"operationId": "list-questions-in-a-quiz-or-a-submission",
				"parameters": [{
					"in": "query",
					"name": "quiz_submission_attempt",
					"description": "The attempt of the submission you want the questions for.",
					"type": "integer"
				},
				{
					"in": "query",
					"name": "quiz_submission_id",
					"description": "If specified, the endpoint will return the questions that were presentednfor that submission. This is useful if the quiz has been modified after thensubmission was created and the latest quiz version&#39;s set of questionsndoes not match the submission&#39;s. NOTE: you must specifynquiz_submission_attempt as well if you specify this parameter.",
					"type": "integer"
				}],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [""],
				"security": []
			},
			"post": {
				"summary": "Create a single quiz question",
				"description": "",
				"operationId": "create-a-single-quiz-question",
				"parameters": [{
					"in": "query",
					"name": "question[answers]",
					"description": "no description",
					"type": "[answer]"
				},
				{
					"in": "query",
					"name": "question[correct_comments]",
					"description": "The comment to display if the student answers the question correctly.",
					"type": "string"
				},
				{
					"in": "query",
					"name": "question[incorrect_comments]",
					"description": "The comment to display if the student answers incorrectly.",
					"type": "string"
				},
				{
					"in": "query",
					"name": "question[neutral_comments]",
					"description": "The comment to display regardless of how the student answered.",
					"type": "string"
				},
				{
					"in": "query",
					"name": "question[points_possible]",
					"description": "The maximum amount of points received for answering this questionncorrectly.",
					"type": "integer"
				},
				{
					"in": "query",
					"name": "question[position]",
					"description": "The order in which the question will be displayed in the quiz in relationnto other questions.",
					"type": "integer"
				},
				{
					"in": "query",
					"name": "question[question_name]",
					"description": "The name of the question.",
					"type": "string"
				},
				{
					"in": "query",
					"name": "question[question_text]",
					"description": "The text of the question.",
					"type": "string"
				},
				{
					"in": "query",
					"name": "question[question_type]",
					"description": "The type of question. Multiple optional fields depend upon the type ofnquestion to be used.nn        n        n          Allowed values: calculated_question, essay_question, file_upload_question, fill_in_multiple_blanks_question, matching_question, multiple_answers_question, multiple_choice_question, multiple_dropdowns_question, numerical_question, short_answer_question, text_only_question, true_false_question",
					"type": "string"
				},
				{
					"in": "query",
					"name": "question[quiz_group_id]",
					"description": "The id of the quiz group to assign the question to.",
					"type": "integer"
				},
				{
					"in": "query",
					"name": "question[text_after_answers]",
					"description": "no description",
					"type": "string"
				}],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [""],
				"security": []
			}
		},
		"/courses/{course_id}/quizzes/quiz_id/questions/{id}": {
			"delete": {
				"summary": "Delete a quiz question",
				"description": "",
				"operationId": "delete-a-quiz-question",
				"parameters": [{
					"in": "query",
					"name": "id",
					"description": "The quiz question&#39;s unique identifier",
					"type": "integer"
				},
				{
					"in": "query",
					"name": "quiz_id",
					"description": "The associated quiz&#39;s unique identifier",
					"type": "integer"
				}],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [""],
				"security": []
			},
			"get": {
				"summary": "Get a single quiz question",
				"description": "",
				"operationId": "get-a-single-quiz-question",
				"parameters": [{
					"in": "query",
					"name": "id",
					"description": "The quiz question unique identifier.",
					"type": "integer"
				}],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [""],
				"security": []
			},
			"put": {
				"summary": "Update an existing quiz question",
				"description": "",
				"operationId": "update-an-existing-quiz-question",
				"parameters": [{
					"in": "query",
					"name": "id",
					"description": "The quiz question&#39;s unique identifier.",
					"type": "integer"
				},
				{
					"in": "query",
					"name": "question[answers]",
					"description": "no description",
					"type": "[answer]"
				},
				{
					"in": "query",
					"name": "question[correct_comments]",
					"description": "The comment to display if the student answers the question correctly.",
					"type": "string"
				},
				{
					"in": "query",
					"name": "question[incorrect_comments]",
					"description": "The comment to display if the student answers incorrectly.",
					"type": "string"
				},
				{
					"in": "query",
					"name": "question[neutral_comments]",
					"description": "The comment to display regardless of how the student answered.",
					"type": "string"
				},
				{
					"in": "query",
					"name": "question[points_possible]",
					"description": "The maximum amount of points received for answering this questionncorrectly.",
					"type": "integer"
				},
				{
					"in": "query",
					"name": "question[position]",
					"description": "The order in which the question will be displayed in the quiz in relationnto other questions.",
					"type": "integer"
				},
				{
					"in": "query",
					"name": "question[question_name]",
					"description": "The name of the question.",
					"type": "string"
				},
				{
					"in": "query",
					"name": "question[question_text]",
					"description": "The text of the question.",
					"type": "string"
				},
				{
					"in": "query",
					"name": "question[question_type]",
					"description": "The type of question. Multiple optional fields depend upon the type ofnquestion to be used.nn        n        n          Allowed values: calculated_question, essay_question, file_upload_question, fill_in_multiple_blanks_question, matching_question, multiple_answers_question, multiple_choice_question, multiple_dropdowns_question, numerical_question, short_answer_question, text_only_question, true_false_question",
					"type": "string"
				},
				{
					"in": "query",
					"name": "question[quiz_group_id]",
					"description": "The id of the quiz group to assign the question to.",
					"type": "integer"
				},
				{
					"in": "query",
					"name": "question[text_after_answers]",
					"description": "no description",
					"type": "string"
				},
				{
					"in": "query",
					"name": "quiz_id",
					"description": "The associated quiz&#39;s unique identifier.",
					"type": "integer"
				}],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [""],
				"security": []
			}
		},
		"/courses/{course_id}/quizzes/quiz_id/reports": {
			"get": {
				"summary": "Retrieve all quiz reports",
				"description": "",
				"operationId": "retrieve-all-quiz-reports",
				"parameters": [{
					"in": "query",
					"name": "includes_all_versions",
					"description": "Whether to retrieve reports that consider all the submissions or only thenmost recent. Defaults to false, ignored for item_analysis reports.",
					"type": "boolean"
				}],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [""],
				"security": []
			},
			"post": {
				"summary": "Create a quiz report",
				"description": "",
				"operationId": "create-a-quiz-report",
				"parameters": [{
					"in": "query",
					"name": "include",
					"description": "Whether the output should include documents for the file and/or progressnobjects associated with this report. (Note: JSON-API only)nn        n        n          Allowed values: file, progress",
					"type": "string[]"
				},
				{
					"in": "query",
					"name": "quiz_report[includes_all_versions]",
					"description": "Whether the report should consider all submissions or only the most recent.nDefaults to false, ignored for item_analysis.",
					"type": "boolean"
				},
				{
					"in": "query",
					"name": "quiz_report[report_type]",
					"description": "The type of report to be generated.nn        n        n          Allowed values: student_analysis, item_analysis",
					"type": "string"
				}],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [""],
				"security": []
			}
		},
		"/courses/{course_id}/quizzes/quiz_id/reports/{id}": {
			"delete": {
				"summary": "Abort the generation of a report, or remove a previously generated one",
				"description": "",
				"operationId": "abort-the-generation-of-a-report-or-remove-a-previously-generated-one",
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [""],
				"security": []
			},
			"get": {
				"summary": "Get a quiz report",
				"description": "",
				"operationId": "get-a-quiz-report",
				"parameters": [{
					"in": "query",
					"name": "include",
					"description": "Whether the output should include documents for the file and/or progressnobjects associated with this report. (Note: JSON-API only)nn        n        n          Allowed values: file, progress",
					"type": "string[]"
				}],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [""],
				"security": []
			}
		},
		"/courses/{course_id}/quizzes/quiz_id/statistics": {
			"get": {
				"summary": "Fetching the latest quiz statistics",
				"description": "",
				"operationId": "fetching-the-latest-quiz-statistics",
				"parameters": [{
					"in": "query",
					"name": "all_versions",
					"description": "Whether the statistics report should include all submissions attempts.",
					"type": "boolean"
				}],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [""],
				"security": []
			}
		},
		"/courses/{course_id}/quizzes/quiz_id/submissions": {
			"get": {
				"summary": "Get all quiz submissions.",
				"description": "",
				"operationId": "get-all-quiz-submissions",
				"parameters": [{
					"in": "query",
					"name": "include[]",
					"description": "Associations to include with the quiz submission.nn        n        n          Allowed values: submission, quiz, user",
					"type": "string"
				}],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [""],
				"security": []
			},
			"post": {
				"summary": "Create the quiz submission (start a quiz-taking session)",
				"description": "",
				"operationId": "create-the-quiz-submission-start-a-quiztaking-session",
				"parameters": [{
					"in": "query",
					"name": "access_code",
					"description": "Access code for the Quiz, if any.",
					"type": "string"
				},
				{
					"in": "query",
					"name": "preview",
					"description": "Whether this should be a preview QuizSubmission and not count towards thenuser&#39;s course record. Teachers only.",
					"type": "boolean"
				}],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [""],
				"security": []
			}
		},
		"/courses/{course_id}/quizzes/quiz_id/submissions/self/files": {
			"post": {
				"summary": "Upload a file",
				"description": "",
				"operationId": "upload-a-file",
				"parameters": [{
					"in": "query",
					"name": "name",
					"description": "The name of the quiz submission file",
					"type": "string"
				},
				{
					"in": "query",
					"name": "on_duplicate",
					"description": "How to handle duplicate names",
					"type": "string"
				}],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [""],
				"security": []
			}
		},
		"/courses/{course_id}/quizzes/quiz_id/submissions/{id}": {
			"get": {
				"summary": "Get a single quiz submission.",
				"description": "",
				"operationId": "get-a-single-quiz-submission",
				"parameters": [{
					"in": "query",
					"name": "include[]",
					"description": "Associations to include with the quiz submission.nn        n        n          Allowed values: submission, quiz, user",
					"type": "string"
				}],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [""],
				"security": []
			},
			"put": {
				"summary": "Update student question scores and comments.",
				"description": "",
				"operationId": "update-student-question-scores-and-comments",
				"parameters": [{
					"in": "query",
					"name": "attempt",
					"description": "The attempt number of the quiz submission that should be updated. Thisnattempt MUST be already completed.",
					"type": "integer"
				},
				{
					"in": "query",
					"name": "fudge_points",
					"description": "Amount of positive or negative points to fudge the total score by.",
					"type": "float"
				},
				{
					"in": "query",
					"name": "questions",
					"description": "A set of scores and comments for each question answered by the student. Thenkeys are the question IDs, and the values are hashes of `score` andn`comment` entries. See Appendix: Manual Scoring for more on thisnparameter.",
					"type": "hash"
				}],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [""],
				"security": []
			}
		},
		"/courses/{course_id}/quizzes/quiz_id/submissions/{id}/complete": {
			"post": {
				"summary": "Complete the quiz submission (turn it in).",
				"description": "",
				"operationId": "complete-the-quiz-submission-turn-it-in",
				"parameters": [{
					"in": "query",
					"name": "access_code",
					"description": "Access code for the Quiz, if any.",
					"type": "string"
				},
				{
					"in": "query",
					"name": "attempt",
					"description": "The attempt number of the quiz submission that should be completed. Notenthat this must be the latest attempt index, as earlier attempts can not benmodified.",
					"type": "integer"
				},
				{
					"in": "query",
					"name": "validation_token",
					"description": "The unique validation token you received when this Quiz Submission wasncreated.",
					"type": "string"
				}],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [""],
				"security": []
			}
		},
		"/courses/{course_id}/quizzes/quiz_id/submissions/{id}/events": {
			"get": {
				"summary": "Retrieve captured events",
				"description": "",
				"operationId": "retrieve-captured-events",
				"parameters": [{
					"in": "query",
					"name": "attempt",
					"description": "The specific submission attempt to look up the events for. If unspecified,nthe latest attempt will be used.",
					"type": "integer"
				}],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [""],
				"security": []
			},
			"post": {
				"summary": "Submit captured events",
				"description": "",
				"operationId": "submit-captured-events",
				"parameters": [{
					"in": "query",
					"name": "quiz_submission_events[]",
					"description": "The submission events to be recorded",
					"type": "array"
				}],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [""],
				"security": []
			}
		},
		"/courses/{course_id}/quizzes/quiz_id/submissions/{id}/time": {
			"get": {
				"summary": "Get current quiz submission times.",
				"description": "",
				"operationId": "get-current-quiz-submission-times",
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [""],
				"security": []
			}
		},
		"/courses/{course_id}/quiz_extensions": {
			"post": {
				"summary": "Set extensions for student quiz submissions",
				"description": "",
				"operationId": "set-extensions-for-student-quiz-submissions",
				"parameters": [{
					"in": "query",
					"name": "extend_from_end_at",
					"description": "The number of minutes to extend the quiz beyond the quiz&#39;s currentnending time. This is mutually exclusive to extend_from_now. This is limitednto 1440 minutes (24 hours)",
					"type": "integer"
				},
				{
					"in": "query",
					"name": "extend_from_now",
					"description": "The number of minutes to extend the quiz from the current time. This isnmutually exclusive to extend_from_end_at. This is limited to 1440 minutesn(24 hours)",
					"type": "integer"
				},
				{
					"in": "query",
					"name": "extra_attempts",
					"description": "Number of times the student is allowed to re-take the quiz over thenmultiple-attempt limit. This is limited to 1000 attempts or less.",
					"type": "integer"
				},
				{
					"in": "query",
					"name": "extra_time",
					"description": "The number of extra minutes to allow for all attempts. This will add to thenexisting time limit on the submission. This is limited to 10080 minutes (1nweek)",
					"type": "integer"
				},
				{
					"in": "query",
					"name": "manually_unlocked",
					"description": "Allow the student to take the quiz even if it&#39;s locked for everyonenelse.",
					"type": "boolean"
				},
				{
					"in": "query",
					"name": "user_id",
					"description": "The ID of the user we want to add quiz extensions for.",
					"type": "integer"
				}],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [""],
				"security": []
			}
		},
		"/courses/{course_id}/recent_students": {
			"get": {
				"summary": "List recently logged in students",
				"description": "",
				"operationId": "list-recently-logged-in-students",
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [""],
				"security": []
			}
		},
		"/courses/{course_id}/reset_content": {
			"post": {
				"summary": "Reset a course",
				"description": "",
				"operationId": "reset-a-course",
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [""],
				"security": []
			}
		},
		"/courses/{course_id}/root_outcome_group": {
			"get": {
				"summary": "Redirect to root outcome group for context",
				"description": "",
				"operationId": "redirect-to-root-outcome-group-for-context",
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [""],
				"security": []
			}
		},
		"/courses/{course_id}/search_users": {
			"get": {
				"summary": "List users in course",
				"description": "",
				"operationId": "list-users-in-course",
				"parameters": [{
					"in": "query",
					"name": "enrollment_role",
					"description": "Deprecated When set, only return users enrolled with the specifiedncourse-level role.  This can be a role created with thenAdd Role API or a base role type ofn&#39;StudentEnrollment&#39;, &#39;TeacherEnrollment&#39;,n&#39;TaEnrollment&#39;, &#39;ObserverEnrollment&#39;, orn&#39;DesignerEnrollment&#39;.",
					"type": "string"
				},
				{
					"in": "query",
					"name": "enrollment_role_id",
					"description": "When set, only return courses where the user is enrolled with the specifiedncourse-level role.  This can be a role created with thenAdd Role API or a built_in role idnwith type &#39;StudentEnrollment&#39;, &#39;TeacherEnrollment&#39;,n&#39;TaEnrollment&#39;, &#39;ObserverEnrollment&#39;, orn&#39;DesignerEnrollment&#39;.",
					"type": "integer"
				},
				{
					"in": "query",
					"name": "enrollment_state[]",
					"description": "When set, only return users where the enrollment workflow state is of onenof the given types. u201cactiveu201d and u201cinvitedu201d enrollments are returned byndefault.nn        n        n          Allowed values: active, invited, rejected, completed, inactive",
					"type": "string"
				},
				{
					"in": "query",
					"name": "enrollment_type[]",
					"description": "When set, only return users where the user is enrolled as this type. Thisnargument is ignored if enrollment_role is given.nn        n        n          Allowed values: teacher, student, ta, observer, designer",
					"type": "string"
				},
				{
					"in": "query",
					"name": "include[]",
					"description": "u201cemailu201d: Optional user email.nnu201cenrollmentsu201d:nnnOptionally include with each Course the user&#39;s current and invitednenrollments. If the user is enrolled as a student, and the account hasnpermission to manage or view all grades, each enrollment will include an&#39;grades&#39; key with &#39;current_score&#39;, &#39;final_score&#39;,n&#39;current_grade&#39; and &#39;final_grade&#39; values.nnu201clockedu201d: Optionally include whether an enrollment is locked.nnu201cavatar_urlu201d: Optionally include avatar_url.nnu201cbiou201d: Optionally include each user&#39;s bio.nnu201ctest_studentu201d: Optionally include the course&#39;s Test Student,nnnif present. Default is to not include Test Student.nn        n        n          Allowed values: email, enrollments, locked, avatar_url, test_student, bio",
					"type": "string"
				},
				{
					"in": "query",
					"name": "search_term",
					"description": "The partial name or full ID of the users to match and return in the resultsnlist.",
					"type": "string"
				},
				{
					"in": "query",
					"name": "user_id",
					"description": "If included, the user will be queried and if the user is part of the usersnset, the page parameter will be modified so that the page containingnuser_id will be returned.",
					"type": "string"
				},
				{
					"in": "query",
					"name": "user_ids[]",
					"description": "If included, the course users set will only include users with IDsnspecified by the param. Note: this will not work in conjunction with thenu201cuser_idu201d argument but multiple user_ids can be included.",
					"type": "integer"
				}],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [""],
				"security": []
			}
		},
		"/courses/{course_id}/sections": {
			"get": {
				"summary": "List course sections",
				"description": "",
				"operationId": "list-course-sections",
				"parameters": [{
					"in": "query",
					"name": "include[]",
					"description": "u201cstudentsu201d: Associations to include with the group. Note: this is onlynavailable if you have permission to view users or grades in the coursennu201cavatar_urlu201d: Include the avatar URLs for students returned.nnu201cenrollmentsu201d: If &#39;students&#39; is also included, return the sectionnnenrollment for each studentnnu201ctotal_studentsu201d: Returns the total amount of active and invited studentsnnfor the course sectionnnu201cpassback_statusu201d: Include the grade passback status.nnn        n        n          Allowed values: students, avatar_url, enrollments, total_students, passback_status",
					"type": "string"
				}],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [""],
				"security": []
			},
			"post": {
				"summary": "Create course section",
				"description": "",
				"operationId": "create-course-section",
				"parameters": [{
					"in": "query",
					"name": "course_section[end_at]",
					"description": "Section end date in ISO8601 format. e.g. 2011-01-01T01:00Z",
					"type": "datetime"
				},
				{
					"in": "query",
					"name": "course_section[name]",
					"description": "The name of the section",
					"type": "string"
				},
				{
					"in": "query",
					"name": "course_section[restrict_enrollments_to_section_dates]",
					"description": "Set to true to restrict user enrollments to the start and end dates of thensection.",
					"type": "boolean"
				},
				{
					"in": "query",
					"name": "course_section[sis_section_id]",
					"description": "The sis ID of the section",
					"type": "string"
				},
				{
					"in": "query",
					"name": "course_section[start_at]",
					"description": "Section start date in ISO8601 format, e.g. 2011-01-01T01:00Z",
					"type": "datetime"
				},
				{
					"in": "query",
					"name": "enable_sis_reactivation",
					"description": "When true, will first try to re-activate a deleted section with matchingnsis_section_id if possible.",
					"type": "boolean"
				}],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [""],
				"security": []
			}
		},
		"/courses/{course_id}/sections/id": {
			"get": {
				"summary": "Get section information",
				"description": "",
				"operationId": "get-section-information",
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [""],
				"security": []
			}
		},
		"/courses/{course_id}/settings": {
			"get": {
				"summary": "Get course settings",
				"description": "",
				"operationId": "get-course-settings",
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [""],
				"security": []
			},
			"put": {
				"summary": "Update course settings",
				"description": "",
				"operationId": "update-course-settings",
				"parameters": [{
					"in": "query",
					"name": "allow_student_discussion_editing",
					"description": "Let students edit or delete their own discussion posts",
					"type": "boolean"
				},
				{
					"in": "query",
					"name": "allow_student_discussion_topics",
					"description": "Let students create discussion topics",
					"type": "boolean"
				},
				{
					"in": "query",
					"name": "allow_student_forum_attachments",
					"description": "Let students attach files to discussions",
					"type": "boolean"
				},
				{
					"in": "query",
					"name": "allow_student_organized_groups",
					"description": "Let students organize their own groups",
					"type": "boolean"
				},
				{
					"in": "query",
					"name": "hide_distribution_graphs",
					"description": "Hide grade distribution graphs from students",
					"type": "boolean"
				},
				{
					"in": "query",
					"name": "hide_final_grades",
					"description": "Hide totals in student grades summary",
					"type": "boolean"
				},
				{
					"in": "query",
					"name": "lock_all_announcements",
					"description": "Disable comments on announcements",
					"type": "boolean"
				},
				{
					"in": "query",
					"name": "restrict_student_future_view",
					"description": "Restrict students from viewing courses before start date",
					"type": "boolean"
				},
				{
					"in": "query",
					"name": "restrict_student_past_view",
					"description": "Restrict students from viewing courses after end date",
					"type": "boolean"
				}],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [""],
				"security": []
			}
		},
		"/courses/{course_id}/students": {
			"get": {
				"summary": "List students",
				"description": "",
				"operationId": "list-students",
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [""],
				"security": []
			}
		},
		"/courses/{course_id}/students/submissions": {
			"get": {
				"summary": "List submissions for multiple assignments",
				"description": "",
				"operationId": "list-submissions-for-multiple-assignments",
				"parameters": [{
					"in": "query",
					"name": "assignment_ids[]",
					"description": "List of assignments to return submissions for. If none are given,nsubmissions for all assignments are returned.",
					"type": "string"
				},
				{
					"in": "query",
					"name": "grading_period_id",
					"description": "The id of the grading period in which submissions are being requestedn(Requires the Multiple Grading Periods account feature turned on)",
					"type": "integer"
				},
				{
					"in": "query",
					"name": "grouped",
					"description": "If this argument is present, the response will be grouped by student,nrather than a flat array of submissions.",
					"type": "boolean"
				},
				{
					"in": "query",
					"name": "include[]",
					"description": "Associations to include with the group. `total_scores` requires then`grouped` argument.nn        n        n          Allowed values: submission_history, submission_comments, rubric_assessment, assignment, total_scores, visibility, course, user",
					"type": "string"
				},
				{
					"in": "query",
					"name": "student_ids[]",
					"description": "List of student ids to return submissions for. If this argument is omitted,nreturn submissions for the calling user. Students may only list their ownnsubmissions. Observers may only list those of associated students. Thenspecial id u201callu201d will return submissions for all students in thencourse/section as appropriate.",
					"type": "string"
				}],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [""],
				"security": []
			}
		},
		"/courses/{course_id}/submissions/update_grades": {
			"post": {
				"summary": "Grade or comment on multiple submissions",
				"description": "",
				"operationId": "grade-or-comment-on-multiple-submissions",
				"parameters": [{
					"in": "query",
					"name": "grade_data[&lt;student_id&gt;][file_ids][]",
					"description": "See documentation for the comment[] arguments in thenSubmissions Update documentation",
					"type": "integer"
				},
				{
					"in": "query",
					"name": "grade_data[&lt;student_id&gt;][group_comment]",
					"description": "no description",
					"type": "boolean"
				},
				{
					"in": "query",
					"name": "grade_data[&lt;student_id&gt;][media_comment_id]",
					"description": "no description",
					"type": "string"
				},
				{
					"in": "query",
					"name": "grade_data[&lt;student_id&gt;][media_comment_type]",
					"description": "no descriptionnn        n        n          Allowed values: audio, video",
					"type": "string"
				},
				{
					"in": "query",
					"name": "grade_data[&lt;student_id&gt;][posted_grade]",
					"description": "See documentation for the posted_grade argument in thenSubmissions Update documentation",
					"type": "string"
				},
				{
					"in": "query",
					"name": "grade_data[&lt;student_id&gt;][rubric_assessment]",
					"description": "See documentation for the rubric_assessment argument in thenSubmissions Update documentation",
					"type": "rubricassessment"
				},
				{
					"in": "query",
					"name": "grade_data[&lt;student_id&gt;][text_comment]",
					"description": "no description",
					"type": "string"
				}],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [""],
				"security": []
			}
		},
		"/courses/{course_id}/tabs": {
			"get": {
				"summary": "List available tabs for a course or group",
				"description": "",
				"operationId": "list-available-tabs-for-a-course-or-group",
				"parameters": [{
					"in": "query",
					"name": "include[]",
					"description": "Optionally include external tool tabs in the returned list of tabs (Onlynhas effect for courses, not groups)nn        n        n          Allowed values: external",
					"type": "string"
				}],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [""],
				"security": []
			}
		},
		"/courses/{course_id}/tabs/tab_id": {
			"put": {
				"summary": "Update a tab for a course",
				"description": "",
				"operationId": "update-a-tab-for-a-course",
				"parameters": [{
					"in": "query",
					"name": "hidden",
					"description": "no description",
					"type": "boolean"
				},
				{
					"in": "query",
					"name": "position",
					"description": "The new position of the tab, 1-based",
					"type": "integer"
				}],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [""],
				"security": []
			}
		},
		"/courses/{course_id}/todo": {
			"get": {
				"summary": "Course TODO items",
				"description": "",
				"operationId": "course-todo-items",
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [""],
				"security": []
			}
		},
		"/courses/{course_id}/usage_rights": {
			"delete": {
				"summary": "Remove usage rights",
				"description": "",
				"operationId": "remove-usage-rights",
				"parameters": [{
					"in": "query",
					"name": "file_ids[]",
					"description": "List of ids of files to remove associated usage rights from.",
					"type": "string"
				},
				{
					"in": "query",
					"name": "folder_ids[]",
					"description": "List of ids of folders. Usage rights will be removed from all files innthese folders.",
					"type": "string"
				}],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [""],
				"security": []
			},
			"put": {
				"summary": "Set usage rights",
				"description": "",
				"operationId": "set-usage-rights",
				"parameters": [{
					"in": "query",
					"name": "file_ids[]",
					"description": "List of ids of files to set usage rights for.",
					"type": "string"
				},
				{
					"in": "query",
					"name": "folder_ids[]",
					"description": "List of ids of folders to search for files to set usage rights for. Notenthat new files uploaded to these folders do not automatically inherit thesenrights.",
					"type": "string"
				},
				{
					"in": "query",
					"name": "publish",
					"description": "Whether the file(s) or folder(s) should be published on save, provided thatnusage rights have been specified (set to `true` to publish on save).",
					"type": "boolean"
				},
				{
					"in": "query",
					"name": "usage_rights[legal_copyright]",
					"description": "The legal copyright line for the files",
					"type": "string"
				},
				{
					"in": "query",
					"name": "usage_rights[license]",
					"description": "The license that applies to the files. See thenList licenses endpoint for thensupported license types.",
					"type": "string"
				},
				{
					"in": "query",
					"name": "usage_rights[use_justification]",
					"description": "The intellectual property justification for using the files in Canvasnn        n        n          Allowed values: own_copyright, used_by_permission, fair_use, public_domain, creative_commons",
					"type": "string"
				}],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [""],
				"security": []
			}
		},
		"/courses/{course_id}/users": {
			"get": {
				"summary": "List users in course",
				"description": "",
				"operationId": "list-users-in-course",
				"parameters": [{
					"in": "query",
					"name": "enrollment_role",
					"description": "Deprecated When set, only return users enrolled with the specifiedncourse-level role.  This can be a role created with thenAdd Role API or a base role type ofn&#39;StudentEnrollment&#39;, &#39;TeacherEnrollment&#39;,n&#39;TaEnrollment&#39;, &#39;ObserverEnrollment&#39;, orn&#39;DesignerEnrollment&#39;.",
					"type": "string"
				},
				{
					"in": "query",
					"name": "enrollment_role_id",
					"description": "When set, only return courses where the user is enrolled with the specifiedncourse-level role.  This can be a role created with thenAdd Role API or a built_in role idnwith type &#39;StudentEnrollment&#39;, &#39;TeacherEnrollment&#39;,n&#39;TaEnrollment&#39;, &#39;ObserverEnrollment&#39;, orn&#39;DesignerEnrollment&#39;.",
					"type": "integer"
				},
				{
					"in": "query",
					"name": "enrollment_state[]",
					"description": "When set, only return users where the enrollment workflow state is of onenof the given types. u201cactiveu201d and u201cinvitedu201d enrollments are returned byndefault.nn        n        n          Allowed values: active, invited, rejected, completed, inactive",
					"type": "string"
				},
				{
					"in": "query",
					"name": "enrollment_type[]",
					"description": "When set, only return users where the user is enrolled as this type. Thisnargument is ignored if enrollment_role is given.nn        n        n          Allowed values: teacher, student, ta, observer, designer",
					"type": "string"
				},
				{
					"in": "query",
					"name": "include[]",
					"description": "u201cemailu201d: Optional user email.nnu201cenrollmentsu201d:nnnOptionally include with each Course the user&#39;s current and invitednenrollments. If the user is enrolled as a student, and the account hasnpermission to manage or view all grades, each enrollment will include an&#39;grades&#39; key with &#39;current_score&#39;, &#39;final_score&#39;,n&#39;current_grade&#39; and &#39;final_grade&#39; values.nnu201clockedu201d: Optionally include whether an enrollment is locked.nnu201cavatar_urlu201d: Optionally include avatar_url.nnu201cbiou201d: Optionally include each user&#39;s bio.nnu201ctest_studentu201d: Optionally include the course&#39;s Test Student,nnnif present. Default is to not include Test Student.nn        n        n          Allowed values: email, enrollments, locked, avatar_url, test_student, bio",
					"type": "string"
				},
				{
					"in": "query",
					"name": "search_term",
					"description": "The partial name or full ID of the users to match and return in the resultsnlist.",
					"type": "string"
				},
				{
					"in": "query",
					"name": "user_id",
					"description": "If included, the user will be queried and if the user is part of the usersnset, the page parameter will be modified so that the page containingnuser_id will be returned.",
					"type": "string"
				},
				{
					"in": "query",
					"name": "user_ids[]",
					"description": "If included, the course users set will only include users with IDsnspecified by the param. Note: this will not work in conjunction with thenu201cuser_idu201d argument but multiple user_ids can be included.",
					"type": "integer"
				}],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [""],
				"security": []
			}
		},
		"/courses/{course_id}/users/id": {
			"get": {
				"summary": "Get single user",
				"description": "",
				"operationId": "get-single-user",
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [""],
				"security": []
			}
		},
		"/courses/{id}": {
			"delete": {
				"summary": "Conclude a course",
				"description": "",
				"operationId": "conclude-a-course",
				"parameters": [{
					"in": "query",
					"name": "event",
					"description": "The action to take on the course.nn        n        n          Allowed values: delete, conclude",
					"type": "string"
				}],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [""],
				"security": []
			},
			"get": {
				"summary": "Get a single course",
				"description": "",
				"operationId": "get-a-single-course",
				"parameters": [{
					"in": "query",
					"name": "include[]",
					"description": "u201call_coursesu201d: Also search recently deleted courses.nnu201cpermissionsu201d: Include permissions the current user has for the course.nnu201cobserved_usersu201d: include observed users in the enrollmentsnnn        n        n          Allowed values: all_courses, permissions, observed_users",
					"type": "string"
				}],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [""],
				"security": []
			},
			"put": {
				"summary": "Update a course",
				"description": "",
				"operationId": "update-a-course",
				"parameters": [{
					"in": "query",
					"name": "course[account_id]",
					"description": "The unique ID of the account to create to course under.",
					"type": "integer"
				},
				{
					"in": "query",
					"name": "course[allow_student_forum_attachments]",
					"description": "If true, students can attach files to forum posts.",
					"type": "boolean"
				},
				{
					"in": "query",
					"name": "course[allow_student_wiki_edits]",
					"description": "If true, students will be able to modify the course wiki.",
					"type": "boolean"
				},
				{
					"in": "query",
					"name": "course[allow_wiki_comments]",
					"description": "If true, course members will be able to comment on wiki pages.",
					"type": "boolean"
				},
				{
					"in": "query",
					"name": "course[apply_assignment_group_weights]",
					"description": "Set to true to weight final grade based on assignment groups percentages.",
					"type": "boolean"
				},
				{
					"in": "query",
					"name": "course[course_code]",
					"description": "The course code for the course.",
					"type": "string"
				},
				{
					"in": "query",
					"name": "course[course_format]",
					"description": "Optional. Specifies the format of the course. (Should be eithern&#39;on_campus&#39; or &#39;online&#39;)",
					"type": "string"
				},
				{
					"in": "query",
					"name": "course[end_at]",
					"description": "Course end date in ISO8601 format. e.g. 2011-01-01T01:00Z",
					"type": "datetime"
				},
				{
					"in": "query",
					"name": "course[grading_standard_id]",
					"description": "The grading standard id to set for the course.  If no value is provided fornthis argument the current grading_standard will be un-set from this course.",
					"type": "integer"
				},
				{
					"in": "query",
					"name": "course[hide_final_grades]",
					"description": "If this option is set to true, the totals in student grades summary will benhidden.",
					"type": "boolean"
				},
				{
					"in": "query",
					"name": "course[integration_id]",
					"description": "The unique Integration identifier.",
					"type": "string"
				},
				{
					"in": "query",
					"name": "course[is_public]",
					"description": "Set to true if course if public.",
					"type": "boolean"
				},
				{
					"in": "query",
					"name": "course[license]",
					"description": "The name of the licensing. Should be one of the following abbreviations (andescriptive name is included in parenthesis for reference):nn&#39;private&#39; (Private Copyrighted)nn&#39;cc_by_nc_nd&#39; (CC Attribution Non-Commercial No Derivatives)nn&#39;cc_by_nc_sa&#39; (CC Attribution Non-Commercial Share Alike)nn&#39;cc_by_nc&#39; (CC Attribution Non-Commercial)nn&#39;cc_by_nd&#39; (CC Attribution No Derivatives)nn&#39;cc_by_sa&#39; (CC Attribution Share Alike)nn&#39;cc_by&#39; (CC Attribution)nn&#39;public_domain&#39; (Public Domain).",
					"type": "string"
				},
				{
					"in": "query",
					"name": "course[name]",
					"description": "The name of the course. If omitted, the course will be named u201cUnnamednCourse.u201d",
					"type": "string"
				},
				{
					"in": "query",
					"name": "course[open_enrollment]",
					"description": "Set to true if the course is open enrollment.",
					"type": "boolean"
				},
				{
					"in": "query",
					"name": "course[public_description]",
					"description": "A publicly visible description of the course.",
					"type": "string"
				},
				{
					"in": "query",
					"name": "course[public_syllabus]",
					"description": "Set to true to make the course syllabus public.",
					"type": "boolean"
				},
				{
					"in": "query",
					"name": "course[restrict_enrollments_to_course_dates]",
					"description": "Set to true to restrict user enrollments to the start and end dates of thencourse.",
					"type": "boolean"
				},
				{
					"in": "query",
					"name": "course[self_enrollment]",
					"description": "Set to true if the course is self enrollment.",
					"type": "boolean"
				},
				{
					"in": "query",
					"name": "course[sis_course_id]",
					"description": "The unique SIS identifier.",
					"type": "string"
				},
				{
					"in": "query",
					"name": "course[start_at]",
					"description": "Course start date in ISO8601 format, e.g. 2011-01-01T01:00Z",
					"type": "datetime"
				},
				{
					"in": "query",
					"name": "course[syllabus_body]",
					"description": "The syllabus body for the course",
					"type": "string"
				},
				{
					"in": "query",
					"name": "course[term_id]",
					"description": "The unique ID of the term to create to course in.",
					"type": "integer"
				},
				{
					"in": "query",
					"name": "offer",
					"description": "If this option is set to true, the course will be available to studentsnimmediately.",
					"type": "boolean"
				}],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [""],
				"security": []
			}
		}
	},
	"definitions": []
}