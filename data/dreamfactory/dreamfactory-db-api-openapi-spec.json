{
	"swagger": "2.0",
	"info": {
		"title": "DreamFactory DB API",
		"description": "DreamFactory REST API supports several types of database services. ",
		"version": null
	},
	"host": "/db",
	"basePath": "https://dsp-sandman1.cloud.dreamfactory.com/rest",
	"schemes": ["http"],
	"produces": ["application/json"],
	"consumes": ["application/json"],
	"paths": {
		"/db": {
			"get": {
				"summary": "getResources() - List all resources.",
				"description": "List the names of the available tables in this storage. ",
				"operationId": "getResources",
				"parameters": [{
					"in": "query",
					"name": "as_access_components",
					"description": "Return the names of all the accessible components.",
					"type": "string",
					"format": "string"
				},
				{
					"in": "query",
					"name": "include_schemas",
					"description": "Also return the names of the tables where the schema is retrievable.",
					"type": "string",
					"format": "string"
				},
				{
					"in": "query",
					"name": "names_only",
					"description": "Return only the names of the tables in an array.",
					"type": "string",
					"format": "string"
				},
				{
					"in": "query",
					"name": "refresh",
					"description": "Refresh any cached copy of the resource list.",
					"type": "string",
					"format": "string"
				}],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [""],
				"security": []
			}
		},
		"/db/_func": {
			"get": {
				"summary": "getStoredFuncs() - List callable stored functions.",
				"description": "List the names of the available stored functions on this database. ",
				"operationId": "getStoredFuncs",
				"parameters": [{
					"in": "query",
					"name": "names_only",
					"description": "Return only the names of the functions in an array.",
					"type": "string",
					"format": "string"
				},
				{
					"in": "query",
					"name": "refresh",
					"description": "Refresh any cached copy of the resource list.",
					"type": "string",
					"format": "string"
				}],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [""],
				"security": []
			}
		},
		"/db/_func/{function_name}": {
			"get": {
				"summary": "callStoredFunc() - Call a stored function.",
				"description": "Call a stored function with no parameters. Set an optional wrapper for the returned data set. ",
				"operationId": "callStoredFunc",
				"parameters": [{
					"in": "path",
					"name": "function_name",
					"description": "Name of the stored function to call.",
					"type": "string",
					"format": "string"
				},
				{
					"in": "query",
					"name": "returns",
					"description": "If returning a single value, use this to set the type of that value.",
					"type": "string",
					"format": "string"
				},
				{
					"in": "query",
					"name": "wrapper",
					"description": "Add this wrapper around the expected data set before returning.",
					"type": "string",
					"format": "string"
				}],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [""],
				"security": []
			},
			"post": {
				"summary": "callStoredFuncWithParams() - Call a stored function.",
				"description": "Call a stored function with parameters. Set an optional wrapper and schema for the returned data set. ",
				"operationId": "callStoredFuncWithParams",
				"parameters": [{
					"in": "body",
					"name": "body",
					"description": "Data containing input parameters to pass to function.",
					"schema": {
						"$ref": "#/definitions/holder"
					}
				},
				{
					"in": "path",
					"name": "function_name",
					"description": "Name of the stored function to call.",
					"type": "string",
					"format": "string"
				},
				{
					"in": "query",
					"name": "returns",
					"description": "If returning a single value, use this to set the type of that value.",
					"type": "string",
					"format": "string"
				},
				{
					"in": "query",
					"name": "wrapper",
					"description": "Add this wrapper around the expected data set before returning.",
					"type": "string",
					"format": "string"
				}],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [""],
				"security": []
			}
		},
		"/db/_proc": {
			"get": {
				"summary": "getStoredProcs() - List callable stored procedures.",
				"description": "List the names of the available stored procedures on this database. ",
				"operationId": "getStoredProcs",
				"parameters": [{
					"in": "query",
					"name": "names_only",
					"description": "Return only the names of the procedures in an array.",
					"type": "string",
					"format": "string"
				},
				{
					"in": "query",
					"name": "refresh",
					"description": "Refresh any cached copy of the resource list.",
					"type": "string",
					"format": "string"
				}],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [""],
				"security": []
			}
		},
		"/db/_proc/{procedure_name}": {
			"get": {
				"summary": "callStoredProc() - Call a stored procedure.",
				"description": "Call a stored procedure with no parameters. Set an optional wrapper for the returned data set. ",
				"operationId": "callStoredProc",
				"parameters": [{
					"in": "path",
					"name": "procedure_name",
					"description": "Name of the stored procedure to call.",
					"type": "string",
					"format": "string"
				},
				{
					"in": "query",
					"name": "returns",
					"description": "If returning a single value, use this to set the type of that value.",
					"type": "string",
					"format": "string"
				},
				{
					"in": "query",
					"name": "wrapper",
					"description": "Add this wrapper around the expected data set before returning.",
					"type": "string",
					"format": "string"
				}],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [""],
				"security": []
			},
			"post": {
				"summary": "callStoredProcWithParams() - Call a stored procedure.",
				"description": "Call a stored procedure with parameters. Set an optional wrapper and schema for the returned data set. ",
				"operationId": "callStoredProcWithParams",
				"parameters": [{
					"in": "body",
					"name": "body",
					"description": "Data containing in and out parameters to pass to procedure.",
					"schema": {
						"$ref": "#/definitions/holder"
					}
				},
				{
					"in": "path",
					"name": "procedure_name",
					"description": "Name of the stored procedure to call.",
					"type": "string",
					"format": "string"
				},
				{
					"in": "query",
					"name": "returns",
					"description": "If returning a single value, use this to set the type of that value.",
					"type": "string",
					"format": "string"
				},
				{
					"in": "query",
					"name": "wrapper",
					"description": "Add this wrapper around the expected data set before returning.",
					"type": "string",
					"format": "string"
				}],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [""],
				"security": []
			}
		},
		"/db/_schema": {
			"get": {
				"summary": "getSchemas() - List resources available for database schema.",
				"description": "See listed operations for each resource available.",
				"operationId": "getSchemas",
				"parameters": [{
					"in": "query",
					"name": "refresh",
					"description": "Refresh any cached copy of the schema list.",
					"type": "string",
					"format": "string"
				}],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [""],
				"security": []
			},
			"patch": {
				"summary": "updateTables() - Update (patch) one or more tables.",
				"description": "Post data should be a single table definition or an array of table definitions.",
				"operationId": "updateTables",
				"parameters": [{
					"in": "body",
					"name": "tables",
					"description": "Array of table definitions.",
					"schema": {
						"$ref": "#/definitions/holder"
					}
				}],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [""],
				"security": []
			},
			"post": {
				"summary": "createTables() - Create one or more tables.",
				"description": "Post data should be a single table definition or an array of table definitions.",
				"operationId": "createTables",
				"parameters": [{
					"in": "body",
					"name": "tables",
					"description": "Array of table definitions.",
					"schema": {
						"$ref": "#/definitions/holder"
					}
				}],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [""],
				"security": []
			},
			"put": {
				"summary": "replaceTables() - Update (replace) one or more tables.",
				"description": "Post data should be a single table definition or an array of table definitions.",
				"operationId": "replaceTables",
				"parameters": [{
					"in": "body",
					"name": "tables",
					"description": "Array of table definitions.",
					"schema": {
						"$ref": "#/definitions/holder"
					}
				}],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [""],
				"security": []
			}
		},
		"/db/_schema/{table_name}": {
			"delete": {
				"summary": "deleteTable() - Delete (aka drop) the given table.",
				"description": "Careful, this drops the database table and all of its contents.",
				"operationId": "deleteTable",
				"parameters": [{
					"in": "path",
					"name": "table_name",
					"description": "Name of the table to perform operations on.",
					"type": "string",
					"format": "string"
				}],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [""],
				"security": []
			},
			"get": {
				"summary": "describeTable() - Retrieve table definition for the given table.",
				"description": "This describes the table, its fields and relations to other tables.",
				"operationId": "describeTable",
				"parameters": [{
					"in": "query",
					"name": "refresh",
					"description": "Refresh any cached copy of the schema.",
					"type": "string",
					"format": "string"
				},
				{
					"in": "path",
					"name": "table_name",
					"description": "Name of the table to perform operations on.",
					"type": "string",
					"format": "string"
				}],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [""],
				"security": []
			},
			"patch": {
				"summary": "updateTable() - Update (patch) a table with the given properties.",
				"description": "Post data should be an array of field properties for a single record or an array of fields.",
				"operationId": "updateTable",
				"parameters": [{
					"in": "body",
					"name": "schema",
					"description": "Array of field definitions.",
					"schema": {
						"$ref": "#/definitions/holder"
					}
				},
				{
					"in": "path",
					"name": "table_name",
					"description": "Name of the table to perform operations on.",
					"type": "string",
					"format": "string"
				}],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [""],
				"security": []
			},
			"post": {
				"summary": "createTable() - Create a table with the given properties and fields.",
				"description": "Post data should be an array of field properties for a single record or an array of fields.",
				"operationId": "createTable",
				"parameters": [{
					"in": "body",
					"name": "schema",
					"description": "Array of table properties and fields definitions.",
					"schema": {
						"$ref": "#/definitions/holder"
					}
				},
				{
					"in": "path",
					"name": "table_name",
					"description": "Name of the table to perform operations on.",
					"type": "string",
					"format": "string"
				}],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [""],
				"security": []
			},
			"put": {
				"summary": "replaceTable() - Update (replace) a table with the given properties.",
				"description": "Post data should be an array of field properties for a single record or an array of fields.",
				"operationId": "replaceTable",
				"parameters": [{
					"in": "body",
					"name": "schema",
					"description": "Array of field definitions.",
					"schema": {
						"$ref": "#/definitions/holder"
					}
				},
				{
					"in": "path",
					"name": "table_name",
					"description": "Name of the table to perform operations on.",
					"type": "string",
					"format": "string"
				}],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [""],
				"security": []
			}
		},
		"/db/_schema/{table_name}/{field_name}": {
			"delete": {
				"summary": "deleteField() - Remove the given field from the given table.",
				"description": "Careful, this drops the database table field/column and all of its contents.",
				"operationId": "deleteField",
				"parameters": [{
					"in": "path",
					"name": "field_name",
					"description": "Name of the field to perform operations on.",
					"type": "string",
					"format": "string"
				},
				{
					"in": "path",
					"name": "table_name",
					"description": "Name of the table to perform operations on.",
					"type": "string",
					"format": "string"
				}],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [""],
				"security": []
			},
			"get": {
				"summary": "describeField() - Retrieve the definition of the given field for the given table.",
				"description": "This describes the field and its properties.",
				"operationId": "describeField",
				"parameters": [{
					"in": "path",
					"name": "field_name",
					"description": "Name of the field to perform operations on.",
					"type": "string",
					"format": "string"
				},
				{
					"in": "query",
					"name": "refresh",
					"description": "Refresh any cached copy of the schema.",
					"type": "string",
					"format": "string"
				},
				{
					"in": "path",
					"name": "table_name",
					"description": "Name of the table to perform operations on.",
					"type": "string",
					"format": "string"
				}],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [""],
				"security": []
			},
			"patch": {
				"summary": "updateField() - Update one record by identifier.",
				"description": "Post data should be an array of field properties for the given field.",
				"operationId": "updateField",
				"parameters": [{
					"in": "path",
					"name": "field_name",
					"description": "Name of the field to perform operations on.",
					"type": "string",
					"format": "string"
				},
				{
					"in": "body",
					"name": "properties",
					"description": "Array of field properties.",
					"schema": {
						"$ref": "#/definitions/holder"
					}
				},
				{
					"in": "path",
					"name": "table_name",
					"description": "Name of the table to perform operations on.",
					"type": "string",
					"format": "string"
				}],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [""],
				"security": []
			},
			"put": {
				"summary": "replaceField() - Update one record by identifier.",
				"description": "Post data should be an array of field properties for the given field.",
				"operationId": "replaceField",
				"parameters": [{
					"in": "path",
					"name": "field_name",
					"description": "Name of the field to perform operations on.",
					"type": "string",
					"format": "string"
				},
				{
					"in": "body",
					"name": "properties",
					"description": "Array of field properties.",
					"schema": {
						"$ref": "#/definitions/holder"
					}
				},
				{
					"in": "path",
					"name": "table_name",
					"description": "Name of the table to perform operations on.",
					"type": "string",
					"format": "string"
				}],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [""],
				"security": []
			}
		},
		"/db/{table_name}": {
			"delete": {
				"summary": "deleteRecordsByIds() - Delete one or more records.",
				"description": "Set the <b>ids</b> parameter to a list of record identifying (primary key) values to delete specific records.<br/> Alternatively, to delete records by a large list of ids, pass the ids in the <b>body</b>.<br/> Use the <b>related</b> parameter to return related records for each resource. By default, no related records are returned.<br/> By default, only the id property of the record is returned on success, use <b>fields</b> to return more info. ",
				"operationId": "deleteRecordsByIds",
				"parameters": [{
					"in": "body",
					"name": "body",
					"description": "Data containing ids of records to delete.",
					"schema": {
						"$ref": "#/definitions/holder"
					}
				},
				{
					"in": "query",
					"name": "continue",
					"description": "In batch scenarios, where supported, continue processing even after one record fails. Default behavior is to halt and return results up to the first point of failure.",
					"type": "string",
					"format": "string"
				},
				{
					"in": "query",
					"name": "fields",
					"description": "Comma-delimited list of field names to retrieve for each record, * to return all fields.",
					"type": "string",
					"format": "string"
				},
				{
					"in": "query",
					"name": "filter",
					"description": "SQL WHERE clause filter to limit the records deleted.",
					"type": "string",
					"format": "string"
				},
				{
					"in": "query",
					"name": "force",
					"description": "Set force to true to delete all records in this table, otherwise <b>filter</b> parameter is required.",
					"type": "string",
					"format": "string"
				},
				{
					"in": "query",
					"name": "ids",
					"description": "Comma-delimited list of the identifiers of the records to delete.",
					"type": "string",
					"format": "string"
				},
				{
					"in": "query",
					"name": "id_field",
					"description": "Single or comma-delimited list of the fields used as identifiers for the table, used to override defaults or provide identifiers when none are provisioned.",
					"type": "string",
					"format": "string"
				},
				{
					"in": "query",
					"name": "id_type",
					"description": "Single or comma-delimited list of the field types used as identifiers for the table, used to override defaults or provide identifiers when none are provisioned.",
					"type": "string",
					"format": "string"
				},
				{
					"in": "query",
					"name": "related",
					"description": "Comma-delimited list of relationship names to retrieve for each record, or * to retrieve all.",
					"type": "string",
					"format": "string"
				},
				{
					"in": "query",
					"name": "rollback",
					"description": "In batch scenarios, where supported, rollback all changes if any record of the batch fails. Default behavior is to halt and return results up to the first point of failure, leaving any changes.",
					"type": "string",
					"format": "string"
				},
				{
					"in": "path",
					"name": "table_name",
					"description": "Name of the table to perform operations on.",
					"type": "string",
					"format": "string"
				}],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [""],
				"security": []
			},
			"get": {
				"summary": "getRecordsByFilter() - Retrieve one or more records by using a filter.",
				"description": "Set the <b>filter</b> parameter to a SQL WHERE clause (optional native filter accepted in some scenarios) to limit records returned or leave it blank to return all records up to the maximum limit.<br/> Set the <b>limit</b> parameter with or without a filter to return a specific amount of records.<br/> Use the <b>offset</b> parameter along with the <b>limit</b> parameter to page through sets of records.<br/> Set the <b>order</b> parameter to SQL ORDER_BY clause containing field and optional direction (<field_name> [ASC|DESC]) to order the returned records.<br/> Alternatively, to send the <b>filter</b> with or without <b>params</b> as posted data, use the getRecordsByPost() POST request and post a filter with or without params.<br/>Use the <b>related</b> parameter to return related records for each resource. By default, no related records are returned.<br/> Use the <b>fields</b> parameter to limit properties returned for each record. By default, all fields are returned for all records. ",
				"operationId": "getRecordsByFilter",
				"parameters": [{
					"in": "query",
					"name": "continue",
					"description": "In batch scenarios, where supported, continue processing even after one record fails. Default behavior is to halt and return results up to the first point of failure.",
					"type": "string",
					"format": "string"
				},
				{
					"in": "query",
					"name": "fields",
					"description": "Comma-delimited list of field names to retrieve for each record, * to return all fields.",
					"type": "string",
					"format": "string"
				},
				{
					"in": "query",
					"name": "filter",
					"description": "SQL WHERE clause filter to limit the records retrieved.",
					"type": "string",
					"format": "string"
				},
				{
					"in": "query",
					"name": "ids",
					"description": "Comma-delimited list of the identifiers of the records to retrieve.",
					"type": "string",
					"format": "string"
				},
				{
					"in": "query",
					"name": "id_field",
					"description": "Single or comma-delimited list of the fields used as identifiers for the table, used to override defaults or provide identifiers when none are provisioned.",
					"type": "string",
					"format": "string"
				},
				{
					"in": "query",
					"name": "id_type",
					"description": "Single or comma-delimited list of the field types used as identifiers for the table, used to override defaults or provide identifiers when none are provisioned.",
					"type": "string",
					"format": "string"
				},
				{
					"in": "query",
					"name": "include_count",
					"description": "Include the total number of filter results as meta data.",
					"type": "string",
					"format": "string"
				},
				{
					"in": "query",
					"name": "include_schema",
					"description": "Include table properties, including indexes and field details where available, as meta data.",
					"type": "string",
					"format": "string"
				},
				{
					"in": "query",
					"name": "limit",
					"description": "Maximum number of records to return.",
					"type": "string",
					"format": "string"
				},
				{
					"in": "query",
					"name": "offset",
					"description": "Offset the filter results to a particular record index (may require <b>order</b>> parameter in some scenarios).",
					"type": "string",
					"format": "string"
				},
				{
					"in": "query",
					"name": "order",
					"description": "SQL ORDER_BY clause containing field and direction for filter results.",
					"type": "string",
					"format": "string"
				},
				{
					"in": "query",
					"name": "related",
					"description": "Comma-delimited list of relationship names to retrieve for each record, or * to retrieve all.",
					"type": "string",
					"format": "string"
				},
				{
					"in": "path",
					"name": "table_name",
					"description": "Name of the table to perform operations on.",
					"type": "string",
					"format": "string"
				}],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [""],
				"security": []
			},
			"patch": {
				"summary": "updateRecordsByIds() - Update (patch) one or more records.",
				"description": "Posted body should be a single record with name-value pairs to update wrapped in a <b>record</b> tag.<br/> Ids can be included via URL parameter or included in the posted body.<br/> Use the <b>related</b> parameter to return related records for each resource. By default, no related records are returned.<br/> By default, only the id property of the record is returned on success. Use <b>fields</b> parameter to return more info.",
				"operationId": "updateRecordsByIds",
				"parameters": [{
					"in": "body",
					"name": "body",
					"description": "A single record containing name-value pairs of fields to update.",
					"schema": {
						"$ref": "#/definitions/holder"
					}
				},
				{
					"in": "query",
					"name": "continue",
					"description": "In batch scenarios, where supported, continue processing even after one record fails. Default behavior is to halt and return results up to the first point of failure.",
					"type": "string",
					"format": "string"
				},
				{
					"in": "query",
					"name": "fields",
					"description": "Comma-delimited list of field names to retrieve for each record, * to return all fields.",
					"type": "string",
					"format": "string"
				},
				{
					"in": "query",
					"name": "filter",
					"description": "SQL-like filter to limit the records to modify.",
					"type": "string",
					"format": "string"
				},
				{
					"in": "query",
					"name": "ids",
					"description": "Comma-delimited list of the identifiers of the records to modify.",
					"type": "string",
					"format": "string"
				},
				{
					"in": "query",
					"name": "id_field",
					"description": "Single or comma-delimited list of the fields used as identifiers for the table, used to override defaults or provide identifiers when none are provisioned.",
					"type": "string",
					"format": "string"
				},
				{
					"in": "query",
					"name": "id_type",
					"description": "Single or comma-delimited list of the field types used as identifiers for the table, used to override defaults or provide identifiers when none are provisioned.",
					"type": "string",
					"format": "string"
				},
				{
					"in": "query",
					"name": "related",
					"description": "Comma-delimited list of relationship names to retrieve for each record, or * to retrieve all.",
					"type": "string",
					"format": "string"
				},
				{
					"in": "query",
					"name": "rollback",
					"description": "In batch scenarios, where supported, rollback all changes if any record of the batch fails. Default behavior is to halt and return results up to the first point of failure, leaving any changes.",
					"type": "string",
					"format": "string"
				},
				{
					"in": "path",
					"name": "table_name",
					"description": "Name of the table to perform operations on.",
					"type": "string",
					"format": "string"
				}],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [""],
				"security": []
			},
			"post": {
				"summary": "getRecordsByPost() - Retrieve one or more records by posting necessary data.",
				"description": "Post data should be an array of records wrapped in a <b>record</b> element - including the identifying fields at a minimum, or a <b>filter</b> in the SQL or other appropriate formats with or without a replacement <b>params</b> array, or a list of <b>ids</b> in a string list or an array.<br/> Use the <b>related</b> parameter to return related records for each resource. By default, no related records are returned.<br/> Use the <b>fields</b> parameter to limit properties returned for each record. By default, all fields are returned for identified records. ",
				"operationId": "getRecordsByPost",
				"parameters": [{
					"in": "body",
					"name": "body",
					"description": "Data containing name-value pairs of records to retrieve.",
					"schema": {
						"$ref": "#/definitions/holder"
					}
				},
				{
					"in": "query",
					"name": "continue",
					"description": "In batch scenarios, where supported, continue processing even after one record fails. Default behavior is to halt and return results up to the first point of failure.",
					"type": "string",
					"format": "string"
				},
				{
					"in": "query",
					"name": "fields",
					"description": "Comma-delimited list of field names to retrieve for each record, * to return all fields.",
					"type": "string",
					"format": "string"
				},
				{
					"in": "query",
					"name": "id_field",
					"description": "Single or comma-delimited list of the fields used as identifiers for the table, used to override defaults or provide identifiers when none are provisioned.",
					"type": "string",
					"format": "string"
				},
				{
					"in": "query",
					"name": "id_type",
					"description": "Single or comma-delimited list of the field types used as identifiers for the table, used to override defaults or provide identifiers when none are provisioned.",
					"type": "string",
					"format": "string"
				},
				{
					"in": "query",
					"name": "related",
					"description": "Comma-delimited list of relationship names to retrieve for each record, or * to retrieve all.",
					"type": "string",
					"format": "string"
				},
				{
					"in": "query",
					"name": "rollback",
					"description": "In batch scenarios, where supported, rollback all changes if any record of the batch fails. Default behavior is to halt and return results up to the first point of failure, leaving any changes.",
					"type": "string",
					"format": "string"
				},
				{
					"in": "path",
					"name": "table_name",
					"description": "Name of the table to perform operations on.",
					"type": "string",
					"format": "string"
				},
				{
					"in": "header",
					"name": "X-HTTP-METHOD",
					"description": "Override request using POST to tunnel other http request, such as GET.",
					"type": "string",
					"format": "string"
				}],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [""],
				"security": []
			},
			"put": {
				"summary": "replaceRecordsByIds() - Update (replace) one or more records.",
				"description": "Posted body should be a single record with name-value pairs to update wrapped in a <b>record</b> tag.<br/> Ids can be included via URL parameter or included in the posted body.<br/> Use the <b>related</b> parameter to return related records for each resource. By default, no related records are returned.<br/> By default, only the id property of the record is returned on success. Use <b>fields</b> parameter to return more info.",
				"operationId": "replaceRecordsByIds",
				"parameters": [{
					"in": "body",
					"name": "body",
					"description": "Data containing name-value pairs of records to update.",
					"schema": {
						"$ref": "#/definitions/holder"
					}
				},
				{
					"in": "query",
					"name": "continue",
					"description": "In batch scenarios, where supported, continue processing even after one record fails. Default behavior is to halt and return results up to the first point of failure.",
					"type": "string",
					"format": "string"
				},
				{
					"in": "query",
					"name": "fields",
					"description": "Comma-delimited list of field names to retrieve for each record, * to return all fields.",
					"type": "string",
					"format": "string"
				},
				{
					"in": "query",
					"name": "filter",
					"description": "SQL-like filter to limit the records to modify.",
					"type": "string",
					"format": "string"
				},
				{
					"in": "query",
					"name": "ids",
					"description": "Comma-delimited list of the identifiers of the records to modify.",
					"type": "string",
					"format": "string"
				},
				{
					"in": "query",
					"name": "id_field",
					"description": "Single or comma-delimited list of the fields used as identifiers for the table, used to override defaults or provide identifiers when none are provisioned.",
					"type": "string",
					"format": "string"
				},
				{
					"in": "query",
					"name": "id_type",
					"description": "Single or comma-delimited list of the field types used as identifiers for the table, used to override defaults or provide identifiers when none are provisioned.",
					"type": "string",
					"format": "string"
				},
				{
					"in": "query",
					"name": "related",
					"description": "Comma-delimited list of relationship names to retrieve for each record, or * to retrieve all.",
					"type": "string",
					"format": "string"
				},
				{
					"in": "query",
					"name": "rollback",
					"description": "In batch scenarios, where supported, rollback all changes if any record of the batch fails. Default behavior is to halt and return results up to the first point of failure, leaving any changes.",
					"type": "string",
					"format": "string"
				},
				{
					"in": "path",
					"name": "table_name",
					"description": "Name of the table to perform operations on.",
					"type": "string",
					"format": "string"
				}],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [""],
				"security": []
			}
		},
		"/db/{table_name}/{id}": {
			"delete": {
				"summary": "deleteRecord() - Delete one record by identifier.",
				"description": "Use the <b>related</b> parameter to return related records for each resource. By default, no related records are returned.<br/> Use the <b>fields</b> parameter to return more deleted properties. By default, the id is returned.",
				"operationId": "deleteRecord",
				"parameters": [{
					"in": "query",
					"name": "fields",
					"description": "Comma-delimited list of field names to retrieve for each record, * to return all fields.",
					"type": "string",
					"format": "string"
				},
				{
					"in": "path",
					"name": "id",
					"description": "Identifier of the record to delete.",
					"type": "string",
					"format": "string"
				},
				{
					"in": "query",
					"name": "id_field",
					"description": "Single or comma-delimited list of the fields used as identifiers for the table, used to override defaults or provide identifiers when none are provisioned.",
					"type": "string",
					"format": "string"
				},
				{
					"in": "query",
					"name": "id_type",
					"description": "Single or comma-delimited list of the field types used as identifiers for the table, used to override defaults or provide identifiers when none are provisioned.",
					"type": "string",
					"format": "string"
				},
				{
					"in": "query",
					"name": "related",
					"description": "Comma-delimited list of relationship names to retrieve for each record, or * to retrieve all.",
					"type": "string",
					"format": "string"
				},
				{
					"in": "path",
					"name": "table_name",
					"description": "Name of the table to perform operations on.",
					"type": "string",
					"format": "string"
				}],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [""],
				"security": []
			},
			"get": {
				"summary": "getRecord() - Retrieve one record by identifier.",
				"description": "Use the <b>related</b> parameter to return related records for each resource. By default, no related records are returned.<br/> Use the <b>fields</b> parameter to limit properties that are returned. By default, all fields are returned.",
				"operationId": "getRecord",
				"parameters": [{
					"in": "query",
					"name": "fields",
					"description": "Comma-delimited list of field names to retrieve for the record, * to return all fields.",
					"type": "string",
					"format": "string"
				},
				{
					"in": "path",
					"name": "id",
					"description": "Identifier of the record to retrieve.",
					"type": "string",
					"format": "string"
				},
				{
					"in": "query",
					"name": "id_field",
					"description": "Single or comma-delimited list of the fields used as identifiers for the table, used to override defaults or provide identifiers when none are provisioned.",
					"type": "string",
					"format": "string"
				},
				{
					"in": "query",
					"name": "id_type",
					"description": "Single or comma-delimited list of the field types used as identifiers for the table, used to override defaults or provide identifiers when none are provisioned.",
					"type": "string",
					"format": "string"
				},
				{
					"in": "query",
					"name": "related",
					"description": "Comma-delimited list of relationship names to retrieve for each record, or * to retrieve all.",
					"type": "string",
					"format": "string"
				},
				{
					"in": "path",
					"name": "table_name",
					"description": "Name of the table to perform operations on.",
					"type": "string",
					"format": "string"
				}],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [""],
				"security": []
			},
			"patch": {
				"summary": "updateRecord() - Update (patch) one record by identifier.",
				"description": "Post data should be an array of fields for a single record.<br/> Use the <b>related</b> parameter to return related records for each resource. By default, no related records are returned.<br/> Use the <b>fields</b> parameter to return more properties. By default, the id is returned.",
				"operationId": "updateRecord",
				"parameters": [{
					"in": "body",
					"name": "body",
					"description": "Data containing name-value pairs of the fields to update.",
					"schema": {
						"$ref": "#/definitions/holder"
					}
				},
				{
					"in": "query",
					"name": "fields",
					"description": "Comma-delimited list of field names to retrieve for each record, * to return all fields.",
					"type": "string",
					"format": "string"
				},
				{
					"in": "path",
					"name": "id",
					"description": "Identifier of the record to update.",
					"type": "string",
					"format": "string"
				},
				{
					"in": "query",
					"name": "id_field",
					"description": "Single or comma-delimited list of the fields used as identifiers for the table, used to override defaults or provide identifiers when none are provisioned.",
					"type": "string",
					"format": "string"
				},
				{
					"in": "query",
					"name": "id_type",
					"description": "Single or comma-delimited list of the field types used as identifiers for the table, used to override defaults or provide identifiers when none are provisioned.",
					"type": "string",
					"format": "string"
				},
				{
					"in": "query",
					"name": "related",
					"description": "Comma-delimited list of relationship names to retrieve for each record, or * to retrieve all.",
					"type": "string",
					"format": "string"
				},
				{
					"in": "path",
					"name": "table_name",
					"description": "The name of the table you want to update.",
					"type": "string",
					"format": "string"
				}],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [""],
				"security": []
			},
			"post": {
				"summary": "createRecord() - Create one record with given identifier.",
				"description": "Post data should be an array of fields for a single record.<br/> Use the <b>related</b> parameter to return related records for each resource. By default, no related records are returned.<br/> Use the <b>fields</b> parameter to return more properties. By default, the id is returned.",
				"operationId": "createRecord",
				"parameters": [{
					"in": "body",
					"name": "body",
					"description": "Data containing name-value pairs of the record to create.",
					"schema": {
						"$ref": "#/definitions/holder"
					}
				},
				{
					"in": "query",
					"name": "fields",
					"description": "Comma-delimited list of field names to retrieve for each record, * to return all fields.",
					"type": "string",
					"format": "string"
				},
				{
					"in": "path",
					"name": "id",
					"description": "Identifier of the record to create.",
					"type": "string",
					"format": "string"
				},
				{
					"in": "query",
					"name": "id_field",
					"description": "Single or comma-delimited list of the fields used as identifiers for the table, used to override defaults or provide identifiers when none are provisioned.",
					"type": "string",
					"format": "string"
				},
				{
					"in": "query",
					"name": "id_type",
					"description": "Single or comma-delimited list of the field types used as identifiers for the table, used to override defaults or provide identifiers when none are provisioned.",
					"type": "string",
					"format": "string"
				},
				{
					"in": "query",
					"name": "related",
					"description": "Comma-delimited list of relationship names to retrieve for each record, or * to retrieve all.",
					"type": "string",
					"format": "string"
				},
				{
					"in": "path",
					"name": "table_name",
					"description": "Name of the table to perform operations on.",
					"type": "string",
					"format": "string"
				}],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [""],
				"security": []
			},
			"put": {
				"summary": "replaceRecord() - Replace the content of one record by identifier.",
				"description": "Post data should be an array of fields for a single record.<br/> Use the <b>related</b> parameter to return related records for each resource. By default, no related records are returned.<br/> Use the <b>fields</b> parameter to return more properties. By default, the id is returned.",
				"operationId": "replaceRecord",
				"parameters": [{
					"in": "body",
					"name": "body",
					"description": "Data containing name-value pairs of the replacement record.",
					"schema": {
						"$ref": "#/definitions/holder"
					}
				},
				{
					"in": "query",
					"name": "fields",
					"description": "Comma-delimited list of field names to retrieve for each record, * to return all fields.",
					"type": "string",
					"format": "string"
				},
				{
					"in": "path",
					"name": "id",
					"description": "Identifier of the record to update.",
					"type": "string",
					"format": "string"
				},
				{
					"in": "query",
					"name": "id_field",
					"description": "Single or comma-delimited list of the fields used as identifiers for the table, used to override defaults or provide identifiers when none are provisioned.",
					"type": "string",
					"format": "string"
				},
				{
					"in": "query",
					"name": "id_type",
					"description": "Single or comma-delimited list of the field types used as identifiers for the table, used to override defaults or provide identifiers when none are provisioned.",
					"type": "string",
					"format": "string"
				},
				{
					"in": "query",
					"name": "related",
					"description": "Comma-delimited list of relationship names to retrieve for each record, or * to retrieve all.",
					"type": "string",
					"format": "string"
				},
				{
					"in": "path",
					"name": "table_name",
					"description": "Name of the table to perform operations on.",
					"type": "string",
					"format": "string"
				}],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [""],
				"security": []
			}
		}
	},
	"definitions": {
		"ComponentList": {
			"properties": {
				"resource": {
					"description": "This is a default description.",
					"type": "string"
				}
			}
		},
		"Resource": {
			"properties": {
				"name": {
					"description": "This is a default description.",
					"type": "string"
				}
			}
		},
		"Resources": {
			"properties": {
				"resource": {
					"description": "This is a default description.",
					"type": "string"
				}
			}
		},
		"Success": {
			"properties": {
				"success": {
					"description": "This is a default description.",
					"type": "string"
				}
			}
		},
		"Tables": {
			"properties": {
				"table": {
					"description": "This is a default description.",
					"type": "string"
				}
			}
		},
		"Table": {
			"properties": {
				"name": {
					"description": "This is a default description.",
					"type": "string"
				}
			}
		},
		"RecordRequest": {
			"properties": {
				"id": {
					"description": "This is a default description.",
					"type": "string"
				}
			}
		},
		"RecordsRequest": {
			"properties": {
				"record": {
					"description": "This is a default description.",
					"type": "string"
				}
			}
		},
		"IdsRequest": {
			"properties": {
				"ids": {
					"description": "This is a default description.",
					"type": "string"
				}
			}
		},
		"IdsRecordRequest": {
			"properties": {
				"record": {
					"description": "This is a default description.",
					"type": "string"
				},
				"ids": {
					"description": "This is a default description.",
					"type": "string"
				}
			}
		},
		"FilterRequest": {
			"properties": {
				"filter": {
					"description": "This is a default description.",
					"type": "string"
				},
				"params": {
					"description": "This is a default description.",
					"type": "string"
				}
			}
		},
		"FilterRecordRequest": {
			"properties": {
				"record": {
					"description": "This is a default description.",
					"type": "string"
				},
				"filter": {
					"description": "This is a default description.",
					"type": "string"
				},
				"params": {
					"description": "This is a default description.",
					"type": "string"
				}
			}
		},
		"GetRecordsRequest": {
			"properties": {
				"record": {
					"description": "This is a default description.",
					"type": "string"
				},
				"ids": {
					"description": "This is a default description.",
					"type": "string"
				},
				"filter": {
					"description": "This is a default description.",
					"type": "string"
				},
				"params": {
					"description": "This is a default description.",
					"type": "string"
				}
			}
		},
		"RecordResponse": {
			"properties": {
				"id": {
					"description": "This is a default description.",
					"type": "string"
				}
			}
		},
		"RecordsResponse": {
			"properties": {
				"record": {
					"description": "This is a default description.",
					"type": "string"
				},
				"meta": {
					"description": "This is a default description.",
					"type": "string"
				}
			}
		},
		"Metadata": {
			"properties": {
				"schema": {
					"description": "This is a default description.",
					"type": "string"
				},
				"count": {
					"description": "This is a default description.",
					"type": "string"
				}
			}
		},
		"TableSchemas": {
			"properties": {
				"table": {
					"description": "This is a default description.",
					"type": "string"
				}
			}
		},
		"TableSchema": {
			"properties": {
				"name": {
					"description": "This is a default description.",
					"type": "string"
				},
				"label": {
					"description": "This is a default description.",
					"type": "string"
				},
				"plural": {
					"description": "This is a default description.",
					"type": "string"
				},
				"primary_key": {
					"description": "This is a default description.",
					"type": "string"
				},
				"name_field": {
					"description": "This is a default description.",
					"type": "string"
				},
				"field": {
					"description": "This is a default description.",
					"type": "string"
				},
				"related": {
					"description": "This is a default description.",
					"type": "string"
				}
			}
		},
		"FieldSchema": {
			"properties": {
				"name": {
					"description": "This is a default description.",
					"type": "string"
				},
				"label": {
					"description": "This is a default description.",
					"type": "string"
				},
				"type": {
					"description": "This is a default description.",
					"type": "string"
				},
				"db_type": {
					"description": "This is a default description.",
					"type": "string"
				},
				"length": {
					"description": "This is a default description.",
					"type": "string"
				},
				"precision": {
					"description": "This is a default description.",
					"type": "string"
				},
				"scale": {
					"description": "This is a default description.",
					"type": "string"
				},
				"default_value": {
					"description": "This is a default description.",
					"type": "string"
				},
				"required": {
					"description": "This is a default description.",
					"type": "string"
				},
				"allow_null": {
					"description": "This is a default description.",
					"type": "string"
				},
				"fixed_length": {
					"description": "This is a default description.",
					"type": "string"
				},
				"supports_multibyte": {
					"description": "This is a default description.",
					"type": "string"
				},
				"auto_increment": {
					"description": "This is a default description.",
					"type": "string"
				},
				"is_primary_key": {
					"description": "This is a default description.",
					"type": "string"
				},
				"is_foreign_key": {
					"description": "This is a default description.",
					"type": "string"
				},
				"ref_table": {
					"description": "This is a default description.",
					"type": "string"
				},
				"ref_fields": {
					"description": "This is a default description.",
					"type": "string"
				},
				"validation": {
					"description": "This is a default description.",
					"type": "string"
				},
				"value": {
					"description": "This is a default description.",
					"type": "string"
				}
			}
		},
		"RelatedSchema": {
			"properties": {
				"name": {
					"description": "This is a default description.",
					"type": "string"
				},
				"type": {
					"description": "This is a default description.",
					"type": "string"
				},
				"ref_table": {
					"description": "This is a default description.",
					"type": "string"
				},
				"ref_field": {
					"description": "This is a default description.",
					"type": "string"
				},
				"join": {
					"description": "This is a default description.",
					"type": "string"
				},
				"field": {
					"description": "This is a default description.",
					"type": "string"
				}
			}
		},
		"StoredProcResponse": {
			"properties": {
				"_wrapper_if_supplied_": {
					"description": "This is a default description.",
					"type": "string"
				},
				"_out_param_name_": {
					"description": "This is a default description.",
					"type": "string"
				}
			}
		},
		"StoredProcRequest": {
			"properties": {
				"params": {
					"description": "This is a default description.",
					"type": "string"
				},
				"schema": {
					"description": "This is a default description.",
					"type": "string"
				},
				"wrapper": {
					"description": "This is a default description.",
					"type": "string"
				},
				"returns": {
					"description": "This is a default description.",
					"type": "string"
				}
			}
		},
		"StoredProcParam": {
			"properties": {
				"name": {
					"description": "This is a default description.",
					"type": "string"
				},
				"param_type": {
					"description": "This is a default description.",
					"type": "string"
				},
				"value": {
					"description": "This is a default description.",
					"type": "string"
				},
				"type": {
					"description": "This is a default description.",
					"type": "string"
				},
				"length": {
					"description": "This is a default description.",
					"type": "string"
				}
			}
		},
		"StoredProcResultSchema": {
			"properties": {
				"_field_name_": {
					"description": "This is a default description.",
					"type": "string"
				}
			}
		}
	}
}