{
	"swagger": "2.0",
	"info": {
		"title": "Spreaker API",
		"description": null,
		"termsOfService": null,
		"version": "v1"
	},
	"host": "api.spreaker.com",
	"basePath": "/",
	"schemes": [
		"http"
	],
	"produces": [
		"application/json"
	],
	"consumes": [
		"application/json"
	],
	"paths": {
		"/categories/flat": {
			"get": {
				"summary": "Get Categories",
				"description": "Retrieves all categories in Spreaker",
				"operationId": "",
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [
					"Categories"
				]
			}
		},
		"/episode/<episode_id>/image": {
			"put": {
				"summary": "Change Episode Image",
				"description": "Change Episode Image",
				"operationId": "",
				"parameters": [
					{
						"name": "episode_id",
						"in": "path",
						"description": "The unique episode id.",
						"type": "string",
						"format": "string"
					},
					{
						"name": "image_id",
						"in": "query",
						"description": "The id of the image to set to the episode. The image must be uploaded before using it (see Upload an image) and must belong to episode authors images storage.",
						"type": "integer",
						"format": "integer"
					}
				],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [
					"Episode Images"
				]
			}
		},
		"/episode/{episode_id}": {
			"put": {
				"summary": "Edit Episode",
				"description": "Edit episode info (eg. title, description, category, tags, ...)",
				"operationId": "",
				"parameters": [
					{
						"name": "category_id",
						"in": "query",
						"description": "Episode category",
						"type": "integer",
						"format": "integer"
					},
					{
						"name": "description",
						"in": "query",
						"description": "Episode description, max length 10k chars",
						"type": "string",
						"format": "string"
					},
					{
						"name": "episode_id",
						"in": "path",
						"description": "the episode id.",
						"type": "string",
						"format": "string"
					},
					{
						"name": "tags",
						"in": "query",
						"description": " Episode tags (comma separated)",
						"type": "string",
						"format": "string"
					},
					{
						"name": "title",
						"in": "query",
						"description": " Episode title, max length 40 chars",
						"type": "string",
						"format": "string"
					}
				],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [
					"Episode"
				]
			}
		},
		"/episode/{episode_id}/media": {
			"get": {
				"summary": "Get Episode Media List",
				"description": "Get Episode Media List",
				"operationId": "",
				"parameters": [
					{
						"name": "episode_id",
						"in": "path",
						"description": "Unique id of episode.",
						"type": "string",
						"format": "string"
					}
				],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [
					"Media"
				]
			}
		},
		"/episode/{episode_id}/streams/icy": {
			"get": {
				"summary": "Get Episode Streams",
				"description": "The response contains a collection of ICY streams.",
				"operationId": "",
				"parameters": [
					{
						"name": "episode_id",
						"in": "query",
						"description": "The episode id.",
						"type": "string",
						"format": "string"
					}
				],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [
					"Episodes"
				]
			}
		},
		"/episode/{episode_id}/streams/rtmp": {
			"get": {
				"summary": "Get Episode Streams",
				"description": "The response contains a collection of RTMP / RTMPT streams.",
				"operationId": "",
				"parameters": [
					{
						"name": "episode_id",
						"in": "path",
						"description": "The episode id.",
						"type": "string",
						"format": "string"
					}
				],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [
					"Episodes"
				]
			}
		},
		"/episodes/live": {
			"get": {
				"summary": "Get Live Episodes",
				"description": "Retrieves all live episodes at the moment of the request",
				"operationId": "",
				"parameters": [
					{
						"name": "show_id",
						"in": "query",
						"description": "An list of show_id applied as a filter",
						"type": "integer",
						"format": "integer"
					}
				],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [
					"Episodes"
				]
			}
		},
		"/explore/{category_id}": {
			"get": {
				"summary": "Explore Category Items",
				"description": "This API returns information and items of a specific category. The response contains two properties at root level:",
				"operationId": "",
				"parameters": [
					{
						"name": "explore_category",
						"in": "query",
						"description": "contains category information, the exact same information exported by /explore/categories API",
						"type": "string",
						"format": "string"
					},
					{
						"name": "items",
						"in": "query",
						"description": "contains a sorted list of shows or episodes, depending on the category type (type 1 and 3 contain episodes, type 2 contains shows)",
						"type": "string",
						"format": "string"
					}
				],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [
					"Explore Categories"
				]
			}
		},
		"/library/{user_id}": {
			"post": {
				"summary": "Create Media",
				"description": "Upload a new Media in the specified user library",
				"operationId": "",
				"parameters": [
					{
						"name": "Filedata",
						"in": "path",
						"description": " The file to upload, encoded multipart/form-data",
						"type": "string",
						"format": "string"
					},
					{
						"name": "length",
						"in": "query",
						"description": "The media length in milliseconds. It will be autodetected is missing. The real length will be calculated while encoding either if this property is specified.",
						"type": "integer",
						"format": "integer"
					},
					{
						"name": "style_id",
						"in": "query",
						"description": "The music style associated to this media. Can be only a Style supported by Spreaker",
						"type": "integer",
						"format": "integer"
					},
					{
						"name": "type",
						"in": "query",
						"description": "The media type: can be one of SONG, JINGLE, LOOP, UNKNOWN, EFFECT, EPISODE",
						"type": "string",
						"format": "string"
					},
					{
						"name": "user_id",
						"in": "path",
						"description": "The unique user id.",
						"type": "string",
						"format": "string"
					}
				],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [
					"Media"
				]
			}
		},
		"/library/{user_id}/effects/owned": {
			"get": {
				"summary": "Get Owned Media",
				"description": "Get a paginated list of media owned by <user_id> filtered by type:.",
				"operationId": "",
				"parameters": [
					{
						"name": "sort_col",
						"in": "query",
						"description": "The column upon which the results are sorted. Accepted values: name, created_at",
						"type": "string",
						"format": "string"
					},
					{
						"name": "sort_dir",
						"in": "query",
						"description": "The direction of sorting. Accepted values: ASC, DESC",
						"type": "string",
						"format": "string"
					},
					{
						"name": "user_id",
						"in": "path",
						"description": "The user id.",
						"type": "string",
						"format": "string"
					}
				],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [
					"Media"
				]
			}
		},
		"/library/{user_id}/jingles/owned": {
			"get": {
				"summary": "Get Owned Media",
				"description": "Get a paginated list of media owned by <user_id> filtered by type:.",
				"operationId": "",
				"parameters": [
					{
						"name": "sort_col",
						"in": "query",
						"description": "The column upon which the results are sorted. Accepted values: name, created_at",
						"type": "string",
						"format": "string"
					},
					{
						"name": "sort_dir",
						"in": "query",
						"description": "The direction of sorting. Accepted values: ASC, DESC",
						"type": "string",
						"format": "string"
					},
					{
						"name": "user_id",
						"in": "path",
						"description": "The user id.",
						"type": "string",
						"format": "string"
					}
				],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [
					"Media"
				]
			}
		},
		"/library/{user_id}/loops/owned": {
			"get": {
				"summary": "Get Owned Media",
				"description": "Get a paginated list of media owned by <user_id> filtered by type:.",
				"operationId": "",
				"parameters": [
					{
						"name": "sort_col",
						"in": "query",
						"description": "The column upon which the results are sorted. Accepted values: name, created_at",
						"type": "string",
						"format": "string"
					},
					{
						"name": "sort_dir",
						"in": "query",
						"description": "The direction of sorting. Accepted values: ASC, DESC",
						"type": "string",
						"format": "string"
					},
					{
						"name": "user_id",
						"in": "path",
						"description": "The user id.",
						"type": "string",
						"format": "string"
					}
				],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [
					"Media"
				]
			}
		},
		"/library/{user_id}/songs/owned": {
			"get": {
				"summary": "Get Owned Media",
				"description": "Get a paginated list of media owned by <user_id> filtered by type:.",
				"operationId": "",
				"parameters": [
					{
						"name": "sort_col",
						"in": "query",
						"description": "The column upon which the results are sorted. Accepted values: name, created_at",
						"type": "string",
						"format": "string"
					},
					{
						"name": "sort_dir",
						"in": "query",
						"description": "The direction of sorting. Accepted values: ASC, DESC",
						"type": "string",
						"format": "string"
					},
					{
						"name": "user_id",
						"in": "query",
						"description": "Users id.",
						"type": "string",
						"format": "string"
					}
				],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [
					"Media"
				]
			}
		},
		"/library/{user_id}/soundtracks/owned": {
			"get": {
				"summary": "Get Owned Media",
				"description": "Get a paginated list of media owned by <user_id> filtered by type:.",
				"operationId": "",
				"parameters": [
					{
						"name": "sort_col",
						"in": "query",
						"description": "The column upon which the results are sorted. Accepted values: name, created_at",
						"type": "string",
						"format": "string"
					},
					{
						"name": "sort_dir",
						"in": "query",
						"description": " The direction of sorting. Accepted values: ASC, DESC",
						"type": "string",
						"format": "string"
					},
					{
						"name": "user_id",
						"in": "path",
						"description": "The user id.",
						"type": "string",
						"format": "string"
					}
				],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [
					"Media"
				]
			}
		},
		"/lives/top": {
			"get": {
				"summary": "Get Top Live Episodes",
				"description": "Retrieves live episodes sorted by rank",
				"operationId": "",
				"parameters": [
					{
						"name": "I",
						"in": "query",
						"description": "The rank is language - based. This parameter specify which language you want to use to filter contents",
						"type": "string",
						"format": "string"
					}
				],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [
					"Episodes"
				]
			}
		},
		"/media/{media_id}": {
			"get": {
				"summary": "Get Media",
				"description": "Retrieves a Media by unique identifier.",
				"operationId": "",
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [
					"Media"
				]
			}
		},
		"/search/{query}": {
			"get": {
				"summary": "Search users, shows and episodes",
				"description": "Search users, shows and episodes",
				"operationId": "",
				"parameters": [
					{
						"name": "query",
						"in": "path",
						"description": "Search query",
						"type": "string",
						"format": "string"
					}
				],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [
					"Search"
				]
			}
		},
		"/show/search/{query}": {
			"get": {
				"summary": "Search Shows",
				"description": "This API allows to find shows.",
				"operationId": "",
				"parameters": [
					{
						"name": "query",
						"in": "path",
						"description": "Search query",
						"type": "string",
						"format": "string"
					}
				],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [
					"Shows"
				]
			}
		},
		"/show/{show_id}": {
			"put": {
				"summary": "Edit Show",
				"description": "Edit show info (name, description and contacts).",
				"operationId": "",
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [
					"Shows"
				]
			}
		},
		"/show/{show_id}/episodes": {
			"post": {
				"summary": "Create podcast",
				"description": "Creates new podcast episode.",
				"operationId": "",
				"parameters": [
					{
						"name": "category_id",
						"in": "query",
						"description": " Episode category",
						"type": "integer",
						"format": "integer"
					},
					{
						"name": "description",
						"in": "query",
						"description": "Episode description",
						"type": "string",
						"format": "string"
					},
					{
						"name": "download_enabled",
						"in": "query",
						"description": "Enable / disable download (defaults to true)",
						"type": "string",
						"format": "string"
					},
					{
						"name": "explicit",
						"in": "query",
						"description": "True if the episode contains explicit content (defaults to false)",
						"type": "string",
						"format": "string"
					},
					{
						"name": "hidden",
						"in": "query",
						"description": "True if the episode should be private (defaults to false)",
						"type": "boolean",
						"format": "boolean"
					},
					{
						"name": "media_id",
						"in": "query",
						"description": "The single media_id or ordered list of media_id that compose the episode",
						"type": "integer",
						"format": "integer"
					},
					{
						"name": "shares",
						"in": "query",
						"description": "The channels on which this episode has to be shared. ",
						"type": "string",
						"format": "string"
					},
					{
						"name": "show_id",
						"in": "path",
						"description": "Unique show id.",
						"type": "string",
						"format": "string"
					},
					{
						"name": "tags",
						"in": "query",
						"description": "Episode tags (comma separated)",
						"type": "string",
						"format": "string"
					},
					{
						"name": "title",
						"in": "query",
						"description": "Episode title",
						"type": "string",
						"format": "string"
					}
				],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [
					"Podcast"
				]
			}
		},
		"/show/{show_id}/episodes/all": {
			"get": {
				"summary": "Get All Show Episodes",
				"description": "Retrieves all episodes by show (both live and podcast, ordered by published_at DESC).",
				"operationId": "",
				"parameters": [
					{
						"name": "show_id",
						"in": "path",
						"description": "The unique show id.",
						"type": "string",
						"format": "string"
					}
				],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [
					"Show Episodes"
				]
			}
		},
		"/shows": {
			"post": {
				"summary": "Create Show",
				"description": "Create a new Show.",
				"operationId": "",
				"parameters": [
					{
						"name": "title",
						"in": "query",
						"description": "Show title. Min length: 5. Max length: 40",
						"type": "string",
						"format": "string"
					}
				],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [
					"Shows"
				]
			}
		},
		"/shows/top": {
			"get": {
				"summary": "Get Top Shows",
				"description": "Retrieves top shows on Spreaker.",
				"operationId": "",
				"parameters": [
					{
						"name": "l",
						"in": "query",
						"description": "The rank is language - based. This parameter specify which language you want to use to filter contents",
						"type": "string",
						"format": "string"
					},
					{
						"name": "latest_episode",
						"in": "query",
						"description": " True (1) to enable the export of the latest episode. The latest episode could be the current live (if any) or th",
						"type": "string",
						"format": "string"
					}
				],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [
					"Shows"
				]
			}
		},
		"/user/{followed_id}/fans": {
			"post": {
				"summary": "Follow User",
				"description": "Follow User",
				"operationId": "",
				"parameters": [
					{
						"name": "followed_id",
						"in": "path",
						"description": "Allows the authenticating user to follow the user specified in the  parameter.",
						"type": "string",
						"format": "string"
					}
				],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [
					"Users"
				]
			}
		},
		"/user/{followed_id}/fans/{follower_id}": {
			"delete": {
				"summary": "Unfollow User",
				"description": "Unfollow User",
				"operationId": "",
				"parameters": [
					{
						"name": "followed_id",
						"in": "path",
						"description": "",
						"type": "string",
						"format": "string"
					},
					{
						"name": "follower_id",
						"in": "path",
						"description": "",
						"type": "string",
						"format": "string"
					}
				],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [
					"Users"
				]
			}
		},
		"/user/{follower_id}/users/fan": {
			"get": {
				"summary": "Get List of Following",
				"description": "Get List of Following",
				"operationId": "",
				"parameters": [
					{
						"name": "follower_id",
						"in": "path",
						"description": "",
						"type": "string",
						"format": "string"
					}
				],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [
					"Users"
				]
			}
		},
		"/user/{user_id}": {
			"put": {
				"summary": "Edit User",
				"description": "Edit user info (eg. fullname, description aka biography, gender, birthday, ...).",
				"operationId": "",
				"parameters": [
					{
						"name": "description",
						"in": "query",
						"description": "User biography, max length 180 chars",
						"type": "string",
						"format": "string"
					},
					{
						"name": "fullname",
						"in": "query",
						"description": "User fullname, max length 30 chars",
						"type": "string",
						"format": "string"
					},
					{
						"name": "gender",
						"in": "query",
						"description": "User gender: can be MALE or FEMALE",
						"type": "string",
						"format": "string"
					},
					{
						"name": "show_age",
						"in": "query",
						"description": "",
						"type": "boolean",
						"format": "boolean"
					},
					{
						"name": "user_id",
						"in": "path",
						"description": "The user id.",
						"type": "string",
						"format": "string"
					}
				],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [
					"Users"
				]
			}
		},
		"/user/{user_id}/actions": {
			"get": {
				"summary": "Get User Actions",
				"description": "Retrieves the user actions settings",
				"operationId": "",
				"parameters": [
					{
						"name": "EPISODE_BROADCAST",
						"in": "query",
						"description": "The user has published a new episode ( either live or podcast )",
						"type": "string",
						"format": "string"
					},
					{
						"name": "FACEBOOK",
						"in": "query",
						"description": " The user wants to share on facebook the specified action",
						"type": "boolean",
						"format": "boolean"
					},
					{
						"name": "RADIO_FOLLOW",
						"in": "query",
						"description": "The user starts following a radio",
						"type": "string",
						"format": "string"
					},
					{
						"name": "RADIO_MESSAGE",
						"in": "query",
						"description": "The user has sent a message to a radio",
						"type": "string",
						"format": "string"
					},
					{
						"name": "SHOW_FOLLOW",
						"in": "query",
						"description": " The user starts following a show",
						"type": "string",
						"format": "string"
					},
					{
						"name": "SHOW_MESSAGE",
						"in": "query",
						"description": " The user has sent a message to a show",
						"type": "string",
						"format": "string"
					},
					{
						"name": "TWITTER",
						"in": "query",
						"description": "The user wants to share on twitter the specified action",
						"type": "boolean",
						"format": "boolean"
					},
					{
						"name": "USER_FOLLOW",
						"in": "query",
						"description": "The user starts following another user",
						"type": "string",
						"format": "string"
					},
					{
						"name": "user_id",
						"in": "query",
						"description": "The user id.",
						"type": "string",
						"format": "string"
					}
				],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [
					"Users"
				]
			}
		},
		"/user/{user_id}/actions/facebook": {
			"get": {
				"summary": "Facebook Settings",
				"description": "Edit facebook share settings.",
				"operationId": "",
				"parameters": [
					{
						"name": "EPISODE_BROADCAST",
						"in": "query",
						"description": "on to enable sharing when the user has published a new episode, off otherwise",
						"type": "string",
						"format": "string"
					},
					{
						"name": "RADIO_FOLLOW",
						"in": "query",
						"description": "on to enable sharing when the user starts following a radio, off otherwise",
						"type": "string",
						"format": "string"
					},
					{
						"name": "RADIO_MESSAGE",
						"in": "query",
						"description": " on to enable sharing when the user has sent a message to a radio, off otherwise",
						"type": "string",
						"format": "string"
					},
					{
						"name": "SHOW_FOLLOW",
						"in": "query",
						"description": " on to enable sharing when the user starts following a show, off otherwise",
						"type": "string",
						"format": "string"
					},
					{
						"name": "SHOW_MESSAGE",
						"in": "query",
						"description": "on to enable sharing when the user has sent a message to a show, off otherwise",
						"type": "string",
						"format": "string"
					},
					{
						"name": "USER_FOLLOW",
						"in": "query",
						"description": "on to enable sharing when the user starts following another user, off otherwise",
						"type": "string",
						"format": "string"
					},
					{
						"name": "user_id",
						"in": "path",
						"description": "The user id.",
						"type": "string",
						"format": "string"
					}
				],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [
					"Users"
				]
			}
		},
		"/user/{user_id}/actions/twitter": {
			"put": {
				"summary": "Twitter Settings",
				"description": "Edit twitter share settings.",
				"operationId": "",
				"parameters": [
					{
						"name": "EPISODE_BROADCAST",
						"in": "query",
						"description": "on to enable sharing when the user has published a new episode, off otherwise",
						"type": "string",
						"format": "string"
					},
					{
						"name": "RADIO_FOLLOW",
						"in": "query",
						"description": "on to enable sharing when the user starts following a radio, off otherwise",
						"type": "string",
						"format": "string"
					},
					{
						"name": "SHOW_FOLLOW",
						"in": "query",
						"description": "on to enable sharing when the user starts following a show, off otherwise",
						"type": "string",
						"format": "string"
					},
					{
						"name": "USER_FOLLOW",
						"in": "query",
						"description": " on to enable sharing when the user starts following another user, off otherwise",
						"type": "string",
						"format": "string"
					},
					{
						"name": "user_id",
						"in": "path",
						"description": "The user id.",
						"type": "string",
						"format": "string"
					}
				],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [
					"Users"
				]
			}
		},
		"/user/{user_id}/device/{token}": {
			"delete": {
				"summary": "Delete Device",
				"description": "Delete the association from a mobile device and a registered user",
				"operationId": "",
				"parameters": [
					{
						"name": "token",
						"in": "path",
						"description": "The device token.",
						"type": "string",
						"format": "string"
					},
					{
						"name": "user_id",
						"in": "path",
						"description": "The user id.",
						"type": "string",
						"format": "string"
					}
				],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [
					"Device"
				]
			}
		},
		"/user/{user_id}/devices": {
			"get": {
				"summary": "Create Device",
				"description": "Creates a new device.",
				"operationId": "",
				"parameters": [
					{
						"name": "application_id",
						"in": "query",
						"description": "The application related to the request",
						"type": "integer",
						"format": "integer"
					},
					{
						"name": "Delete Device",
						"in": "path",
						"description": "The user id.",
						"type": "string",
						"format": "string"
					},
					{
						"name": "device_name",
						"in": "query",
						"description": "The device name, max length 255",
						"type": "string",
						"format": "string"
					},
					{
						"name": "device_token",
						"in": "query",
						"description": "The device token, max length 255",
						"type": "string",
						"format": "string"
					}
				],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [
					"Devices"
				]
			}
		},
		"/user/{user_id}/episodes": {
			"get": {
				"summary": "Get User Episodes",
				"description": "Retrieves all listenable episodes by user (both live and podcast, ordered by published_at DESC).",
				"operationId": "",
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [
					"User Episodes"
				]
			}
		},
		"/user/{user_id}/image": {
			"put": {
				"summary": "Change User Profile Image",
				"description": "Change User Profile Image",
				"operationId": "",
				"parameters": [
					{
						"name": "image_id",
						"in": "query",
						"description": "The id of the image to set to the user profile. The image must be uploaded before using it (see Upload an image) and must belong to the same  images storage.",
						"type": "integer",
						"format": "integer"
					},
					{
						"name": "user_id",
						"in": "path",
						"description": "The unique user id.",
						"type": "string",
						"format": "string"
					}
				],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [
					"User Images"
				]
			}
		},
		"/user/{user_id}/images": {
			"post": {
				"summary": "Upload An Image",
				"description": "Upload An Image",
				"operationId": "",
				"parameters": [
					{
						"name": "Filedata",
						"in": "body",
						"description": "",
						"schema": {
							"$ref": "#/definitions/holder"
						}
					}
				],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [
					"Users Images"
				]
			}
		},
		"/user/{user_id}/lives/fan": {
			"get": {
				"summary": "Get Favorite Live Episodes",
				"description": "",
				"operationId": "Retrieves users favorite live episodes (the user is a fan/follower of these shows).",
				"parameters": [
					{
						"name": "/user/{user_id}/lives/fan",
						"in": "path",
						"description": "Users id.",
						"type": "string",
						"format": "string"
					}
				],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [
					"User Episodes"
				]
			}
		},
		"/user/{user_id}/newsfeed": {
			"get": {
				"summary": "Newsfeed",
				"description": "This API returns a list of newsfeed items. The request MUST be authenticated (an user can only fetch its own newsfeed).",
				"operationId": "",
				"parameters": [
					{
						"name": "last_id",
						"in": "query",
						"description": " The last newsfeed item received in the previous request, so that this request will contains immediately subsequent items",
						"type": "string",
						"format": "string"
					},
					{
						"name": "max_per_page",
						"in": "query",
						"description": " Max number of items in the response",
						"type": "string",
						"format": "string"
					},
					{
						"name": "user_id",
						"in": "path",
						"description": "The user id.",
						"type": "string",
						"format": "string"
					}
				],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [
					"Newsfeed"
				]
			}
		},
		"/user/{user_id}/shows/author": {
			"get": {
				"summary": "GEt Shows By Author",
				"description": "",
				"operationId": "Retrieves all shows by author.",
				"parameters": [
					{
						"name": "user_id",
						"in": "path",
						"description": "The user id.",
						"type": "string",
						"format": "string"
					}
				],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [
					"User Shows"
				]
			}
		},
		"/user/{user_id}/shows/fan": {
			"get": {
				"summary": "Get Favorite Shows",
				"description": "Retrieves the list of shows whose authors are followed by <user_id>.",
				"operationId": "",
				"parameters": [
					{
						"name": "latest_episode",
						"in": "query",
						"description": "True (1) to enable the export of the latest episode. The latest episode could be the current live (if any) or the latest podcast.",
						"type": "string",
						"format": "string"
					},
					{
						"name": "user_id",
						"in": "path",
						"description": "The user id.",
						"type": "string",
						"format": "string"
					}
				],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [
					"User Shows"
				]
			}
		},
		"/users/search/{query}": {
			"get": {
				"summary": "Search Users",
				"description": "This API allows to find users. ",
				"operationId": "",
				"parameters": [
					{
						"name": "query",
						"in": "path",
						"description": "Search query",
						"type": "string",
						"format": "string"
					}
				],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [
					"Users"
				]
			}
		},
		"/whoami": {
			"get": {
				"summary": "Get Authenticated User",
				"description": "Retrieves information about the authenticated user.",
				"operationId": "",
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [
					"Users"
				]
			}
		},
		"show/{show_id}/image": {
			"put": {
				"summary": "Change Show Image",
				"description": "Change Show Image",
				"operationId": "",
				"parameters": [
					{
						"name": "image_id",
						"in": "query",
						"description": "The id of the image to set to the show. The image must be uploaded before using it (see Upload an image) and must belong to show authors images storage.",
						"type": "string",
						"format": "string"
					},
					{
						"name": "show_id",
						"in": "path",
						"description": "Unique show id.",
						"type": "string",
						"format": "string"
					}
				],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [
					"Show Images"
				]
			}
		}
	}
}