{
	"swagger": "2.0",
	"info": {
		"title": "DreamFactory Rackspace Files API",
		"description": "Working with files, whether local to the DSP or remote breaks down to basic CRUD operations, just like working with your database services.",
		"termsOfService": null,
		"version": null
	},
	"host": "dsp-sandman1.cloud.dreamfactory.com",
	"basePath": "/rest/RackspaceCloudFiles",
	"schemes": [
		"http"
	],
	"produces": [
		"application/json"
	],
	"consumes": [
		"application/json"
	],
	"paths": {
		"/user": {
			"get": {
				"summary": "getResources() - List resources available for user session management.",
				"description": "See listed operations for each resource available.",
				"operationId": "getResources",
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [
					""
				]
			}
		},
		"/user/custom": {
			"post": {
				"summary": "setCustomSettings() - Set or update one or more custom user settings.",
				"description": "A valid session is required to edit settings. Post body should be an array of name-value pairs.",
				"operationId": "setCustomSettings",
				"parameters": [
					{
						"name": "body",
						"in": "body",
						"description": "Data containing name-value pairs of desired settings.",
						"schema": {
							"$ref": "#/definitions/holder"
						}
					}
				],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [
					""
				]
			}
		},
		"/user/custom/{setting}": {
			"get": {
				"summary": "getCustomSetting() - Retrieve one custom user setting.",
				"description": "Setting will be returned as an object containing name-value pair. A value of null is returned for settings that are not found.",
				"operationId": "getCustomSetting",
				"parameters": [
					{
						"name": "setting",
						"in": "path",
						"description": "Name of the setting to retrieve."
					}
				],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [
					""
				]
			}
		},
		"/user/device": {
			"post": {
				"summary": "setDevice() - Create a record of the current user's device information.",
				"description": "Record the device information for this session. This method is idempotent and will only create one entry per uuid.",
				"operationId": "setDevice",
				"parameters": [
					{
						"name": "body",
						"in": "body",
						"description": "Data containing name-value pairs for the user device.",
						"schema": {
							"$ref": "#/definitions/holder"
						}
					}
				],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [
					""
				]
			}
		},
		"/user/password": {
			"post": {
				"summary": "changePassword() - Change or reset the current user's password.",
				"description": "A valid current session along with old and new password are required to change the password directly posting 'old_password' and 'new_password'. <br/>To request password reset, post 'email' and set 'reset' to true. <br/>To reset the password from an email confirmation, post 'email', 'code', and 'new_password'. <br/>To reset the password from a security question, post 'email', 'security_answer', and 'new_password'.",
				"operationId": "changePassword",
				"parameters": [
					{
						"name": "body",
						"in": "body",
						"description": "Data containing name-value pairs for password change.",
						"schema": {
							"$ref": "#/definitions/holder"
						}
					},
					{
						"name": "login",
						"in": "query",
						"description": "Login and create a session upon successful password reset."
					},
					{
						"name": "reset",
						"in": "query",
						"description": "Set to true to perform password reset."
					}
				],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [
					""
				]
			}
		},
		"/user/profile": {
			"post": {
				"summary": "updateProfile() - Update the current user's profile information.",
				"description": "Update the display name, phone, etc., as well as, security question and answer.",
				"operationId": "updateProfile",
				"parameters": [
					{
						"name": "body",
						"in": "body",
						"description": "Data containing name-value pairs for the user profile.",
						"schema": {
							"$ref": "#/definitions/holder"
						}
					}
				],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [
					""
				]
			}
		},
		"/user/register": {
			"post": {
				"summary": "register() - Register a new user in the system.",
				"description": "The new user is created and, if required, sent an email for confirmation. This also handles the registration confirmation by posting email, confirmation code and new password.",
				"operationId": "register",
				"parameters": [
					{
						"name": "body",
						"in": "body",
						"description": "Data containing name-value pairs for new user registration.",
						"schema": {
							"$ref": "#/definitions/holder"
						}
					},
					{
						"name": "login",
						"in": "query",
						"description": "Login and create a session upon successful registration."
					}
				],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [
					""
				]
			}
		},
		"/user/session": {
			"post": {
				"summary": "login() - Login and create a new user session.",
				"description": "Calling this creates a new session and logs in the user.",
				"operationId": "login",
				"parameters": [
					{
						"name": "body",
						"in": "body",
						"description": "Data containing name-value pairs used for logging into the system.",
						"schema": {
							"$ref": "#/definitions/holder"
						}
					}
				],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [
					""
				]
			}
		},
		"/system": {
			"get": {
				"summary": "getResources() - List resources available for system management.",
				"description": "See listed operations for each resource available.",
				"operationId": "getResources",
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [
					""
				]
			}
		},
		"/system/app": {
			"post": {
				"summary": "createApps() - Create one or more applications.",
				"description": "Post data should be a single record or an array of records (shown). By default, only the id property of the record affected is returned on success, use 'fields' and 'related' to return more info.",
				"operationId": "createApps",
				"parameters": [
					{
						"name": "body",
						"in": "body",
						"description": "Data containing name-value pairs of records to create.",
						"schema": {
							"$ref": "#/definitions/holder"
						}
					},
					{
						"name": "fields",
						"in": "query",
						"description": "Comma-delimited list of field names to return for each record affected."
					},
					{
						"name": "related",
						"in": "query",
						"description": "Comma-delimited list of related names to return for each record affected."
					},
					{
						"name": "X-HTTP-METHOD",
						"in": "header",
						"description": "Override request using POST to tunnel other http request, such as DELETE."
					}
				],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [
					""
				]
			}
		},
		"/system/app/{id}": {
			"patch": {
				"summary": "updateApp() - Update one application.",
				"description": "Post data should be an array of fields to update for a single record. <br>By default, only the id is returned. Use the 'fields' and/or 'related' parameter to return more properties.",
				"operationId": "updateApp",
				"parameters": [
					{
						"name": "body",
						"in": "body",
						"description": "Data containing name-value pairs of fields to update.",
						"schema": {
							"$ref": "#/definitions/holder"
						}
					},
					{
						"name": "fields",
						"in": "query",
						"description": "Comma-delimited list of field names to return."
					},
					{
						"name": "id",
						"in": "path",
						"description": "Identifier of the record to update."
					},
					{
						"name": "related",
						"in": "query",
						"description": "Comma-delimited list of related records to return."
					}
				],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [
					""
				]
			}
		},
		"/system/app_group": {
			"post": {
				"summary": "createAppGroups() - Create one or more application groups.",
				"description": "Post data should be a single record or an array of records (shown). By default, only the id property of the record affected is returned on success, use 'fields' and 'related' to return more info.",
				"operationId": "createAppGroups",
				"parameters": [
					{
						"name": "body",
						"in": "body",
						"description": "Data containing name-value pairs of records to create.",
						"schema": {
							"$ref": "#/definitions/holder"
						}
					},
					{
						"name": "fields",
						"in": "query",
						"description": "Comma-delimited list of field names to return for each record affected."
					},
					{
						"name": "related",
						"in": "query",
						"description": "Comma-delimited list of related names to return for each record affected."
					},
					{
						"name": "X-HTTP-METHOD",
						"in": "header",
						"description": "Override request using POST to tunnel other http request, such as DELETE."
					}
				],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [
					""
				]
			}
		},
		"/system/app_group/{id}": {
			"patch": {
				"summary": "updateAppGroup() - Update one application group.",
				"description": "Post data should be an array of fields to update for a single record. <br>By default, only the id is returned. Use the 'fields' and/or 'related' parameter to return more properties.",
				"operationId": "updateAppGroup",
				"parameters": [
					{
						"name": "body",
						"in": "body",
						"description": "Data containing name-value pairs of fields to update.",
						"schema": {
							"$ref": "#/definitions/holder"
						}
					},
					{
						"name": "fields",
						"in": "query",
						"description": "Comma-delimited list of field names to return."
					},
					{
						"name": "id",
						"in": "path",
						"description": "Identifier of the record to update."
					},
					{
						"name": "related",
						"in": "query",
						"description": "Comma-delimited list of related records to return."
					}
				],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [
					""
				]
			}
		},
		"/system/config": {
			"post": {
				"summary": "setConfig() - Update one or more system configuration properties.",
				"description": "Post data should be an array of properties.",
				"operationId": "setConfig",
				"parameters": [
					{
						"name": "body",
						"in": "body",
						"description": "Data containing name-value pairs of properties to set.",
						"schema": {
							"$ref": "#/definitions/holder"
						}
					}
				],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [
					""
				]
			}
		},
		"/system/constant": {
			"get": {
				"summary": "getConstants() - Retrieve all platform enumerated constants.",
				"description": "Returns an object containing every enumerated type and its constant values",
				"operationId": "getConstants",
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [
					""
				]
			}
		},
		"/system/constant/{type}": {
			"get": {
				"summary": "getConstant() - Retrieve one constant type enumeration.",
				"description": "Returns , all fields and no relations are returned.",
				"operationId": "getConstant",
				"parameters": [
					{
						"name": "type",
						"in": "path",
						"description": "Identifier of the enumeration type to retrieve."
					}
				],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [
					""
				]
			}
		},
		"/system/custom": {
			"post": {
				"summary": "setCustomSettings() - Update one or more custom system settings.",
				"description": "A valid session and system configuration permissions is required to edit settings. Post body should be an array of name-value pairs.",
				"operationId": "setCustomSettings",
				"parameters": [
					{
						"name": "body",
						"in": "body",
						"description": "Data containing name-value pairs of desired settings.",
						"schema": {
							"$ref": "#/definitions/holder"
						}
					}
				],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [
					""
				]
			}
		},
		"/system/custom/{setting}": {
			"get": {
				"summary": "getCustomSetting() - Retrieve one custom system setting.",
				"description": "Setting will be returned as an object containing name-value pair.",
				"operationId": "getCustomSetting",
				"parameters": [
					{
						"name": "setting",
						"in": "path",
						"description": "Name of the setting to retrieve."
					}
				],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [
					""
				]
			}
		},
		"/system/device": {
			"get": {
				"summary": "getDevices() - Retrieve one or more devices.",
				"description": "Use the 'ids' or 'filter' parameter to limit records that are returned. By default, all records up to the maximum are returned. <br>Use the 'fields' and 'related' parameters to limit properties returned for each record. By default, all fields and no relations are returned for each record. <br>Alternatively, to retrieve by record, a large list of ids, or a complicated filter, use the POST request with X-HTTP-METHOD = GET header and post records or ids.",
				"operationId": "getDevices",
				"parameters": [
					{
						"name": "fields",
						"in": "query",
						"description": "Comma-delimited list of field names to retrieve for each record."
					},
					{
						"name": "filter",
						"in": "query",
						"description": "SQL-like filter to limit the records to retrieve."
					},
					{
						"name": "ids",
						"in": "query",
						"description": "Comma-delimited list of the identifiers of the records to retrieve."
					},
					{
						"name": "include_count",
						"in": "query",
						"description": "Include the total number of filter results in returned metadata."
					},
					{
						"name": "include_schema",
						"in": "query",
						"description": "Include the schema of the table queried in returned metadata."
					},
					{
						"name": "limit",
						"in": "query",
						"description": "Set to limit the filter results."
					},
					{
						"name": "offset",
						"in": "query",
						"description": "Set to offset the filter results to a particular record count."
					},
					{
						"name": "order",
						"in": "query",
						"description": "SQL-like order containing field and direction for filter results."
					},
					{
						"name": "related",
						"in": "query",
						"description": "Comma-delimited list of related names to retrieve for each record."
					}
				],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [
					""
				]
			}
		},
		"/system/device/{id}": {
			"get": {
				"summary": "getDevice() - Retrieve one device.",
				"description": "Use the 'fields' and/or 'related' parameter to limit properties that are returned. By default, all fields and no relations are returned.",
				"operationId": "getDevice",
				"parameters": [
					{
						"name": "fields",
						"in": "query",
						"description": "Comma-delimited list of field names to return."
					},
					{
						"name": "id",
						"in": "path",
						"description": "Identifier of the record to retrieve."
					},
					{
						"name": "related",
						"in": "query",
						"description": "Comma-delimited list of related records to return."
					}
				],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [
					""
				]
			}
		},
		"/system/email_template": {
			"post": {
				"summary": "createEmailTemplates() - Create one or more email templates.",
				"description": "Post data should be a single record or an array of records (shown). By default, only the id property of the record affected is returned on success, use 'fields' and 'related' to return more info.",
				"operationId": "createEmailTemplates",
				"parameters": [
					{
						"name": "body",
						"in": "body",
						"description": "Data containing name-value pairs of records to create.",
						"schema": {
							"$ref": "#/definitions/holder"
						}
					},
					{
						"name": "fields",
						"in": "query",
						"description": "Comma-delimited list of field names to return for each record affected."
					},
					{
						"name": "related",
						"in": "query",
						"description": "Comma-delimited list of related names to return for each record affected."
					},
					{
						"name": "X-HTTP-METHOD",
						"in": "header",
						"description": "Override request using POST to tunnel other http request, such as DELETE."
					}
				],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [
					""
				]
			}
		},
		"/system/email_template/{id}": {
			"patch": {
				"summary": "updateEmailTemplate() - Update one email template.",
				"description": "Post data should be an array of fields to update for a single record. <br>By default, only the id is returned. Use the 'fields' and/or 'related' parameter to return more properties.",
				"operationId": "updateEmailTemplate",
				"parameters": [
					{
						"name": "body",
						"in": "body",
						"description": "Data containing name-value pairs of fields to update.",
						"schema": {
							"$ref": "#/definitions/holder"
						}
					},
					{
						"name": "fields",
						"in": "query",
						"description": "Comma-delimited list of field names to return."
					},
					{
						"name": "id",
						"in": "path",
						"description": "Identifier of the record to update."
					},
					{
						"name": "related",
						"in": "query",
						"description": "Comma-delimited list of related records to return."
					}
				],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [
					""
				]
			}
		},
		"/system/environment": {
			"get": {
				"summary": "getEnvironment() - Retrieve environment information.",
				"description": "The retrieved information describes the container/machine on which the DSP resides.",
				"operationId": "getEnvironment",
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [
					""
				]
			}
		},
		"/system/event": {
			"post": {
				"summary": "registerEvents() - Register one or more event listeners.",
				"description": "Post data should be a single record or an array of records. No data is returned from this call. You will get a 201 (created) upon success.",
				"operationId": "registerEvents",
				"parameters": [
					{
						"name": "body",
						"in": "body",
						"description": "Data containing event registration records to create.",
						"schema": {
							"$ref": "#/definitions/holder"
						}
					}
				],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [
					""
				]
			}
		},
		"/system/event/{event_name}": {
			"post": {
				"summary": "registerEvent() - Register one event listeners.",
				"description": "Post data must be a single record. No data is returned from this call. You will get a 201 (created) upon success.",
				"operationId": "registerEvent",
				"parameters": [
					{
						"name": "body",
						"in": "body",
						"description": "Data containing event registration record to create.",
						"schema": {
							"$ref": "#/definitions/holder"
						}
					}
				],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [
					""
				]
			}
		},
		"/system/provider": {
			"post": {
				"summary": "createProviders() - Create one or more providers.",
				"description": "Post data should be a single record or an array of records (shown). By default, only the id property of the record affected is returned on success, use 'fields' and 'related' to return more info.",
				"operationId": "createProviders",
				"parameters": [
					{
						"name": "body",
						"in": "body",
						"description": "Data containing name-value pairs of records to create.",
						"schema": {
							"$ref": "#/definitions/holder"
						}
					},
					{
						"name": "fields",
						"in": "query",
						"description": "Comma-delimited list of field names to return for each record affected."
					},
					{
						"name": "related",
						"in": "query",
						"description": "Comma-delimited list of related names to return for each record affected."
					},
					{
						"name": "X-HTTP-METHOD",
						"in": "header",
						"description": "Override request using POST to tunnel other http request, such as DELETE."
					}
				],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [
					""
				]
			}
		},
		"/system/provider/{id}": {
			"patch": {
				"summary": "updateProvider() - Update one provider.",
				"description": "Post data should be an array of fields to update for a single record. <br>By default, only the id is returned. Use the 'fields' and/or 'related' parameter to return more properties.",
				"operationId": "updateProvider",
				"parameters": [
					{
						"name": "body",
						"in": "body",
						"description": "Data containing name-value pairs of fields to update.",
						"schema": {
							"$ref": "#/definitions/holder"
						}
					},
					{
						"name": "fields",
						"in": "query",
						"description": "Comma-delimited list of field names to return."
					},
					{
						"name": "id",
						"in": "path",
						"description": "Identifier of the record to update."
					},
					{
						"name": "related",
						"in": "query",
						"description": "Comma-delimited list of related records to return."
					}
				],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [
					""
				]
			}
		},
		"/system/provider_user": {
			"post": {
				"summary": "createProviderUsers() - Create one or more provider users.",
				"description": "Post data should be a single record or an array of records (shown). By default, only the id property of the record affected is returned on success, use 'fields' and 'related' to return more info.",
				"operationId": "createProviderUsers",
				"parameters": [
					{
						"name": "body",
						"in": "body",
						"description": "Data containing name-value pairs of records to create.",
						"schema": {
							"$ref": "#/definitions/holder"
						}
					},
					{
						"name": "fields",
						"in": "query",
						"description": "Comma-delimited list of field names to return for each record affected."
					},
					{
						"name": "related",
						"in": "query",
						"description": "Comma-delimited list of related names to return for each record affected."
					},
					{
						"name": "X-HTTP-METHOD",
						"in": "header",
						"description": "Override request using POST to tunnel other http request, such as DELETE."
					}
				],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [
					""
				]
			}
		},
		"/system/provider_user/{id}": {
			"patch": {
				"summary": "updateProviderUser() - Update one provider user.",
				"description": "Post data should be an array of fields to update for a single record. <br>By default, only the id is returned. Use the 'fields' and/or 'related' parameter to return more properties.",
				"operationId": "updateProviderUser",
				"parameters": [
					{
						"name": "body",
						"in": "body",
						"description": "Data containing name-value pairs of fields to update.",
						"schema": {
							"$ref": "#/definitions/holder"
						}
					},
					{
						"name": "fields",
						"in": "query",
						"description": "Comma-delimited list of field names to return."
					},
					{
						"name": "id",
						"in": "path",
						"description": "Identifier of the record to update."
					},
					{
						"name": "related",
						"in": "query",
						"description": "Comma-delimited list of related records to return."
					}
				],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [
					""
				]
			}
		},
		"/system/role": {
			"post": {
				"summary": "createRoles() - Create one or more roles.",
				"description": "Post data should be a single record or an array of records (shown). By default, only the id property of the record affected is returned on success, use 'fields' and 'related' to return more info.",
				"operationId": "createRoles",
				"parameters": [
					{
						"name": "body",
						"in": "body",
						"description": "Data containing name-value pairs of records to create.",
						"schema": {
							"$ref": "#/definitions/holder"
						}
					},
					{
						"name": "fields",
						"in": "query",
						"description": "Comma-delimited list of field names to return for each record affected."
					},
					{
						"name": "related",
						"in": "query",
						"description": "Comma-delimited list of related names to return for each record affected."
					},
					{
						"name": "X-HTTP-METHOD",
						"in": "header",
						"description": "Override request using POST to tunnel other http request, such as DELETE."
					}
				],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [
					""
				]
			}
		},
		"/system/role/{id}": {
			"patch": {
				"summary": "updateRole() - Update one role.",
				"description": "Post data should be an array of fields to update for a single record. <br>By default, only the id is returned. Use the 'fields' and/or 'related' parameter to return more properties.",
				"operationId": "updateRole",
				"parameters": [
					{
						"name": "body",
						"in": "body",
						"description": "Data containing name-value pairs of fields to update.",
						"schema": {
							"$ref": "#/definitions/holder"
						}
					},
					{
						"name": "fields",
						"in": "query",
						"description": "Comma-delimited list of field names to return."
					},
					{
						"name": "id",
						"in": "path",
						"description": "Identifier of the record to update."
					},
					{
						"name": "related",
						"in": "query",
						"description": "Comma-delimited list of related records to return."
					}
				],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [
					""
				]
			}
		},
		"/system/script": {
			"get": {
				"summary": "getScripts() - List all scripts",
				"description": "List all known scripts",
				"operationId": "getScripts",
				"parameters": [
					{
						"name": "include_only_user_scripts",
						"in": "query",
						"description": "If true, and include_user_scripts is true, ONLY user scripts will be returned."
					},
					{
						"name": "include_script_body",
						"in": "query",
						"description": "True if you would like the body of the scripts back as well"
					},
					{
						"name": "include_user_scripts",
						"in": "query",
						"description": "If true, user scripts will be returned along with the event scripts."
					}
				],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [
					""
				]
			}
		},
		"/system/script/{script_id}": {
			"put": {
				"summary": "writeScript() - Writes the specified script to the file system.",
				"description": "Post data as a string.",
				"operationId": "writeScript",
				"parameters": [
					{
						"name": "is_user_script",
						"in": "query",
						"description": "True if this is a user script"
					},
					{
						"name": "script_body",
						"in": "body",
						"description": "The body of the script to write.",
						"schema": {
							"$ref": "#/definitions/holder"
						}
					},
					{
						"name": "script_id",
						"in": "path",
						"description": "The ID of the script which you want to retrieve."
					}
				],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [
					""
				]
			}
		},
		"/system/service": {
			"post": {
				"summary": "createServices() - Create one or more services.",
				"description": "Post data should be a single record or an array of records (shown). By default, only the id property of the record affected is returned on success, use 'fields' and 'related' to return more info.",
				"operationId": "createServices",
				"parameters": [
					{
						"name": "body",
						"in": "body",
						"description": "Data containing name-value pairs of records to create.",
						"schema": {
							"$ref": "#/definitions/holder"
						}
					},
					{
						"name": "fields",
						"in": "query",
						"description": "Comma-delimited list of field names to return for each record affected."
					},
					{
						"name": "related",
						"in": "query",
						"description": "Comma-delimited list of related names to return for each record affected."
					},
					{
						"name": "X-HTTP-METHOD",
						"in": "header",
						"description": "Override request using POST to tunnel other http request, such as DELETE."
					}
				],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [
					""
				]
			}
		},
		"/system/service/{id}": {
			"patch": {
				"summary": "updateService() - Update one service.",
				"description": "Post data should be an array of fields to update for a single record. <br>By default, only the id is returned. Use the 'fields' and/or 'related' parameter to return more properties.",
				"operationId": "updateService",
				"parameters": [
					{
						"name": "body",
						"in": "body",
						"description": "Data containing name-value pairs of fields to update.",
						"schema": {
							"$ref": "#/definitions/holder"
						}
					},
					{
						"name": "fields",
						"in": "query",
						"description": "Comma-delimited list of field names to return."
					},
					{
						"name": "id",
						"in": "path",
						"description": "Identifier of the record to update."
					},
					{
						"name": "related",
						"in": "query",
						"description": "Comma-delimited list of related records to return."
					}
				],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [
					""
				]
			}
		},
		"/system/user": {
			"post": {
				"summary": "createUsers() - Create one or more users.",
				"description": "Post data should be a single record or an array of records (shown). By default, only the id property of the record affected is returned on success, use 'fields' and 'related' to return more info.",
				"operationId": "createUsers",
				"parameters": [
					{
						"name": "body",
						"in": "body",
						"description": "Data containing name-value pairs of records to create.",
						"schema": {
							"$ref": "#/definitions/holder"
						}
					},
					{
						"name": "fields",
						"in": "query",
						"description": "Comma-delimited list of field names to return for each record affected."
					},
					{
						"name": "related",
						"in": "query",
						"description": "Comma-delimited list of related names to return for each record affected."
					},
					{
						"name": "X-HTTP-METHOD",
						"in": "header",
						"description": "Override request using POST to tunnel other http request, such as DELETE."
					}
				],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [
					""
				]
			}
		},
		"/system/user/{id}": {
			"patch": {
				"summary": "updateUser() - Update one user.",
				"description": "Post data should be an array of fields to update for a single record. <br>By default, only the id is returned. Use the 'fields' and/or 'related' parameter to return more properties.",
				"operationId": "updateUser",
				"parameters": [
					{
						"name": "body",
						"in": "body",
						"description": "Data containing name-value pairs of fields to update.",
						"schema": {
							"$ref": "#/definitions/holder"
						}
					},
					{
						"name": "fields",
						"in": "query",
						"description": "Comma-delimited list of field names to return."
					},
					{
						"name": "id",
						"in": "path",
						"description": "Identifier of the record to update."
					},
					{
						"name": "related",
						"in": "query",
						"description": "Comma-delimited list of related records to return."
					}
				],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [
					""
				]
			}
		},
		"/app": {
			"post": {
				"summary": "createContainers() - Create one or more containers.",
				"description": "Post data should be a single container definition or an array of container definitions. Alternatively, override the HTTP Method to pass containers to other actions.",
				"operationId": "createContainers",
				"parameters": [
					{
						"name": "body",
						"in": "body",
						"description": "Array of containers to create.",
						"schema": {
							"$ref": "#/definitions/holder"
						}
					},
					{
						"name": "check_exist",
						"in": "query",
						"description": "If true, the request fails when the container to create already exists."
					},
					{
						"name": "X-HTTP-METHOD",
						"in": "header",
						"description": "Override request using POST to tunnel other http request, such as DELETE."
					}
				],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [
					""
				]
			}
		},
		"/app/{container}/": {
			"post": {
				"summary": "createContainer() - Create container and/or add content.",
				"description": "Post data as an array of folders and/or files.",
				"operationId": "createContainer",
				"parameters": [
					{
						"name": "body",
						"in": "body",
						"description": "Array of folders and/or files.",
						"schema": {
							"$ref": "#/definitions/holder"
						}
					},
					{
						"name": "check_exist",
						"in": "query",
						"description": "If true, the request fails when the file or folder to create already exists."
					},
					{
						"name": "clean",
						"in": "query",
						"description": "Option when extract is true, clean the current folder before extracting files and folders."
					},
					{
						"name": "container",
						"in": "path",
						"description": "The name of the container you want to put the contents."
					},
					{
						"name": "extract",
						"in": "query",
						"description": "Extract an uploaded zip file into the container."
					},
					{
						"name": "url",
						"in": "query",
						"description": "The full URL of the file to upload."
					},
					{
						"name": "X-HTTP-METHOD",
						"in": "header",
						"description": "Override request using POST to tunnel other http request, such as DELETE."
					}
				],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [
					""
				]
			}
		},
		"/app/{container}/{file_path}": {
			"put": {
				"summary": "replaceFile() - Update content of the file.",
				"description": "Post body should be the contents of the file.",
				"operationId": "replaceFile",
				"parameters": [
					{
						"name": "body",
						"in": "body",
						"description": "The content of the file.",
						"schema": {
							"$ref": "#/definitions/holder"
						}
					},
					{
						"name": "container",
						"in": "path",
						"description": "Name of the container where the file exists."
					},
					{
						"name": "file_path",
						"in": "path",
						"description": "Path and name of the file to update."
					}
				],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [
					""
				]
			}
		},
		"/app/{container}/{folder_path}/": {
			"post": {
				"summary": "createFolder() - Create a folder and/or add content.",
				"description": "Post data as an array of folders and/or files. Folders are created if they do not exist",
				"operationId": "createFolder",
				"parameters": [
					{
						"name": "body",
						"in": "body",
						"description": "Array of folders and/or files.",
						"schema": {
							"$ref": "#/definitions/holder"
						}
					},
					{
						"name": "check_exist",
						"in": "query",
						"description": "If true, the request fails when the file or folder to create already exists."
					},
					{
						"name": "clean",
						"in": "query",
						"description": "Option when extract is true, clean the current folder before extracting files and folders."
					},
					{
						"name": "container",
						"in": "path",
						"description": "The name of the container where you want to put the contents."
					},
					{
						"name": "extract",
						"in": "query",
						"description": "Extract an uploaded zip file into the folder."
					},
					{
						"name": "folder_path",
						"in": "path",
						"description": "The path of the folder where you want to put the contents. This can be a sub-folder, with each level separated by a /"
					},
					{
						"name": "url",
						"in": "query",
						"description": "The full URL of the file to upload."
					},
					{
						"name": "X-HTTP-METHOD",
						"in": "header",
						"description": "Override request using POST to tunnel other http request, such as DELETE."
					}
				],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [
					""
				]
			}
		},
		"/db": {
			"get": {
				"summary": "getResources() - List all resources.",
				"description": "List the names of the available tables in this storage. ",
				"operationId": "getResources",
				"parameters": [
					{
						"name": "as_access_components",
						"in": "query",
						"description": "Return the names of all the accessible components."
					},
					{
						"name": "include_schemas",
						"in": "query",
						"description": "Also return the names of the tables where the schema is retrievable."
					},
					{
						"name": "names_only",
						"in": "query",
						"description": "Return only the names of the tables in an array."
					},
					{
						"name": "refresh",
						"in": "query",
						"description": "Refresh any cached copy of the resource list."
					}
				],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [
					""
				]
			}
		},
		"/db/_func": {
			"get": {
				"summary": "getStoredFuncs() - List callable stored functions.",
				"description": "List the names of the available stored functions on this database. ",
				"operationId": "getStoredFuncs",
				"parameters": [
					{
						"name": "names_only",
						"in": "query",
						"description": "Return only the names of the functions in an array."
					},
					{
						"name": "refresh",
						"in": "query",
						"description": "Refresh any cached copy of the resource list."
					}
				],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [
					""
				]
			}
		},
		"/db/_func/{function_name}": {
			"post": {
				"summary": "callStoredFuncWithParams() - Call a stored function.",
				"description": "Call a stored function with parameters. Set an optional wrapper and schema for the returned data set. ",
				"operationId": "callStoredFuncWithParams",
				"parameters": [
					{
						"name": "body",
						"in": "body",
						"description": "Data containing input parameters to pass to function.",
						"schema": {
							"$ref": "#/definitions/holder"
						}
					},
					{
						"name": "function_name",
						"in": "path",
						"description": "Name of the stored function to call."
					},
					{
						"name": "returns",
						"in": "query",
						"description": "If returning a single value, use this to set the type of that value."
					},
					{
						"name": "wrapper",
						"in": "query",
						"description": "Add this wrapper around the expected data set before returning."
					}
				],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [
					""
				]
			}
		},
		"/db/_proc": {
			"get": {
				"summary": "getStoredProcs() - List callable stored procedures.",
				"description": "List the names of the available stored procedures on this database. ",
				"operationId": "getStoredProcs",
				"parameters": [
					{
						"name": "names_only",
						"in": "query",
						"description": "Return only the names of the procedures in an array."
					},
					{
						"name": "refresh",
						"in": "query",
						"description": "Refresh any cached copy of the resource list."
					}
				],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [
					""
				]
			}
		},
		"/db/_proc/{procedure_name}": {
			"post": {
				"summary": "callStoredProcWithParams() - Call a stored procedure.",
				"description": "Call a stored procedure with parameters. Set an optional wrapper and schema for the returned data set. ",
				"operationId": "callStoredProcWithParams",
				"parameters": [
					{
						"name": "body",
						"in": "body",
						"description": "Data containing in and out parameters to pass to procedure.",
						"schema": {
							"$ref": "#/definitions/holder"
						}
					},
					{
						"name": "procedure_name",
						"in": "path",
						"description": "Name of the stored procedure to call."
					},
					{
						"name": "returns",
						"in": "query",
						"description": "If returning a single value, use this to set the type of that value."
					},
					{
						"name": "wrapper",
						"in": "query",
						"description": "Add this wrapper around the expected data set before returning."
					}
				],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [
					""
				]
			}
		},
		"/db/_schema": {
			"put": {
				"summary": "replaceTables() - Update (replace) one or more tables.",
				"description": "Post data should be a single table definition or an array of table definitions.",
				"operationId": "replaceTables",
				"parameters": [
					{
						"name": "tables",
						"in": "body",
						"description": "Array of table definitions.",
						"schema": {
							"$ref": "#/definitions/holder"
						}
					}
				],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [
					""
				]
			}
		},
		"/db/_schema/{table_name}": {
			"put": {
				"summary": "replaceTable() - Update (replace) a table with the given properties.",
				"description": "Post data should be an array of field properties for a single record or an array of fields.",
				"operationId": "replaceTable",
				"parameters": [
					{
						"name": "schema",
						"in": "body",
						"description": "Array of field definitions.",
						"schema": {
							"$ref": "#/definitions/holder"
						}
					},
					{
						"name": "table_name",
						"in": "path",
						"description": "Name of the table to perform operations on."
					}
				],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [
					""
				]
			}
		},
		"/db/_schema/{table_name}/{field_name}": {
			"put": {
				"summary": "replaceField() - Update one record by identifier.",
				"description": "Post data should be an array of field properties for the given field.",
				"operationId": "replaceField",
				"parameters": [
					{
						"name": "field_name",
						"in": "path",
						"description": "Name of the field to perform operations on."
					},
					{
						"name": "properties",
						"in": "body",
						"description": "Array of field properties.",
						"schema": {
							"$ref": "#/definitions/holder"
						}
					},
					{
						"name": "table_name",
						"in": "path",
						"description": "Name of the table to perform operations on."
					}
				],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [
					""
				]
			}
		},
		"/db/{table_name}": {
			"put": {
				"summary": "replaceRecordsByIds() - Update (replace) one or more records.",
				"description": "Posted body should be a single record with name-value pairs to update wrapped in a <b>record</b> tag.<br/> Ids can be included via URL parameter or included in the posted body.<br/> Use the <b>related</b> parameter to return related records for each resource. By default, no related records are returned.<br/> By default, only the id property of the record is returned on success. Use <b>fields</b> parameter to return more info.",
				"operationId": "replaceRecordsByIds",
				"parameters": [
					{
						"name": "body",
						"in": "body",
						"description": "Data containing name-value pairs of records to update.",
						"schema": {
							"$ref": "#/definitions/holder"
						}
					},
					{
						"name": "continue",
						"in": "query",
						"description": "In batch scenarios, where supported, continue processing even after one record fails. Default behavior is to halt and return results up to the first point of failure."
					},
					{
						"name": "fields",
						"in": "query",
						"description": "Comma-delimited list of field names to retrieve for each record, * to return all fields."
					},
					{
						"name": "filter",
						"in": "query",
						"description": "SQL-like filter to limit the records to modify."
					},
					{
						"name": "ids",
						"in": "query",
						"description": "Comma-delimited list of the identifiers of the records to modify."
					},
					{
						"name": "id_field",
						"in": "query",
						"description": "Single or comma-delimited list of the fields used as identifiers for the table, used to override defaults or provide identifiers when none are provisioned."
					},
					{
						"name": "id_type",
						"in": "query",
						"description": "Single or comma-delimited list of the field types used as identifiers for the table, used to override defaults or provide identifiers when none are provisioned."
					},
					{
						"name": "related",
						"in": "query",
						"description": "Comma-delimited list of relationship names to retrieve for each record, or * to retrieve all."
					},
					{
						"name": "rollback",
						"in": "query",
						"description": "In batch scenarios, where supported, rollback all changes if any record of the batch fails. Default behavior is to halt and return results up to the first point of failure, leaving any changes."
					},
					{
						"name": "table_name",
						"in": "path",
						"description": "Name of the table to perform operations on."
					}
				],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [
					""
				]
			}
		},
		"/db/{table_name}/{id}": {
			"put": {
				"summary": "replaceRecord() - Replace the content of one record by identifier.",
				"description": "Post data should be an array of fields for a single record.<br/> Use the <b>related</b> parameter to return related records for each resource. By default, no related records are returned.<br/> Use the <b>fields</b> parameter to return more properties. By default, the id is returned.",
				"operationId": "replaceRecord",
				"parameters": [
					{
						"name": "body",
						"in": "body",
						"description": "Data containing name-value pairs of the replacement record.",
						"schema": {
							"$ref": "#/definitions/holder"
						}
					},
					{
						"name": "fields",
						"in": "query",
						"description": "Comma-delimited list of field names to retrieve for each record, * to return all fields."
					},
					{
						"name": "id",
						"in": "path",
						"description": "Identifier of the record to update."
					},
					{
						"name": "id_field",
						"in": "query",
						"description": "Single or comma-delimited list of the fields used as identifiers for the table, used to override defaults or provide identifiers when none are provisioned."
					},
					{
						"name": "id_type",
						"in": "query",
						"description": "Single or comma-delimited list of the field types used as identifiers for the table, used to override defaults or provide identifiers when none are provisioned."
					},
					{
						"name": "related",
						"in": "query",
						"description": "Comma-delimited list of relationship names to retrieve for each record, or * to retrieve all."
					},
					{
						"name": "table_name",
						"in": "path",
						"description": "Name of the table to perform operations on."
					}
				],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [
					""
				]
			}
		},
		"/email": {
			"post": {
				"summary": "sendEmail() - Send an email created from posted data and/or a template.",
				"description": "If a template is not used with all required fields, then they must be included in the request. If the 'from' address is not provisioned in the service, then it must be included in the request.",
				"operationId": "sendEmail",
				"parameters": [
					{
						"name": "data",
						"in": "body",
						"description": "Data containing name-value pairs used for provisioning emails.",
						"schema": {
							"$ref": "#/definitions/holder"
						}
					},
					{
						"name": "template",
						"in": "query",
						"description": "Optional template name to base email on."
					},
					{
						"name": "template_id",
						"in": "query",
						"description": "Optional template id to base email on."
					}
				],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [
					""
				]
			}
		},
		"/mongodb": {
			"get": {
				"summary": "getResources() - List all resources.",
				"description": "List the names of the available tables in this storage. ",
				"operationId": "getResources",
				"parameters": [
					{
						"name": "as_access_components",
						"in": "query",
						"description": "Return the names of all the accessible components."
					},
					{
						"name": "include_schemas",
						"in": "query",
						"description": "Also return the names of the tables where the schema is retrievable."
					},
					{
						"name": "names_only",
						"in": "query",
						"description": "Return only the names of the tables in an array."
					},
					{
						"name": "refresh",
						"in": "query",
						"description": "Refresh any cached copy of the resource list."
					}
				],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [
					""
				]
			}
		},
		"/mongodb/_schema": {
			"put": {
				"summary": "replaceTables() - Update (replace) one or more tables.",
				"description": "Post data should be a single table definition or an array of table definitions.",
				"operationId": "replaceTables",
				"parameters": [
					{
						"name": "tables",
						"in": "body",
						"description": "Array of table definitions.",
						"schema": {
							"$ref": "#/definitions/holder"
						}
					}
				],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [
					""
				]
			}
		},
		"/mongodb/_schema/{table_name}": {
			"put": {
				"summary": "replaceTable() - Update (replace) a table with the given properties.",
				"description": "Post data should be an array of field properties for a single record or an array of fields.",
				"operationId": "replaceTable",
				"parameters": [
					{
						"name": "schema",
						"in": "body",
						"description": "Array of field definitions.",
						"schema": {
							"$ref": "#/definitions/holder"
						}
					},
					{
						"name": "table_name",
						"in": "path",
						"description": "Name of the table to perform operations on."
					}
				],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [
					""
				]
			}
		},
		"/mongodb/_schema/{table_name}/{field_name}": {
			"put": {
				"summary": "replaceField() - Update one record by identifier.",
				"description": "Post data should be an array of field properties for the given field.",
				"operationId": "replaceField",
				"parameters": [
					{
						"name": "field_name",
						"in": "path",
						"description": "Name of the field to perform operations on."
					},
					{
						"name": "properties",
						"in": "body",
						"description": "Array of field properties.",
						"schema": {
							"$ref": "#/definitions/holder"
						}
					},
					{
						"name": "table_name",
						"in": "path",
						"description": "Name of the table to perform operations on."
					}
				],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [
					""
				]
			}
		},
		"/mongodb/{table_name}": {
			"put": {
				"summary": "replaceRecordsByIds() - Update (replace) one or more records.",
				"description": "Posted body should be a single record with name-value pairs to update wrapped in a <b>record</b> tag.<br/> Ids can be included via URL parameter or included in the posted body.<br/> By default, only the id property of the record is returned on success. Use <b>fields</b> parameter to return more info.",
				"operationId": "replaceRecordsByIds",
				"parameters": [
					{
						"name": "body",
						"in": "body",
						"description": "Data containing name-value pairs of records to update.",
						"schema": {
							"$ref": "#/definitions/holder"
						}
					},
					{
						"name": "continue",
						"in": "query",
						"description": "In batch scenarios, where supported, continue processing even after one record fails. Default behavior is to halt and return results up to the first point of failure."
					},
					{
						"name": "fields",
						"in": "query",
						"description": "Comma-delimited list of field names to retrieve for each record, * to return all fields."
					},
					{
						"name": "filter",
						"in": "query",
						"description": "SQL-like filter to limit the records to modify."
					},
					{
						"name": "ids",
						"in": "query",
						"description": "Comma-delimited list of the identifiers of the records to modify."
					},
					{
						"name": "id_field",
						"in": "query",
						"description": "Single or comma-delimited list of the fields used as identifiers for the table, used to override defaults or provide identifiers when none are provisioned."
					},
					{
						"name": "id_type",
						"in": "query",
						"description": "Single or comma-delimited list of the field types used as identifiers for the table, used to override defaults or provide identifiers when none are provisioned."
					},
					{
						"name": "rollback",
						"in": "query",
						"description": "In batch scenarios, where supported, rollback all changes if any record of the batch fails. Default behavior is to halt and return results up to the first point of failure, leaving any changes."
					},
					{
						"name": "table_name",
						"in": "path",
						"description": "Name of the table to perform operations on."
					}
				],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [
					""
				]
			}
		},
		"/mongodb/{table_name}/{id}": {
			"put": {
				"summary": "replaceRecord() - Replace the content of one record by identifier.",
				"description": "Post data should be an array of fields for a single record.<br/> Use the <b>fields</b> parameter to return more properties. By default, the id is returned.",
				"operationId": "replaceRecord",
				"parameters": [
					{
						"name": "body",
						"in": "body",
						"description": "Data containing name-value pairs of the replacement record.",
						"schema": {
							"$ref": "#/definitions/holder"
						}
					},
					{
						"name": "fields",
						"in": "query",
						"description": "Comma-delimited list of field names to retrieve for each record, * to return all fields."
					},
					{
						"name": "id",
						"in": "path",
						"description": "Identifier of the record to update."
					},
					{
						"name": "id_field",
						"in": "query",
						"description": "Single or comma-delimited list of the fields used as identifiers for the table, used to override defaults or provide identifiers when none are provisioned."
					},
					{
						"name": "id_type",
						"in": "query",
						"description": "Single or comma-delimited list of the field types used as identifiers for the table, used to override defaults or provide identifiers when none are provisioned."
					},
					{
						"name": "table_name",
						"in": "path",
						"description": "Name of the table to perform operations on."
					}
				],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [
					""
				]
			}
		},
		"/RackspaceCloudFiles": {
			"post": {
				"summary": "createContainers() - Create one or more containers.",
				"description": "Post data should be a single container definition or an array of container definitions. Alternatively, override the HTTP Method to pass containers to other actions.",
				"operationId": "createContainers",
				"parameters": [
					{
						"name": "body",
						"in": "body",
						"description": "Array of containers to create.",
						"schema": {
							"$ref": "#/definitions/holder"
						}
					},
					{
						"name": "check_exist",
						"in": "query",
						"description": "If true, the request fails when the container to create already exists."
					},
					{
						"name": "X-HTTP-METHOD",
						"in": "header",
						"description": "Override request using POST to tunnel other http request, such as DELETE."
					}
				],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [
					""
				]
			}
		},
		"/RackspaceCloudFiles/{container}/": {
			"post": {
				"summary": "createContainer() - Create container and/or add content.",
				"description": "Post data as an array of folders and/or files.",
				"operationId": "createContainer",
				"parameters": [
					{
						"name": "body",
						"in": "body",
						"description": "Array of folders and/or files.",
						"schema": {
							"$ref": "#/definitions/holder"
						}
					},
					{
						"name": "check_exist",
						"in": "query",
						"description": "If true, the request fails when the file or folder to create already exists."
					},
					{
						"name": "clean",
						"in": "query",
						"description": "Option when extract is true, clean the current folder before extracting files and folders."
					},
					{
						"name": "container",
						"in": "path",
						"description": "The name of the container you want to put the contents."
					},
					{
						"name": "extract",
						"in": "query",
						"description": "Extract an uploaded zip file into the container."
					},
					{
						"name": "url",
						"in": "query",
						"description": "The full URL of the file to upload."
					},
					{
						"name": "X-HTTP-METHOD",
						"in": "header",
						"description": "Override request using POST to tunnel other http request, such as DELETE."
					}
				],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [
					""
				]
			}
		},
		"/RackspaceCloudFiles/{container}/{file_path}": {
			"put": {
				"summary": "replaceFile() - Update content of the file.",
				"description": "Post body should be the contents of the file.",
				"operationId": "replaceFile",
				"parameters": [
					{
						"name": "body",
						"in": "body",
						"description": "The content of the file.",
						"schema": {
							"$ref": "#/definitions/holder"
						}
					},
					{
						"name": "container",
						"in": "path",
						"description": "Name of the container where the file exists."
					},
					{
						"name": "file_path",
						"in": "path",
						"description": "Path and name of the file to update."
					}
				],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [
					""
				]
			}
		},
		"/RackspaceCloudFiles/{container}/{folder_path}/": {
			"post": {
				"summary": "createFolder() - Create a folder and/or add content.",
				"description": "Post data as an array of folders and/or files. Folders are created if they do not exist",
				"operationId": "createFolder",
				"parameters": [
					{
						"name": "body",
						"in": "body",
						"description": "Array of folders and/or files.",
						"schema": {
							"$ref": "#/definitions/holder"
						}
					},
					{
						"name": "check_exist",
						"in": "query",
						"description": "If true, the request fails when the file or folder to create already exists."
					},
					{
						"name": "clean",
						"in": "query",
						"description": "Option when extract is true, clean the current folder before extracting files and folders."
					},
					{
						"name": "container",
						"in": "path",
						"description": "The name of the container where you want to put the contents."
					},
					{
						"name": "extract",
						"in": "query",
						"description": "Extract an uploaded zip file into the folder."
					},
					{
						"name": "folder_path",
						"in": "path",
						"description": "The path of the folder where you want to put the contents. This can be a sub-folder, with each level separated by a /"
					},
					{
						"name": "url",
						"in": "query",
						"description": "The full URL of the file to upload."
					},
					{
						"name": "X-HTTP-METHOD",
						"in": "header",
						"description": "Override request using POST to tunnel other http request, such as DELETE."
					}
				],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [
					""
				]
			}
		}
	},
	"definitions": {
	}
}