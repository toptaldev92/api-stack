{
	"swagger": "2.0",
	"info": {
		"title": "Docker Remote API",
		"description": "The API for each docker installation.",
		"termsOfService": "http://example.com/tos/",
		"version": "v1.16"
	},
	"host": "api.example.com",
	"basePath": "/",
	"schemes": [
		"http"
	],
	"produces": [
		"application/json"
	],
	"consumes": [
		"application/json"
	],
	"paths": {
		"/startups": {
			"get": {
				"summary": "Startups On AngelList",
				"description": "Returns the firehose of fundraising companies on AngelList. Results are paginated and ordered by the date on which the round was listed.",
				"operationId": "getStartups",
				"parameters": [
					{
						"name": "filter",
						"in": "query",
						"description": "Keyword to filter search by",
						"type": "string",
						"format": "string"
					}
				],
				"responses": {
					"200": {
						"description": "Successful Start Response"
					}
				},
				"tags": [
					"Startups",
					" Businesses",
					" Companies"
				]
			}
		},
		"/search": {
			"get": {
				"summary": "Link Search",
				"description": "Search links receiving clicks across bitly by content, language, location, and more.",
				"operationId": "searchLinks",
				"parameters": [
					{
						"name": "cities",
						"in": "query",
						"description": "show links active in this city (ordered like country-state-city, e.g. us-il-chicago).",
						"type": "string",
						"format": "string"
					},
					{
						"name": "domain",
						"in": "query",
						"description": "restrict results to this web domain (like bitly.com).",
						"type": "string",
						"format": "string"
					},
					{
						"name": "fields",
						"in": "query",
						"description": "which fields to return in the response (comma-separated). May be any of: domain, initial_epoch, h2, h3, site, lastindexed, keywords, last_indexed_epoch, title, initial, summaryText, content, score, summaryTitle, type, description, cities, lang, url, referrer, aggregate_link, lastseen, page, ogtitle, aggregate_link. By default, all will be returned.",
						"type": "string",
						"format": "string"
					},
					{
						"name": "full_domain",
						"in": "query",
						"description": "restrict results to this full web domain (like blog.bitly.com).",
						"type": "string",
						"format": "string"
					},
					{
						"name": "lang",
						"in": "query",
						"description": "favor results in this language (two letter ISO code).",
						"type": "string",
						"format": "string"
					},
					{
						"name": "limit",
						"in": "query",
						"description": "",
						"type": "string",
						"format": "string"
					},
					{
						"name": "offset",
						"in": "query",
						"description": "which result to start with (defaults to 0).",
						"type": "string",
						"format": "string"
					},
					{
						"name": "query",
						"in": "query",
						"description": "string to query for.",
						"type": "string",
						"format": "string"
					}
				],
				"responses": {
					"200": {
						"description": "Successful Links Response"
					}
				},
				"tags": [
					"Links",
					" URL",
					" URL Shortener",
					" Search"
				]
			}
		},
		"sendmsg/": {
			"get": {
				"summary": "Send Message",
				"description": "The Clickatell HTTP/S API provides just about the simplest way of programming your connection to Clickatell, and if you need to overcome a firewall problem HTTP/S is almost certainly your best solution.",
				"operationId": "",
				"parameters": [
					{
						"name": "api_id",
						"in": "query",
						"description": "",
						"type": "string",
						"format": "string"
					},
					{
						"name": "password",
						"in": "query",
						"description": "",
						"type": "string",
						"format": "string"
					},
					{
						"name": "text",
						"in": "query",
						"description": "",
						"type": "string",
						"format": "string"
					},
					{
						"name": "to",
						"in": "query",
						"description": "",
						"type": "string",
						"format": "string"
					},
					{
						"name": "user",
						"in": "query",
						"description": "The user id sending message.",
						"type": "string",
						"format": "string"
					}
				],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [
					"Messaging",
					" SMS"
				]
			}
		},
		"send.aspx": {
			"get": {
				"summary": "Send SMS Via HTTP",
				"description": "The HTTP interface to send text messages can be accessed using GET or POST. All parameters must be URL Encoded and sent as UTF-8 text.",
				"operationId": "",
				"parameters": [
					{
						"name": "Content",
						"in": "query",
						"description": "The message you want to send. Mobile networks only support characters listed in the GSM character set, but for consistency all characters must be UTF-8 encoded when sending through the API.",
						"type": "string",
						"format": "string"
					},
					{
						"name": "From",
						"in": "query",
						"description": "The text or phone number displayed when a text message is received on a phone. This can be either a 12 digit number or 11 characters long. You can set a default by logging in to Clockwork.",
						"type": "string",
						"format": "string"
					},
					{
						"name": "Key",
						"in": "query",
						"description": "Your API key, available by logging in (with your username and password) to Clockwork.",
						"type": "string",
						"format": "string"
					},
					{
						"name": "Long",
						"in": "query",
						"description": "Set this to 1 and weu2019ll stick together multiple messages giving you up to 459 characters, rather than the standard 160 (each recipient will cost up to 3 message credits)",
						"type": "string",
						"format": "string"
					},
					{
						"name": "total",
						"in": "query",
						"description": "Up to 50 comma separated numbers. Each number should start with an international country code without any leading zeros or plus symbols.",
						"type": "string",
						"format": "string"
					}
				],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [
					"Messaging",
					" SMS"
				]
			}
		},
		"email_addresses": {
			"put": {
				"summary": "Add Email Address",
				"description": "Adding a new email addresses as an alias for an account",
				"operationId": "",
				"parameters": [
					{
						"name": "email_address",
						"in": "query",
						"description": "An email address",
						"type": "string",
						"format": "string"
					},
					{
						"name": "id",
						"in": "path",
						"description": "Unique id of an account accessible through your API key",
						"type": "string",
						"format": "string"
					}
				],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [
					"Messaging",
					" Email"
				]
			}
		},
		"email_addresses/email": {
			"post": {
				"summary": "Modify Email",
				"description": "Modifiying a given email address",
				"operationId": "",
				"parameters": [
					{
						"name": "email",
						"in": "query",
						"description": "One of the email addresses associated to the account",
						"type": "string",
						"format": "string"
					},
					{
						"name": "id",
						"in": "path",
						"description": "Unique id of an account accessible through your API key",
						"type": "string",
						"format": "string"
					}
				],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [
					"Messaging",
					" Email"
				]
			}
		},
		"email_addressestest": {
			"get": {
				"summary": "Email Addresses",
				"description": "List of email addressed used by an account",
				"operationId": "",
				"parameters": [
					{
						"name": "id",
						"in": "query",
						"description": "Unique id of an account accessible through your API key",
						"type": "string",
						"format": "string"
					}
				],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [
					"Messaging",
					" Email"
				]
			}
		},
		"files": {
			"get": {
				"summary": "Get Files",
				"description": "Listings of files found as email attachments",
				"operationId": "",
				"parameters": [
					{
						"name": "bcc",
						"in": "query",
						"description": "Email address of a contact BCC'ed on the messages.",
						"type": "string"
					},
					{
						"name": "cc",
						"in": "query",
						"description": "Email address of a contact CC'ed on the messages.",
						"type": "string"
					},
					{
						"name": "date_after",
						"in": "query",
						"description": "Only include files attached to messages sent after a given timestamp. The value this filter is applied to is the Date: header of the message which refers to the time the message is sent from the origin.",
						"type": "string"
					},
					{
						"name": "date_before",
						"in": "query",
						"description": "Only include files attached to messages sent before a given timestamp. The value this filter is applied to is the Date: header of the message which refers to the time the message is sent from the origin.",
						"type": "string"
					},
					{
						"name": "email",
						"in": "query",
						"description": "Email address of the contact for whom you want the latest files exchanged with. By "exchangedwithcontactX" we mean any email received from contact X, sent to contact X or sent by anyone to both contact X and the source owner.",
						"type": "string"
					},
					{
						"name": "file_name",
						"in": "query",
						"description": "Search for files based on their name. You can filter names using typical shell wildcards such as *, ? and [] or regular expressions by enclosing the search expression in a leading / and trailing /. For example, *.pdf would give you all PDF files while /\.jpe?g$/ would return all files whose name ends with .jpg or .jpeg",
						"type": "string"
					},
					{
						"name": "file_size_max",
						"in": "query",
						"description": "Search for files based on their size (in bytes).",
						"type": "string"
					},
					{
						"name": "file_size_min",
						"in": "query",
						"description": "Search for files based on their size (in bytes).",
						"type": "string"
					},
					{
						"name": "from",
						"in": "query",
						"description": "Email address of a contact files have been received from.",
						"type": "string"
					},
					{
						"name": "group_by_revisions",
						"in": "query",
						"description": "If set to 1, the list will do an intelligent grouping of files to reflect occurrences of the same document. The grouping algorithm is exactly the same as the one used to get file revisions but only the occurrences matching the filters applied to the list will be included in the results.",
						"type": "string"
					},
					{
						"name": "id",
						"in": "path",
						"description": "Unique id of an account accessible through your API key",
						"type": "string",
						"format": "string"
					},
					{
						"name": "indexed_after",
						"in": "query",
						"description": "Only include files attached to messages indexed after a given timestamp. This is not the same as the date of the email, it is the time Context.IO indexed this message.",
						"type": "string"
					},
					{
						"name": "indexed_before",
						"in": "query",
						"description": "Only include files attached to messages indexed before a given timestamp. This is not the same as the date of the email, it is the time Context.IO indexed this message.",
						"type": "string"
					},
					{
						"name": "limit",
						"in": "query",
						"description": "The maximum number of results to return.  The maximum limit is 100.",
						"type": "string"
					},
					{
						"name": "offset",
						"in": "query",
						"description": "Start the list at this offset (zero-based).",
						"type": "string"
					},
					{
						"name": "sort_order",
						"in": "query",
						"description": "The sort order of the returned results. Possible values are asc and desc",
						"type": "string"
					},
					{
						"name": "source",
						"in": "query",
						"description": "Filter messages by the account source label.",
						"type": "string"
					},
					{
						"name": "to",
						"in": "query",
						"description": "Email address of a contact files have been sent to.",
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [
					"Messaging",
					" Email",
					" Files"
				]
			}
		},
		"files/file_id": {
			"get": {
				"summary": "Get File",
				"description": "Details for a given file",
				"operationId": "",
				"parameters": [
					{
						"name": "file_id",
						"in": "path",
						"description": "Unique id of a file",
						"type": "string",
						"format": "string"
					},
					{
						"name": "id",
						"in": "path",
						"description": "Unique id of an account accessible through your API key",
						"type": "string",
						"format": "string"
					}
				],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [
					"Messaging",
					" Email",
					" Files"
				]
			}
		},
		"messages/": {
			"post": {
				"summary": "Add Message",
				"description": "Add a message in a given folder",
				"operationId": "",
				"parameters": [
					{
						"name": "dst_folder",
						"in": "query",
						"description": "The folder within dst_source the message should be copied to",
						"type": "string"
					},
					{
						"name": "dst_source",
						"in": "query",
						"description": "Label of the source you want the message copied to",
						"type": "string"
					},
					{
						"name": "flag_answered",
						"in": "query",
						"description": "Message has been answered. Set this parameter to 1 to set the flag, 0 to unset it.",
						"type": "string"
					},
					{
						"name": "flag_deleted",
						"in": "query",
						"description": "Message is "deleted" for later removal. An alternative way of deleting messages is to move it to the Trash folder. Set this parameter to 1 to set the flag, 0 to unset it.",
						"type": "string"
					},
					{
						"name": "flag_draft",
						"in": "query",
						"description": "Message has not completed composition (marked as a draft). Set this parameter to 1 to set the flag, 0 to unset it.",
						"type": "string"
					},
					{
						"name": "flag_flagged",
						"in": "query",
						"description": "Message is "flagged" for urgent/special attention. Set this parameter to 1 to set the flag, 0 to unset it.",
						"type": "string"
					},
					{
						"name": "flag_seen",
						"in": "query",
						"description": "Message has been read. Set this parameter to 1 to set the flag, 0 to unset it.",
						"type": "string"
					},
					{
						"name": "id",
						"in": "path",
						"description": "Unique id of an account accessible through your API key",
						"type": "string",
						"format": "string"
					},
					{
						"name": "message",
						"in": "query",
						"description": "Raw RFC-822 message data. If you use the "viewmessagesource" function of your email client, what you'll see there is what we expect to receive here. Hint: you can get this with the accounts/messages/source call.",
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [
					"Messaging",
					" Email"
				]
			}
		},
		"messages/{message_id}": {
			"post": {
				"summary": "Copy or Move Message",
				"description": "Copy or move a message",
				"operationId": "",
				"parameters": [
					{
						"name": "dst_folder",
						"in": "query",
						"description": "The folder within dst_source the message should be copied to",
						"type": "string"
					},
					{
						"name": "dst_source",
						"in": "query",
						"description": "Label of the source you want the message copied to. This field is required if you're moving a message that already exists in one source of the account to another source of that account. If you only want to move the message to a different folder within the same source, dst_folder is sufficient.",
						"type": "string"
					},
					{
						"name": "flag_answered",
						"in": "query",
						"description": "Message has been answered. Set this parameter to 1 to set the flag, 0 to unset it.",
						"type": "string"
					},
					{
						"name": "flag_deleted",
						"in": "query",
						"description": "Message is "deleted" for later removal. An alternative way of deleting messages is to move it to the Trash folder. Set this parameter to 1 to set the flag, 0 to unset it.",
						"type": "string"
					},
					{
						"name": "flag_draft",
						"in": "query",
						"description": "Message has not completed composition (marked as a draft). Set this parameter to 1 to set the flag, 0 to unset it.",
						"type": "string"
					},
					{
						"name": "flag_flagged",
						"in": "query",
						"description": "Message is "flagged" for urgent/special attention. Set this parameter to 1 to set the flag, 0 to unset it.",
						"type": "string"
					},
					{
						"name": "flag_seen",
						"in": "query",
						"description": "Message has been read. Set this parameter to 1 to set the flag, 0 to unset it.",
						"type": "string"
					},
					{
						"name": "id",
						"in": "path",
						"description": "Unique id of an account accessible through your API key",
						"type": "string",
						"format": "string"
					},
					{
						"name": "message_id",
						"in": "path",
						"description": "Unique id of a message. This can be the message_id or email_message_id property of the message. The gmail_message_id (prefixed with gm-) can also be used.",
						"type": "string",
						"format": "string"
					},
					{
						"name": "move",
						"in": "query",
						"description": "By default, this calls copies the original message in the destination. Set this parameter to 1 to move instead of copy.",
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [
					"Messaging",
					" Email"
				]
			}
		},
		"sources/": {
			"post": {
				"summary": "Add Mailbox",
				"description": "Add a mailbox to a given account",
				"operationId": "",
				"parameters": [
					{
						"name": "callback_url",
						"in": "query",
						"description": "If specified, we'll make a POST request to this URL when the initial sync is completed.",
						"type": "string"
					},
					{
						"name": "email",
						"in": "query",
						"description": "The primary email address used to receive emails in this account",
						"type": "string"
					},
					{
						"name": "expunge_on_deleted_flag",
						"in": "query",
						"description": "By default, we don't filter out messages flagged as deleted. Set this parameter to  1 to turn on this filtering.",
						"type": "string"
					},
					{
						"name": "id",
						"in": "path",
						"description": "Unique id of an account accessible through your API key",
						"type": "string",
						"format": "string"
					},
					{
						"name": "origin_ip",
						"in": "query",
						"description": "IP address of the end user requesting the account to be created",
						"type": "string"
					},
					{
						"name": "password",
						"in": "query",
						"description": "Password for authentication on the IMAP server. Ignored if any of the provider_* parameters are set below.",
						"type": "string"
					},
					{
						"name": "port",
						"in": "query",
						"description": "Port number to connect to on the server. Keep in mind that most IMAP servers will have one port for standard connection and another one for encrypted connection (see use-ssl parameter above)",
						"type": "string"
					},
					{
						"name": "provider_consumer_key",
						"in": "query",
						"description": "The OAuth2 Client ID or OAuth1 consumer key used to obtain the the token and token secret above for that account. That consumer key and secret must be configured in your Context.IO account, see oauth_providers",
						"type": "string"
					},
					{
						"name": "provider_refresh_token",
						"in": "query",
						"description": "An OAuth2 refresh token obtained from the IMAP account provider to be used to authentify on this email account.",
						"type": "string"
					},
					{
						"name": "provider_token",
						"in": "query",
						"description": "An OAuth1 token obtained from the IMAP account provider to be used to authentify on this email account.",
						"type": "string"
					},
					{
						"name": "provider_token_secret",
						"in": "query",
						"description": "An OAuth1 token secret obtained from the IMAP account provider to be used to authentify on this email account..",
						"type": "string"
					},
					{
						"name": "raw_file_list",
						"in": "query",
						"description": "By default, we filter out files like signature images or those winmail.dat files form the files list. Set this parameter to 1 to turn off this filtering and show every single file attachments.",
						"type": "string"
					},
					{
						"name": "server",
						"in": "query",
						"description": "Name of IP of the IMAP server, eg. imap.gmail.com",
						"type": "string"
					},
					{
						"name": "sync_all_folders",
						"in": "query",
						"description": "By default, we filter out some folders like 'Deleted Items' and 'Drafts'. Set this parameter to  1 to turn off this filtering and show every single folder.",
						"type": "string"
					},
					{
						"name": "sync_flags",
						"in": "query",
						"description": "By default, we don't synchronize IMAP flags. Set this parameter to  1 to turn on IMAP flag syncing for the 'seen' and 'flagged' flags.",
						"type": "string"
					},
					{
						"name": "sync_folders",
						"in": "query",
						"description": "By default, we filter out some folders like 'Deleted Items' and 'Drafts'. Set this parameter to  All,Trash to show the 'Deleted Items' folder.",
						"type": "string"
					},
					{
						"name": "type",
						"in": "query",
						"description": "Currently, the only supported type is IMAP",
						"type": "string"
					},
					{
						"name": "username",
						"in": "query",
						"description": "The username used to authentify an IMAP connection. On some servers, this is the same thing as the primary email address.",
						"type": "string"
					},
					{
						"name": "use_ssl",
						"in": "query",
						"description": "Set to 1 if you want SSL encryption to be used when opening connections to the IMAP server. Any other value will be considered as "donotuseSSL"",
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [
					"Messaging",
					" Email"
				]
			}
		},
		"sources/{label}": {
			"post": {
				"summary": "Modify Source",
				"description": " Modify a data source on a given account",
				"operationId": "",
				"parameters": [
					{
						"name": "expunge_on_deleted_flag",
						"in": "query",
						"description": "By default, we don't filter out messages flagged as deleted. Set this parameter to  1 to turn on this filtering.",
						"type": "string"
					},
					{
						"name": "force_status_check",
						"in": "query",
						"description": "Set to 1 to create an IMAP connection and reset the source status to to one reported by the IMAP backend. Don't combine this with other parameters.",
						"type": "string"
					},
					{
						"name": "id",
						"in": "path",
						"description": "Unique id of an account accessible through your API key",
						"type": "string",
						"format": "string"
					},
					{
						"name": "lable",
						"in": "path",
						"description": "The label property of the source instance. You can use 0 as an alias for the first source of an account.",
						"type": "string",
						"format": "string"
					},
					{
						"name": "password",
						"in": "query",
						"description": "New password for this source. Ignored if any of the provider_* parameters are set below.",
						"type": "string"
					},
					{
						"name": "provider_consumer_key",
						"in": "query",
						"description": "The OAuth2 Client ID or OAuth1 consumer key used to obtain the the token and token secret above for that account. That consumer key and secret must be configured in your Context.IO account, see oauth_providers",
						"type": "string"
					},
					{
						"name": "provider_refresh_token",
						"in": "query",
						"description": "An OAuth2 refresh token obtained from the IMAP account provider to be used to authentify on this email account.",
						"type": "string"
					},
					{
						"name": "provider_token",
						"in": "query",
						"description": "An OAuth1 token obtained from the IMAP account provider to be used to authentify on this email account.",
						"type": "string"
					},
					{
						"name": "provider_token_secret",
						"in": "query",
						"description": "An OAuth1 token secret obtained from the IMAP account provider to be used to authentify on this email account..",
						"type": "string"
					},
					{
						"name": "status",
						"in": "query",
						"description": "If the status of the source is TEMP_DISABLED or DISABLED. You can do a POST/PUT with status set to 1 to reset it.",
						"type": "string"
					},
					{
						"name": "sync_all_folders",
						"in": "query",
						"description": "By default, we filter out some folders like 'Deleted Items' and 'Drafts'. Set this parameter to  1 to turn off this filtering and show every single folder.",
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [
					"Messaging",
					" Email"
				]
			}
		},
		"threads/": {
			"get": {
				"summary": "Get Threads",
				"description": "List of threads on an account",
				"operationId": "",
				"parameters": [
					{
						"name": "active_after",
						"in": "query",
						"description": "Get threads with at least one message dated after this timestamp. The value this filter is applied to is the Date: header of the message which refers to the time the message is sent from the origin.",
						"type": "string"
					},
					{
						"name": "active_before",
						"in": "query",
						"description": "Get threads with at least one message dated before this timestamp. The value this filter is applied to is the Date: header of the message which refers to the time the message is sent from the origin.",
						"type": "string"
					},
					{
						"name": "bcc",
						"in": "query",
						"description": "Get threads with at least one message having this email address BCC'ed.",
						"type": "string"
					},
					{
						"name": "cc",
						"in": "query",
						"description": "Get threads with at least one message having this email address CC'ed.",
						"type": "string"
					},
					{
						"name": "email",
						"in": "query",
						"description": "Email address of the contact for whom you want the latest threads. This value is interpreted as received from email X, sent to email X or sent by anyone to both email X and the source owner.",
						"type": "string"
					},
					{
						"name": "folder",
						"in": "query",
						"description": "Filter threads by the folder (or Gmail label). This parameter can be the complete folder name with the appropriate hierarchy delimiter for the mail server being queried (eg. Inbox/My folder) or the "symbolicname" of the folder (eg. \Starred). The symbolic name refers to attributes used to refer to special use folders in a language-independant way. See http://code.google.com/apis/gmail/imap/#xlist (Gmail specific) and RFC-6154.",
						"type": "string"
					},
					{
						"name": "from",
						"in": "query",
						"description": "Get threads with at least one message sent from this email address.",
						"type": "string"
					},
					{
						"name": "id",
						"in": "path",
						"description": "Unique id of an account accessible through your API key",
						"type": "string",
						"format": "string"
					},
					{
						"name": "indexed_after",
						"in": "query",
						"description": "Get threads with at least one message indexed after this timestamp. This is not the same as the date of the email, it is the time Context.IO indexed this message.",
						"type": "string"
					},
					{
						"name": "indexed_before",
						"in": "query",
						"description": "Get threads with at least one message indexed before this timestamp. This is not the same as the date of the email, it is the time Context.IO indexed this message.",
						"type": "string"
					},
					{
						"name": "limit",
						"in": "query",
						"description": "The maximum number of results to return.  The maximum limit is 100.",
						"type": "string"
					},
					{
						"name": "offset",
						"in": "query",
						"description": "Start the list at this offset (zero-based).",
						"type": "string"
					},
					{
						"name": "started_after",
						"in": "query",
						"description": "Get threads whose first message is dated after this timestamp. The value this filter is applied to is the Date: header of the message which refers to the time the message is sent from the origin.",
						"type": "string"
					},
					{
						"name": "started_before",
						"in": "query",
						"description": "Get threads whose first message is dated before this timestamp. The value this filter is applied to is the Date: header of the message which refers to the time the message is sent from the origin.",
						"type": "string"
					},
					{
						"name": "subject",
						"in": "query",
						"description": "Get threads with messages whose subject matches this search string. To use regular expressions instead of simple string matching, make sure the string starts and ends with /.",
						"type": "string"
					},
					{
						"name": "to",
						"in": "query",
						"description": "Get threads with at least one message sent to this email address.",
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [
					"Messaging",
					" Email"
				]
			}
		},
		"threads/{thread_id}": {
			"get": {
				"summary": "Return Thread",
				"description": "Returns files, contacts and messages on a given thread",
				"operationId": "",
				"parameters": [
					{
						"name": "body_type",
						"in": "query",
						"description": "Used when include_body is set to get only body parts of a given MIME-type (for example text/html)",
						"type": "string"
					},
					{
						"name": "id",
						"in": "path",
						"description": "Unique id of an account accessible through your API key",
						"type": "string",
						"format": "string"
					},
					{
						"name": "include_body",
						"in": "query",
						"description": "Set to 1 to include message bodies in the result. Since message bodies must be retrieved from the IMAP server, expect a performance hit when setting this parameter.",
						"type": "string"
					},
					{
						"name": "include_flags",
						"in": "query",
						"description": "Set to 1 to include IMAP flags of messages in the result. Since message flags must be retrieved from the IMAP server, expect a performance hit when setting this parameter.",
						"type": "string"
					},
					{
						"name": "include_headers",
						"in": "query",
						"description": "Can be set to 0 (default), 1 or raw. If set to 1, complete message headers, parsed into an array, are included in the results. If set to raw, the headers are also included but as a raw unparsed string. Since full original headers bodies must be retrieved from the IMAP server, expect a performance hit when setting this parameter.",
						"type": "string"
					},
					{
						"name": "include_source",
						"in": "query",
						"description": "Set to 1 to include message sources in the result. Since message sources must be retrieved from the IMAP server, expect a performance hit when setting this parameter.",
						"type": "string"
					},
					{
						"name": "limit",
						"in": "query",
						"description": "The maximum number of messages to include in the messages property of the response.  The maximum limit is 100.",
						"type": "string"
					},
					{
						"name": "offset",
						"in": "query",
						"description": "Start the list of messages at this offset (zero-based).",
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [
					"Messaging",
					" Email"
				]
			}
		},
		"sms/rest/{environment}/{senderAddress}/requests/": {
			"get": {
				"summary": "Send An SMS",
				"description": "The Global SMS service allows sending SMS messages to mobile phones and receive text messages from a webservice for a specific number.",
				"operationId": "",
				"parameters": [
					{
						"name": "account",
						"in": "query",
						"description": "Used for accounting, your subaccount id from Developer Garden portal",
						"type": "string",
						"format": "string"
					},
					{
						"name": "address",
						"in": "query",
						"description": "Recipient phone numbers as JSON array, each number must have the format "tel: +1630000001" where "+16" is your country code.",
						"type": "string",
						"format": "string"
					},
					{
						"name": "clientCorrelator",
						"in": "query",
						"description": "String uniquely identifies this create SMS request. If there is a communication failure during the request, using the same clientCorrelator when retrying the request allows the operator to avoid sending the same SMS twice.",
						"type": "string",
						"format": "string"
					},
					{
						"name": "environment",
						"in": "path",
						"description": "premium, mock, or sandbox",
						"type": "string",
						"format": "string"
					},
					{
						"name": "outboundEncoding",
						"in": "query",
						"description": "Allowed values are "7bitGSM" and "16bitUCS2", if parameter is not supplied standard GSM 7bit is used.",
						"type": "string",
						"format": "string"
					},
					{
						"name": "outboundSMSBinaryMessage.message",
						"in": "query",
						"description": "xsd:base64Binary short message content in binary format. This is not a GSMA-Standard parameter.",
						"type": "string",
						"format": "string"
					},
					{
						"name": "outboundSMSFlashMessage.flashMessage",
						"in": "query",
						"description": "Short message content. Will be send as flash SMS.",
						"type": "string",
						"format": "string"
					},
					{
						"name": "outboundSMSTextMessage.message",
						"in": "query",
						"description": "Short message content.",
						"type": "string",
						"format": "string"
					},
					{
						"name": "receiptRequest.callbackData",
						"in": "query",
						"description": "String will be passed back in this notification, so you can use it to identify the message the receipt relates to.",
						"type": "string",
						"format": "string"
					},
					{
						"name": "receiptRequest.notifyURL",
						"in": "query",
						"description": "URL to which you would like a notification of delivery sent. The format of this notification is shown below.",
						"type": "string",
						"format": "string"
					},
					{
						"name": "senderAddress",
						"in": "query",
						"description": "String is the address to whom a responding SMS may be sent",
						"type": "string",
						"format": "string"
					},
					{
						"name": "senderName",
						"in": "query",
						"description": "The URL-escaped name of the sender to appear on the terminal is the address to whom a responding SMS may be sent.",
						"type": "string",
						"format": "string"
					}
				],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [
					"Messaging",
					" SMS"
				]
			}
		},
		"sendMMS/": {
			"get": {
				"summary": "Send MMS",
				"description": "The Send MMS service allows sending MMS messages to mobile phones.",
				"operationId": "",
				"parameters": [
					{
						"name": "account",
						"in": "query",
						"description": "Account ID of the sub-account that should be billed for the service use. If the parameter is not specified, the main account is billed.",
						"type": "string",
						"format": "string"
					},
					{
						"name": "attachment",
						"in": "query",
						"description": "Base64 encoded attachment to send. (optional)  Attachments of arbitrary type (Picture, Sound, Video, Text) are supported. The file type has to be specified through contentType. Furthermore, the file name has to be specified through filename.  At least one of the fields, message and attachment, has to be present.",
						"type": "string",
						"format": "string"
					},
					{
						"name": "contentType",
						"in": "query",
						"description": "File type of the attachment, if an attachment is to be sent.",
						"type": "string",
						"format": "string"
					},
					{
						"name": "environment",
						"in": "path",
						"description": "is one of "production", "sandbox" or "mock"",
						"type": "string",
						"format": "string"
					},
					{
						"name": "filename",
						"in": "query",
						"description": "File name of the attachment, if an attachment is to be sent. (optional)",
						"type": "string",
						"format": "string"
					},
					{
						"name": "message",
						"in": "query",
						"description": " text message. (optional). At least one of the fields, message and attachment, has to be present.",
						"type": "string",
						"format": "string"
					},
					{
						"name": "number",
						"in": "query",
						"description": "Recipient phone numbers, separated by commas (",
						").",
						"type": "string",
						"format": "string"
					},
					{
						"name": "originator",
						"in": "query",
						"description": "The sender as displayed to the recipient. ",
						"type": "string",
						"format": "string"
					},
					{
						"name": "subject",
						"in": "query",
						"description": "The subject line.",
						"type": "string",
						"format": "string"
					}
				],
				"responses": {
					"200": {
						"description": "OK"
					}
				},
				"tags": [
					"Messaging",
					" SMS",
					" MMS"
				]
			}
		},
		"/auth": {
			"post": {
				"summary": "Check auth configuration",
				"description": "Check auth configuration",
				"operationId": "check-auth-configuration",
				"responses": {
					"200": {
						"description": "no error"
					},
					"204": {
						"description": "no error"
					},
					"500": {
						"description": "server error"
					}
				},
				"tags": [
					""
				]
			}
		},
		"/build": {
			"post": {
				"summary": "Build an image from Dockerfile via stdin",
				"description": "Build an image from Dockerfile via stdin",
				"operationId": "build-an-image-from-dockerfile-via-stdin",
				"parameters": [
					{
						"name": "Content-type",
						"in": "query",
						"description": "should be set to application/tar.",
						"type": "string"
					},
					{
						"name": "forcerm",
						"in": "query",
						"description": "always remove intermediate containers (includes rm)Request Headers:",
						"type": "string"
					},
					{
						"name": "nocache",
						"in": "query",
						"description": "do not use the cache when building the image",
						"type": "string"
					},
					{
						"name": "pull",
						"in": "query",
						"description": "attempt to pull the image even if an older image exists locally",
						"type": "string"
					},
					{
						"name": "q",
						"in": "query",
						"description": "suppress verbose build output",
						"type": "string"
					},
					{
						"name": "rm",
						"in": "query",
						"description": "remove intermediate containers after a successful build (default behavior)",
						"type": "string"
					},
					{
						"name": "t",
						"in": "query",
						"description": "repository name (and optionally a tag) to be applied to        the resulting image in case of success",
						"type": "string"
					},
					{
						"name": "X-Registry-Config",
						"in": "query",
						"description": "base64-encoded ConfigFile objec",
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "no error"
					},
					"204": {
						"description": "no error"
					},
					"500": {
						"description": "server error"
					}
				},
				"tags": [
					""
				]
			}
		},
		"/commit": {
			"post": {
				"summary": "Create a new image from a container's changes",
				"description": "Create a new image from a container's changes",
				"operationId": "create-a-new-image-from-a-containers-changes",
				"parameters": [
					{
						"name": "author",
						"in": "query",
						"description": "author (e.g., John Hannibal Smith    &lt;hannibal@a-team.com&gt;)",
						"type": "string"
					},
					{
						"name": "comment",
						"in": "query",
						"description": "commit message",
						"type": "string"
					},
					{
						"name": "container",
						"in": "query",
						"description": "source container",
						"type": "string"
					},
					{
						"name": "repo",
						"in": "query",
						"description": "repository",
						"type": "string"
					},
					{
						"name": "tag",
						"in": "query",
						"description": "tag",
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "no error"
					},
					"204": {
						"description": "no error"
					},
					"500": {
						"description": "server error"
					},
					"201": {
						"description": "no error"
					},
					"404": {
						"description": "no such container"
					}
				},
				"tags": [
					""
				]
			}
		},
		"/containers/create": {
			"post": {
				"summary": "Create a container",
				"description": "Create a container",
				"operationId": "create-a-container",
				"parameters": [
					{
						"name": "body",
						"in": "body",
						"description": "Assign the specified name to the container. Must    match /?[a-zA-Z0-9_-]+.",
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "no error"
					},
					"204": {
						"description": "no error"
					},
					"500": {
						"description": "server error"
					},
					"201": {
						"description": "no error"
					},
					"404": {
						"description": "no such container"
					},
					"406": {
						"description": "impossible to attach (container not running)"
					}
				},
				"tags": [
					""
				]
			}
		},
		"/containers/json": {
			"get": {
				"summary": "List containers",
				"description": "List containers",
				"operationId": "list-containers",
				"parameters": [
					{
						"name": "all",
						"in": "query",
						"description": "1/True/true or 0/False/false, Show all containers.        Only running containers are shown by default (i.e., this defaults to false)",
						"type": "string"
					},
					{
						"name": "before",
						"in": "query",
						"description": "Show only containers created before Id, include        non-running ones.",
						"type": "string"
					},
					{
						"name": "exited",
						"in": "query",
						"description": "&lt;int&gt; -- containers with exit code of &lt;int&gt;",
						"type": "string"
					},
					{
						"name": "filters",
						"in": "query",
						"description": "a json encoded value of the filters (a map[string][]string) to process on the containers list. Available filters:",
						"type": "string"
					},
					{
						"name": "limit",
						"in": "query",
						"description": "Show limit last created        containers, include non-running ones.",
						"type": "string"
					},
					{
						"name": "since",
						"in": "query",
						"description": "Show only containers created since Id, include        non-running ones.",
						"type": "string"
					},
					{
						"name": "size",
						"in": "query",
						"description": "1/True/true or 0/False/false, Show the containers        sizes",
						"type": "string"
					},
					{
						"name": "status",
						"in": "query",
						"description": "(restarting|running|paused|exited)",
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "no error"
					},
					"204": {
						"description": "no error"
					},
					"500": {
						"description": "server error"
					},
					"201": {
						"description": "no error"
					},
					"404": {
						"description": "no such container"
					},
					"406": {
						"description": "impossible to attach (container not running)"
					},
					"400": {
						"description": "bad parameter"
					}
				},
				"tags": [
					""
				]
			}
		},
		"/containers/{id}": {
			"delete": {
				"summary": "Remove a container",
				"description": "Remove a container",
				"operationId": "remove-a-container",
				"parameters": [
					{
						"name": "force",
						"in": "query",
						"description": "1/True/true or 0/False/false, Kill then remove the container.        Default false",
						"type": "string"
					},
					{
						"name": "id",
						"in": "path",
						"description": "",
						"type": "string"
					},
					{
						"name": "v",
						"in": "query",
						"description": "1/True/true or 0/False/false, Remove the volumes        associated to the container. Default false",
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "no error"
					},
					"204": {
						"description": "no error"
					},
					"500": {
						"description": "server error"
					},
					"201": {
						"description": "no error"
					},
					"404": {
						"description": "no such container"
					},
					"406": {
						"description": "impossible to attach (container not running)"
					},
					"400": {
						"description": "bad parameter"
					}
				},
				"tags": [
					""
				]
			}
		},
		"/containers/{id}/attach": {
			"post": {
				"summary": "Attach to a container",
				"description": "Attach to a container",
				"operationId": "attach-to-a-container",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "",
						"type": "string"
					},
					{
						"name": "logs",
						"in": "query",
						"description": "1/True/true or 0/False/false, return logs. Default false",
						"type": "string"
					},
					{
						"name": "stderr",
						"in": "query",
						"description": "1/True/true or 0/False/false, if logs=true, return        stderr log, if stream=true, attach to stderr. Default false",
						"type": "string"
					},
					{
						"name": "stdin",
						"in": "query",
						"description": "1/True/true or 0/False/false, if stream=true, attach        to stdin. Default false",
						"type": "string"
					},
					{
						"name": "stdout",
						"in": "query",
						"description": "1/True/true or 0/False/false, if logs=true, return        stdout log, if stream=true, attach to stdout. Default false",
						"type": "string"
					},
					{
						"name": "stream",
						"in": "query",
						"description": "1/True/true or 0/False/false, return stream.        Default false",
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "no error"
					},
					"204": {
						"description": "no error"
					},
					"500": {
						"description": "server errornStream details:nWhen using the TTY setting is enabled innPOST /containers/createn,nthe stream is the raw data from the process PTY and client's stdin.nWhen the TTY is disabled, then the stream is multiplexed to separatenstdout and stderr.nThe format is a Header and a Payload (frame).nHEADERnThe header will contain the information on which stream write thenstream (stdout or stderr). It also contain the size of thenassociated frame encoded on the last 4 bytes (uint32).nIt is encoded on the first 8 bytes like this:nheader := [8]byte{STREAM_TYPE, 0, 0, 0, SIZE1, SIZE2, SIZE3, SIZE4}nnSTREAM_TYPE can be:"
					},
					"201": {
						"description": "no error"
					},
					"404": {
						"description": "no such container"
					},
					"406": {
						"description": "impossible to attach (container not running)"
					},
					"400": {
						"description": "bad parameter"
					}
				},
				"tags": [
					""
				]
			}
		},
		"/containers/{id}/changes": {
			"get": {
				"summary": "Inspect changes on a container's filesystem",
				"description": "Inspect changes on a container's filesystem",
				"operationId": "inspect-changes-on-a-containers-filesystem",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "",
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "no error"
					},
					"204": {
						"description": "no error"
					},
					"500": {
						"description": "server error"
					},
					"201": {
						"description": "no error"
					},
					"404": {
						"description": "no such container"
					},
					"406": {
						"description": "impossible to attach (container not running)"
					},
					"400": {
						"description": "bad parameter"
					}
				},
				"tags": [
					""
				]
			}
		},
		"/containers/{id}/copy": {
			"post": {
				"summary": "Copy files or folders from a container",
				"description": "Copy files or folders from a container",
				"operationId": "copy-files-or-folders-from-a-container",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "",
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "no error"
					},
					"204": {
						"description": "no error"
					},
					"500": {
						"description": "server error"
					},
					"201": {
						"description": "no error"
					},
					"404": {
						"description": "no such container"
					},
					"406": {
						"description": "impossible to attach (container not running)"
					},
					"400": {
						"description": "bad parameter"
					}
				},
				"tags": [
					""
				]
			}
		},
		"/containers/{id}/exec": {
			"post": {
				"summary": "Image tarball format",
				"description": "Image tarball format",
				"operationId": "image-tarball-format",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "",
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "no error"
					},
					"204": {
						"description": "no error"
					},
					"500": {
						"description": "server error"
					},
					"201": {
						"description": "no error"
					},
					"404": {
						"description": "no such container"
					},
					"406": {
						"description": "impossible to attach (container not running)"
					},
					"400": {
						"description": "bad parameter"
					}
				},
				"tags": [
					""
				]
			}
		},
		"/containers/{id}/export": {
			"get": {
				"summary": "Export a container",
				"description": "Export a container",
				"operationId": "export-a-container",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "",
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "no error"
					},
					"204": {
						"description": "no error"
					},
					"500": {
						"description": "server error"
					},
					"201": {
						"description": "no error"
					},
					"404": {
						"description": "no such container"
					},
					"406": {
						"description": "impossible to attach (container not running)"
					},
					"400": {
						"description": "bad parameter"
					}
				},
				"tags": [
					""
				]
			}
		},
		"/containers/{id}/json": {
			"get": {
				"summary": "Inspect a container",
				"description": "Inspect a container",
				"operationId": "inspect-a-container",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "",
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "no error"
					},
					"204": {
						"description": "no error"
					},
					"500": {
						"description": "server error"
					},
					"201": {
						"description": "no error"
					},
					"404": {
						"description": "no such container"
					},
					"406": {
						"description": "impossible to attach (container not running)"
					},
					"400": {
						"description": "bad parameter"
					}
				},
				"tags": [
					""
				]
			}
		},
		"/containers/{id}/kill": {
			"post": {
				"summary": "Kill a container",
				"description": "Kill a container",
				"operationId": "kill-a-container",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "",
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "no error"
					},
					"204": {
						"description": "no error"
					},
					"500": {
						"description": "server error"
					},
					"201": {
						"description": "no error"
					},
					"404": {
						"description": "no such container"
					},
					"406": {
						"description": "impossible to attach (container not running)"
					},
					"400": {
						"description": "bad parameter"
					}
				},
				"tags": [
					""
				]
			}
		},
		"/containers/{id}/logs": {
			"get": {
				"summary": "Get container logs",
				"description": "Get container logs",
				"operationId": "get-container-logs",
				"parameters": [
					{
						"name": "follow",
						"in": "query",
						"description": "1/True/true or 0/False/false, return stream. Default false",
						"type": "string"
					},
					{
						"name": "id",
						"in": "path",
						"description": "",
						"type": "string"
					},
					{
						"name": "stderr",
						"in": "query",
						"description": "1/True/true or 0/False/false, show stderr log. Default false",
						"type": "string"
					},
					{
						"name": "stdout",
						"in": "query",
						"description": "1/True/true or 0/False/false, show stdout log. Default false",
						"type": "string"
					},
					{
						"name": "tail",
						"in": "query",
						"description": "Output specified number of lines at the end of logs: all or &lt;number&gt;. Default all",
						"type": "string"
					},
					{
						"name": "timestamps",
						"in": "query",
						"description": "1/True/true or 0/False/false, print timestamps for        every log line. Default false",
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "no error"
					},
					"204": {
						"description": "no error"
					},
					"500": {
						"description": "server error"
					},
					"201": {
						"description": "no error"
					},
					"404": {
						"description": "no such container"
					},
					"406": {
						"description": "impossible to attach (container not running)"
					},
					"400": {
						"description": "bad parameter"
					}
				},
				"tags": [
					""
				]
			}
		},
		"/containers/{id}/pause": {
			"post": {
				"summary": "Pause a container",
				"description": "Pause a container",
				"operationId": "pause-a-container",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "",
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "no error"
					},
					"204": {
						"description": "no error"
					},
					"500": {
						"description": "server error"
					},
					"201": {
						"description": "no error"
					},
					"404": {
						"description": "no such container"
					},
					"406": {
						"description": "impossible to attach (container not running)"
					},
					"400": {
						"description": "bad parameter"
					}
				},
				"tags": [
					""
				]
			}
		},
		"/containers/{id}/resize?h=&lt;height&gt;&amp;w=&lt;width&gt;": {
			"post": {
				"summary": "Resize a container TTY",
				"description": "Resize a container TTY",
				"operationId": "resize-a-container-tty",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "",
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "no error"
					},
					"204": {
						"description": "no error"
					},
					"500": {
						"description": "Cannot resize container"
					},
					"201": {
						"description": "no error"
					},
					"404": {
						"description": "No such container"
					},
					"406": {
						"description": "impossible to attach (container not running)"
					},
					"400": {
						"description": "bad parameter"
					}
				},
				"tags": [
					""
				]
			}
		},
		"/containers/{id}/restart": {
			"post": {
				"summary": "Restart a container",
				"description": "Restart a container",
				"operationId": "restart-a-container",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "",
						"type": "string"
					},
					{
						"name": "t",
						"in": "query",
						"description": "number of seconds to wait before killing the container",
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "no error"
					},
					"204": {
						"description": "no error"
					},
					"500": {
						"description": "server error"
					},
					"201": {
						"description": "no error"
					},
					"404": {
						"description": "no such container"
					},
					"406": {
						"description": "impossible to attach (container not running)"
					},
					"400": {
						"description": "bad parameter"
					}
				},
				"tags": [
					""
				]
			}
		},
		"/containers/{id}/start": {
			"post": {
				"summary": "Start a container",
				"description": "Start a container",
				"operationId": "start-a-container",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "",
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "no error"
					},
					"204": {
						"description": "no error"
					},
					"500": {
						"description": "server error"
					},
					"201": {
						"description": "no error"
					},
					"404": {
						"description": "no such container"
					},
					"406": {
						"description": "impossible to attach (container not running)"
					},
					"400": {
						"description": "bad parameter"
					},
					"304": {
						"description": "container already started"
					}
				},
				"tags": [
					""
				]
			}
		},
		"/containers/{id}/stop": {
			"post": {
				"summary": "Stop a container",
				"description": "Stop a container",
				"operationId": "stop-a-container",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "",
						"type": "string"
					},
					{
						"name": "t",
						"in": "query",
						"description": "number of seconds to wait before killing the container",
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "no error"
					},
					"204": {
						"description": "no error"
					},
					"500": {
						"description": "server error"
					},
					"201": {
						"description": "no error"
					},
					"404": {
						"description": "no such container"
					},
					"406": {
						"description": "impossible to attach (container not running)"
					},
					"400": {
						"description": "bad parameter"
					},
					"304": {
						"description": "container already stopped"
					}
				},
				"tags": [
					""
				]
			}
		},
		"/containers/{id}/top": {
			"get": {
				"summary": "List processes running inside a container",
				"description": "List processes running inside a container",
				"operationId": "list-processes-running-inside-a-container",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "",
						"type": "string"
					},
					{
						"name": "ps_args",
						"in": "query",
						"description": "ps arguments to use (e.g., aux)",
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "no error"
					},
					"204": {
						"description": "no error"
					},
					"500": {
						"description": "server error"
					},
					"201": {
						"description": "no error"
					},
					"404": {
						"description": "no such container"
					},
					"406": {
						"description": "impossible to attach (container not running)"
					},
					"400": {
						"description": "bad parameter"
					},
					"304": {
						"description": "container already stopped"
					}
				},
				"tags": [
					""
				]
			}
		},
		"/containers/{id}/unpause": {
			"post": {
				"summary": "Unpause a container",
				"description": "Unpause a container",
				"operationId": "unpause-a-container",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "",
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "no error"
					},
					"204": {
						"description": "no error"
					},
					"500": {
						"description": "server error"
					},
					"201": {
						"description": "no error"
					},
					"404": {
						"description": "no such container"
					},
					"406": {
						"description": "impossible to attach (container not running)"
					},
					"400": {
						"description": "bad parameter"
					},
					"304": {
						"description": "container already stopped"
					}
				},
				"tags": [
					""
				]
			}
		},
		"/containers/{id}/wait": {
			"post": {
				"summary": "Wait a container",
				"description": "Wait a container",
				"operationId": "wait-a-container",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "",
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "no error"
					},
					"204": {
						"description": "no error"
					},
					"500": {
						"description": "server error"
					},
					"201": {
						"description": "no error"
					},
					"404": {
						"description": "no such container"
					},
					"406": {
						"description": "impossible to attach (container not running)"
					},
					"400": {
						"description": "bad parameter"
					},
					"304": {
						"description": "container already stopped"
					}
				},
				"tags": [
					""
				]
			}
		},
		"/events": {
			"get": {
				"summary": "Monitor Docker's events",
				"description": "Monitor Docker's events",
				"operationId": "monitor-dockers-events",
				"parameters": [
					{
						"name": "container",
						"in": "query",
						"description": "&lt;string&gt; -- container to filter",
						"type": "string"
					},
					{
						"name": "event",
						"in": "query",
						"description": "&lt;string&gt; -- event to filter",
						"type": "string"
					},
					{
						"name": "filters",
						"in": "query",
						"description": "a json encoded value of the filters (a map[string][]string) to process on the event list. Available filters:",
						"type": "string"
					},
					{
						"name": "image",
						"in": "query",
						"description": "&lt;string&gt; -- image to filter",
						"type": "string"
					},
					{
						"name": "since",
						"in": "query",
						"description": "timestamp used for polling",
						"type": "string"
					},
					{
						"name": "until",
						"in": "query",
						"description": "timestamp used for polling",
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "no error"
					},
					"204": {
						"description": "no error"
					},
					"500": {
						"description": "server error"
					},
					"201": {
						"description": "no error"
					},
					"404": {
						"description": "no such container"
					},
					"406": {
						"description": "impossible to attach (container not running)"
					},
					"400": {
						"description": "bad parameter"
					},
					"304": {
						"description": "container already stopped"
					}
				},
				"tags": [
					""
				]
			}
		},
		"/exec/{id}/json": {
			"get": {
				"summary": "Exec Inspect",
				"description": "Exec Inspect",
				"operationId": "exec-inspect",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "",
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "no error"
					},
					"204": {
						"description": "no error"
					},
					"500": {
						"description": "server error"
					},
					"201": {
						"description": "no error"
					},
					"404": {
						"description": "no such exec instance"
					},
					"406": {
						"description": "impossible to attach (container not running)"
					},
					"400": {
						"description": "bad parameter"
					},
					"304": {
						"description": "container already stopped"
					}
				},
				"tags": [
					""
				]
			}
		},
		"/exec/{id}/resize": {
			"post": {
				"summary": "Exec Resize",
				"description": "Exec Resize",
				"operationId": "exec-resize",
				"parameters": [
					{
						"name": "h",
						"in": "query",
						"description": "height of tty session",
						"type": "string"
					},
					{
						"name": "id",
						"in": "path",
						"description": "",
						"type": "string"
					},
					{
						"name": "w",
						"in": "query",
						"description": "width",
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "no error"
					},
					"204": {
						"description": "no error"
					},
					"500": {
						"description": "server error"
					},
					"201": {
						"description": "no error"
					},
					"404": {
						"description": "no such exec instance"
					},
					"406": {
						"description": "impossible to attach (container not running)"
					},
					"400": {
						"description": "bad parameter"
					},
					"304": {
						"description": "container already stopped"
					}
				},
				"tags": [
					""
				]
			}
		},
		"/exec/{id}/start": {
			"post": {
				"summary": "Exec Start",
				"description": "Exec Start",
				"operationId": "exec-start",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "",
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "no error"
					},
					"204": {
						"description": "no error"
					},
					"500": {
						"description": "server error"
					},
					"201": {
						"description": "no error"
					},
					"404": {
						"description": "no such exec instancenStream details:nSimilar to the stream behavior of POST /container/(id)/attach API"
					},
					"406": {
						"description": "impossible to attach (container not running)"
					},
					"400": {
						"description": "bad parameter"
					},
					"304": {
						"description": "container already stopped"
					}
				},
				"tags": [
					""
				]
			}
		},
		"/images/create": {
			"post": {
				"summary": "Create an image",
				"description": "Create an image",
				"operationId": "create-an-image",
				"parameters": [
					{
						"name": "fromImage",
						"in": "query",
						"description": "name of the image to pull",
						"type": "string"
					},
					{
						"name": "fromSrc",
						"in": "query",
						"description": "source to import.  The value may be a URL from which the image        can be retrieved or - to read the image from the request body.",
						"type": "string"
					},
					{
						"name": "registry",
						"in": "query",
						"description": "the registry to pull fromRequest Headers:",
						"type": "string"
					},
					{
						"name": "repo",
						"in": "query",
						"description": "repository",
						"type": "string"
					},
					{
						"name": "tag",
						"in": "query",
						"description": "tag",
						"type": "string"
					},
					{
						"name": "X-Registry-Auth",
						"in": "query",
						"description": "base64-encoded AuthConfig object",
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "no error"
					},
					"204": {
						"description": "no error"
					},
					"500": {
						"description": "server error"
					},
					"201": {
						"description": "no error"
					},
					"404": {
						"description": "no such exec instancenStream details:nSimilar to the stream behavior of POST /container/(id)/attach API"
					},
					"406": {
						"description": "impossible to attach (container not running)"
					},
					"400": {
						"description": "bad parameter"
					},
					"304": {
						"description": "container already stopped"
					}
				},
				"tags": [
					""
				]
			}
		},
		"/images/get": {
			"get": {
				"summary": "Get a tarball containing all images.",
				"description": "Get a tarball containing all images.",
				"operationId": "get-a-tarball-containing-all-images",
				"responses": {
					"200": {
						"description": "no error"
					},
					"204": {
						"description": "no error"
					},
					"500": {
						"description": "server error"
					},
					"201": {
						"description": "no error"
					},
					"404": {
						"description": "no such exec instancenStream details:nSimilar to the stream behavior of POST /container/(id)/attach API"
					},
					"406": {
						"description": "impossible to attach (container not running)"
					},
					"400": {
						"description": "bad parameter"
					},
					"304": {
						"description": "container already stopped"
					}
				},
				"tags": [
					""
				]
			}
		},
		"/images/json": {
			"get": {
				"summary": "List Images",
				"description": "List Images",
				"operationId": "list-images",
				"parameters": [
					{
						"name": "all",
						"in": "query",
						"description": "1/True/true or 0/False/false, default false",
						"type": "string"
					},
					{
						"name": "dangling",
						"in": "query",
						"description": "true",
						"type": "string"
					},
					{
						"name": "filters",
						"in": "query",
						"description": "a json encoded value of the filters (a map[string][]string) to process on the images list. Available filters:",
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "OK"
					},
					"204": {
						"description": "no error"
					},
					"500": {
						"description": "server error"
					},
					"201": {
						"description": "no error"
					},
					"404": {
						"description": "no such exec instancenStream details:nSimilar to the stream behavior of POST /container/(id)/attach API"
					},
					"406": {
						"description": "impossible to attach (container not running)"
					},
					"400": {
						"description": "bad parameter"
					},
					"304": {
						"description": "container already stopped"
					}
				},
				"tags": [
					""
				]
			}
		},
		"/images/load": {
			"post": {
				"summary": "Load a tarball with a set of images and tags into docker",
				"description": "Load a tarball with a set of images and tags into docker",
				"operationId": "load-a-tarball-with-a-set-of-images-and-tags-into-docker",
				"responses": {
					"200": {
						"description": "no error"
					},
					"500": {
						"description": "server error"
					}
				},
				"tags": [
					""
				]
			}
		},
		"/images/search": {
			"get": {
				"summary": "Search images",
				"description": "Search images",
				"operationId": "search-images",
				"parameters": [
					{
						"name": "term",
						"in": "query",
						"description": "term to search",
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "no error"
					},
					"500": {
						"description": "server error"
					}
				},
				"tags": [
					""
				]
			}
		},
		"/images/{name}": {
			"delete": {
				"summary": "Remove an image",
				"description": "Remove an image",
				"operationId": "remove-an-image",
				"parameters": [
					{
						"name": "force",
						"in": "query",
						"description": "1/True/true or 0/False/false, default false",
						"type": "string"
					},
					{
						"name": "name",
						"in": "path",
						"description": "",
						"type": "string"
					},
					{
						"name": "noprune",
						"in": "query",
						"description": "1/True/true or 0/False/false, default false",
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "no error"
					},
					"500": {
						"description": "server error"
					},
					"404": {
						"description": "no such image"
					},
					"409": {
						"description": "conflict"
					}
				},
				"tags": [
					""
				]
			}
		},
		"/images/{name}/get": {
			"get": {
				"summary": "Get a tarball containing all images in a repository",
				"description": "Get a tarball containing all images in a repository",
				"operationId": "get-a-tarball-containing-all-images-in-a-repository",
				"parameters": [
					{
						"name": "name",
						"in": "path",
						"description": "",
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "no error"
					},
					"500": {
						"description": "server error"
					},
					"404": {
						"description": "no such image"
					},
					"409": {
						"description": "conflict"
					}
				},
				"tags": [
					""
				]
			}
		},
		"/images/{name}/history": {
			"get": {
				"summary": "Get the history of an image",
				"description": "Get the history of an image",
				"operationId": "get-the-history-of-an-image",
				"parameters": [
					{
						"name": "name",
						"in": "path",
						"description": "",
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "no error"
					},
					"500": {
						"description": "server error"
					},
					"404": {
						"description": "no such image"
					},
					"409": {
						"description": "conflict"
					}
				},
				"tags": [
					""
				]
			}
		},
		"/images/{name}/json": {
			"get": {
				"summary": "Inspect an image",
				"description": "Inspect an image",
				"operationId": "inspect-an-image",
				"parameters": [
					{
						"name": "name",
						"in": "path",
						"description": "",
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "no error"
					},
					"500": {
						"description": "server error"
					},
					"404": {
						"description": "no such image"
					},
					"409": {
						"description": "conflict"
					}
				},
				"tags": [
					""
				]
			}
		},
		"/images/{name}/push": {
			"post": {
				"summary": "Push an image on the registry",
				"description": "Push an image on the registry",
				"operationId": "push-an-image-on-the-registry",
				"parameters": [
					{
						"name": "name",
						"in": "path",
						"description": "",
						"type": "string"
					},
					{
						"name": "tag",
						"in": "query",
						"description": "the tag to associate with the image on the registry, optional",
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "no error"
					},
					"500": {
						"description": "server error"
					},
					"404": {
						"description": "no such image"
					},
					"409": {
						"description": "conflict"
					}
				},
				"tags": [
					""
				]
			}
		},
		"/images/{name}/tag": {
			"post": {
				"summary": "Tag an image into a repository",
				"description": "Tag an image into a repository",
				"operationId": "tag-an-image-into-a-repository",
				"parameters": [
					{
						"name": "force",
						"in": "query",
						"description": "1/True/true or 0/False/false, default false",
						"type": "string"
					},
					{
						"name": "name",
						"in": "path",
						"description": "",
						"type": "string"
					},
					{
						"name": "repo",
						"in": "query",
						"description": "The repository to tag in",
						"type": "string"
					},
					{
						"name": "tag",
						"in": "query",
						"description": "The new tag name",
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "no error"
					},
					"500": {
						"description": "server error"
					},
					"404": {
						"description": "no such image"
					},
					"409": {
						"description": "conflict"
					},
					"201": {
						"description": "no error"
					},
					"400": {
						"description": "bad parameter"
					}
				},
				"tags": [
					""
				]
			}
		},
		"/info": {
			"get": {
				"summary": "Display system-wide information",
				"description": "Display system-wide information",
				"operationId": "display-systemwide-information",
				"responses": {
					"200": {
						"description": "no error"
					},
					"500": {
						"description": "server error"
					},
					"404": {
						"description": "no such image"
					},
					"409": {
						"description": "conflict"
					},
					"201": {
						"description": "no error"
					},
					"400": {
						"description": "bad parameter"
					}
				},
				"tags": [
					""
				]
			}
		},
		"/version": {
			"get": {
				"summary": "Show the docker version information",
				"description": "Show the docker version information",
				"operationId": "show-the-docker-version-information",
				"responses": {
					"200": {
						"description": "no error"
					},
					"500": {
						"description": "server error"
					},
					"404": {
						"description": "no such image"
					},
					"409": {
						"description": "conflict"
					},
					"201": {
						"description": "no error"
					},
					"400": {
						"description": "bad parameter"
					}
				},
				"tags": [
					""
				]
			}
		},
		"/_ping": {
			"get": {
				"summary": "Ping the docker server",
				"description": "Ping the docker server",
				"operationId": "ping-the-docker-server",
				"responses": {
					"200": {
						"description": "OK"
					},
					"500": {
						"description": "server error"
					},
					"404": {
						"description": "no such image"
					},
					"409": {
						"description": "conflict"
					},
					"201": {
						"description": "no error"
					},
					"400": {
						"description": "bad parameter"
					}
				},
				"tags": [
					""
				]
			}
		}
	},
	"definitions": [
	]
}